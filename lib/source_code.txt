Project Path: lib

Source Tree:

```txt
lib
├── app.dart
├── config
│   ├── argon.dart
│   ├── eip1193.dart
│   ├── evm_messages.dart
│   ├── ftokens.dart
│   ├── search_engines.dart
│   ├── settings.dart
│   └── zilliqa_legacy_messages.dart
├── main.dart
├── pages
│   ├── about.dart
│   ├── add_account.dart
│   ├── add_ledger_account.dart
│   ├── address_book.dart
│   ├── appearance.dart
│   ├── browser_page.dart
│   ├── browser_settings.dart
│   ├── currency_conversion.dart
│   ├── gen_bip39.dart
│   ├── gen_wallet_options.dart
│   ├── history_page.dart
│   ├── home_page.dart
│   ├── initial_page.dart
│   ├── keystore_backup.dart
│   ├── keystore_file_restore.dart
│   ├── ledger_connect.dart
│   ├── locale.dart
│   ├── login_page.dart
│   ├── main_page.dart
│   ├── manage_tokens.dart
│   ├── network.dart
│   ├── new_wallet_options.dart
│   ├── notification.dart
│   ├── password_setup.dart
│   ├── receive.dart
│   ├── restore_bip39.dart
│   ├── restore_rkstorage.dart
│   ├── restore_sk.dart
│   ├── reveal_bip39.dart
│   ├── reveal_sk.dart
│   ├── security.dart
│   ├── send.dart
│   ├── settings_page.dart
│   ├── setup_cipher.dart
│   ├── setup_net.dart
│   ├── sk_gen.dart
│   ├── verify_bip39.dart
│   ├── wallet.dart
│   ├── wallet_restore_options.dart
│   ├── web_view.dart
│   └── zil_stake.dart
├── router.dart
├── services
│   ├── auth_guard.dart
│   ├── biometric_service.dart
│   ├── device.dart
│   ├── secure_storage.dart
│   └── social_media.dart
├── state
│   └── app_state.dart
├── theme
│   └── app_theme.dart
└── utils
    └── utils.dart

```

`lib/app.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/l10n/app_localizations.dart';
import 'router.dart';
import 'services/auth_guard.dart';
import 'state/app_state.dart';

class ZilPayApp extends StatelessWidget {
  final AuthGuard authGuard;
  final AppState appState;

  const ZilPayApp({super.key, required this.authGuard, required this.appState});

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider.value(value: authGuard),
        ChangeNotifierProvider.value(value: appState),
      ],
      child: Builder(
        builder: (context) {
          return Consumer<AppState>(
            builder: (context, appState, _) {
              final currentTheme = appState.currentTheme;

              return MaterialApp(
                // debugShowCheckedModeBanner: false,
                title:
                    AppLocalizations.of(context)?.appTitle ?? 'ZilPay Wallet',
                localizationsDelegates: const [
                  AppLocalizations.delegate,
                  GlobalMaterialLocalizations.delegate,
                  GlobalWidgetsLocalizations.delegate,
                  GlobalCupertinoLocalizations.delegate,
                ],
                supportedLocales: const [
                  Locale('en'),
                  Locale('ru'),
                  Locale('ja'),
                  Locale('zh'),
                ],
                locale: appState.locale,
                builder: (context, child) {
                  final mediaQuery = MediaQuery.of(context);
                  final screenWidth = mediaQuery.size.width;

                  double textScale = 1.0;

                  if (screenWidth <= 375) {
                    textScale = 0.8;
                  } else if (screenWidth <= 390) {
                    textScale = 0.85;
                  } else {
                    textScale = 1.1;
                  }

                  return MediaQuery(
                    data: mediaQuery.copyWith(
                      textScaler: TextScaler.linear(textScale),
                    ),
                    child: child!,
                  );
                },
                theme: ThemeData(
                  brightness: currentTheme.brightness,
                  primaryColor: currentTheme.primaryPurple,
                  cardColor: currentTheme.cardBackground,
                  scaffoldBackgroundColor: currentTheme.background,
                  canvasColor: Colors.transparent,
                  textTheme: TextTheme(
                    bodyLarge: TextStyle(color: currentTheme.textPrimary),
                    bodyMedium: TextStyle(color: currentTheme.textSecondary),
                    displayLarge: TextStyle(
                        color: currentTheme.textPrimary,
                        fontSize: 34.0,
                        fontWeight: FontWeight.bold),
                    displayMedium: TextStyle(
                        color: currentTheme.textPrimary,
                        fontSize: 28.0,
                        fontWeight: FontWeight.bold),
                    headlineMedium: TextStyle(
                        color: currentTheme.textPrimary,
                        fontSize: 24.0,
                        fontWeight: FontWeight.w600),
                    titleMedium: TextStyle(
                        color: currentTheme.textPrimary,
                        fontSize: 18.0,
                        fontWeight: FontWeight.w500),
                    labelLarge: TextStyle(
                        color: currentTheme.buttonText,
                        fontSize: 16.0,
                        fontWeight: FontWeight.w500),
                  ),
                  pageTransitionsTheme: const PageTransitionsTheme(
                    builders: {
                      TargetPlatform.android:
                          FadeUpwardsPageTransitionsBuilder(),
                      TargetPlatform.iOS: CupertinoPageTransitionsBuilder(),
                    },
                  ),
                  checkboxTheme: CheckboxThemeData(
                    side: BorderSide(
                      color: currentTheme.primaryPurple,
                      width: 1.5,
                    ),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(3.0),
                    ),
                  ),
                  colorScheme: currentTheme.brightness == Brightness.light
                      ? ColorScheme.light(
                          primary: currentTheme.primaryPurple,
                          secondary: currentTheme.secondaryPurple,
                          error: currentTheme.danger,
                          surface: currentTheme.buttonText,
                        )
                      : ColorScheme.dark(
                          primary: currentTheme.primaryPurple,
                          secondary: currentTheme.secondaryPurple,
                          error: currentTheme.danger,
                          surface: currentTheme.buttonText,
                        ),
                  switchTheme: SwitchThemeData(
                    overlayColor: WidgetStateProperty.resolveWith((states) {
                      if (states.contains(WidgetState.selected)) {
                        return currentTheme.primaryPurple
                            .withValues(alpha: 0.1);
                      }
                      return null;
                    }),
                    trackColor: WidgetStateProperty.resolveWith((states) {
                      if (!states.contains(WidgetState.selected)) {
                        return currentTheme.textSecondary
                            .withValues(alpha: 0.3);
                      }

                      return currentTheme.primaryPurple.withValues(alpha: 0.2);
                    }),
                    trackOutlineColor:
                        WidgetStateProperty.resolveWith((states) {
                      if (!states.contains(WidgetState.selected)) {
                        return currentTheme.cardBackground;
                      }
                      return currentTheme.cardBackground;
                    }),
                  ),
                ),
                initialRoute: '/',
                onGenerateRoute: AppRouter(
                  authGuard: Provider.of<AuthGuard>(context, listen: false),
                  appState: Provider.of<AppState>(context, listen: false),
                ).onGenerateRoute,
              );
            },
          );
        },
      ),
    );
  }
}

```

`lib/config/argon.dart`:

```dart
import 'package:zilpay/src/rust/models/settings.dart';

class Argon2DefaultParams {
  static WalletArgonParamsInfo owaspDefault({String secret = ''}) {
    return WalletArgonParamsInfo(
      secret: secret,
      memory: 6553,
      iterations: 2,
      threads: 1,
    );
  }

  static WalletArgonParamsInfo lowMemory({String secret = ''}) {
    return WalletArgonParamsInfo(
      memory: 64 * 1024,
      iterations: 3,
      threads: 1,
      secret: secret,
    );
  }

  static WalletArgonParamsInfo secure({String secret = ''}) {
    return WalletArgonParamsInfo(
      memory: 256 * 1024,
      iterations: 4,
      threads: 4,
      secret: secret,
    );
  }
}

```

`lib/config/eip1193.dart`:

```dart
enum Web3EIP1193Method {
  ethRequestAccounts('eth_requestAccounts'),
  ethAccounts('eth_accounts'),
  ethSign('eth_sign'),
  ethSendTransaction('eth_sendTransaction'),
  ethGetBalance('eth_getBalance'),
  ethGetTransactionByHash('eth_getTransactionByHash'),
  ethGetTransactionReceipt('eth_getTransactionReceipt'),
  ethCall('eth_call'),
  ethEstimateGas('eth_estimateGas'),
  ethBlockNumber('eth_blockNumber'),
  ethGetBlockByNumber('eth_getBlockByNumber'),
  ethGetBlockByHash('eth_getBlockByHash'),
  ethSubscribe('eth_subscribe'),
  ethUnsubscribe('eth_unsubscribe'),
  netVersion('net_version'),
  ethChainId('eth_chainId'),
  ethGetCode('eth_getCode'),
  ethGetStorageAt('eth_getStorageAt'),
  ethGasPrice('eth_gasPrice'),
  ethSignTypedData('eth_signTypedData'),
  ethSignTypedDataV4('eth_signTypedData_v4'),
  ethGetTransactionCount('eth_getTransactionCount'),
  personalSign('personal_sign'),

  walletAddEthereumChain('wallet_addEthereumChain'),
  walletSwitchEthereumChain('wallet_switchEthereumChain'),
  walletWatchAsset('wallet_watchAsset'),
  walletGetPermissions('wallet_getPermissions'),
  walletRequestPermissions('wallet_requestPermissions'),
  walletScanQRCode('wallet_scanQRCode'),
  ethGetEncryptionPublicKey('eth_getEncryptionPublicKey'),
  ethDecrypt('eth_decrypt');

  final String value;
  const Web3EIP1193Method(this.value);
}

enum Web3EIP1193ErrorCode {
  userRejectedRequest(4001),
  unauthorized(4100),
  unsupportedMethod(4200),
  disconnected(4900),
  chainDisconnected(4901),
  internalError(-32603),
  chainNotAdded(4902),
  invalidInput(-32000),
  resourceUnavailable(-32002);

  final int code;
  const Web3EIP1193ErrorCode(this.code);
}

```

`lib/config/evm_messages.dart`:

```dart
class EVMMessages {
  static const String request = 'ZILPAY_REQUEST';
  static const String response = 'ZILPAY_RESPONSE';
  static const String connect = 'connect';
  static const String disconnect = 'disconnect';
  static const String chainChanged = 'chainChanged';
  static const String accountsChanged = 'accountsChanged';
  static const String requestAccounts = 'eth_requestAccounts';
  static const String getAccounts = 'eth_accounts';
  static const String signMessage = 'eth_sign';
  static const String personalSign = 'personal_sign';
  static const String signTypedData = 'eth_signTypedData';
  static const String sendTransaction = 'eth_sendTransaction';
  static const String switchChain = 'wallet_switchEthereumChain';
}

```

`lib/config/ftokens.dart`:

```dart
const zeroEVM = "0x0000000000000000000000000000000000000000";
const zeroZIL = "zil1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq9yf6pz";

const baseThreshold = 0.0000000001;

```

`lib/config/search_engines.dart`:

```dart
class SearchEngine {
  final String name;
  final String description;
  final String url;

  const SearchEngine({
    required this.name,
    required this.description,
    required this.url,
  });
}

const List<SearchEngine> baseSearchEngines = [
  SearchEngine(
    name: 'DuckDuckGo',
    description: 'A search engine that doesn\'t track your actions.',
    url: 'https://duckduckgo.com/?q=',
  ),
  SearchEngine(
    name: 'Perplexity',
    description: 'An AI-powered search engine.',
    url: 'https://www.perplexity.ai/search?q=',
  ),
  SearchEngine(
    name: 'Google',
    description: 'The most popular search engine in the world.',
    url: 'https://www.google.com/search?q=',
  ),
  SearchEngine(
    name: 'Bing',
    description: 'Search engine by Microsoft.',
    url: 'https://www.bing.com/search?q=',
  ),
  SearchEngine(
    name: 'Yandex',
    description: 'A popular search engine in Russia.',
    url: 'https://ya.ru/search/?text=',
  ),
  SearchEngine(
    name: 'Baidu',
    description: 'The leading search engine in China.',
    url: 'https://www.baidu.com/s?wd=',
  ),
  SearchEngine(
    name: 'Ecosia',
    description: 'A search engine that plants trees with your search queries.',
    url: 'https://www.ecosia.org/search?q=',
  ),
];

```

`lib/config/zilliqa_legacy_messages.dart`:

```dart
/// Zilliqa Legacy Messages Configuration
/// Defines message types for communication between the wallet and dApps
class ZilliqaLegacyMessages {
  static const String _appPrefix = 'zil-pay';

  // Wallet State Messages
  static const String getWalletData = '@/$_appPrefix/injected-get-wallet-data';
  static const String addressChanged = '@/$_appPrefix/address-changed';
  static const String networkChanged = '@/$_appPrefix/network-changed';

  static const String watchBlock = '@/$_appPrefix/request-watch_block';

  // Content Proxy Messages
  static const String contentProxyMethod =
      '@/$_appPrefix/request-through-content';
  static const String contentProxyResult =
      '@/$_appPrefix/response-from-content';

  // Transaction Messages
  static const String callToSignTx = '@/$_appPrefix/request-to-sign-tx';
  static const String txResult = '@/$_appPrefix/response-tx-result';

  // Message Signing Messages
  static const String signMessage = '@/$_appPrefix/request-to-sign-message';
  static const String signMessageResponse =
      '@/$_appPrefix/response-sign-message';

  // Block Updates
  static const String newBlock = '@/$_appPrefix/new-block-created';

  // DApp Connection Messages
  static const String connectApp = '@/$_appPrefix/request-to-connect-dapp';
  static const String responseToDapp = '@/$_appPrefix/response-dapp-connect';
  static const String disconnectApp =
      '@/$_appPrefix/request-to-disconnect-dapp';

  static const List<String> allTypes = [
    getWalletData,
    addressChanged,
    networkChanged,
    contentProxyMethod,
    contentProxyResult,
    callToSignTx,
    txResult,
    signMessage,
    signMessageResponse,
    newBlock,
    connectApp,
    responseToDapp,
    disconnectApp,
  ];
}

```

`lib/main.dart`:

```dart
import 'dart:io';

import 'package:path_provider/path_provider.dart';
import 'package:flutter/material.dart';
import 'package:zilpay/src/rust/api/backend.dart';
import 'package:zilpay/src/rust/models/background.dart';

import 'services/auth_guard.dart';
import 'state/app_state.dart';

import 'package:zilpay/src/rust/frb_generated.dart';
import 'app.dart';

Future<String> getStoragePath() async {
  final appDocDir = await getApplicationSupportDirectory();
  return appDocDir.path;
}

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  await RustLib.init();

  BackgroundState state;

  try {
    String appDocPath = await getStoragePath();
    final tempDir = await getTemporaryDirectory();

    final directory = Directory(tempDir.path);

    if (!await directory.exists()) {
      await directory.create(recursive: true);
    }

    state = await loadService(path: "$appDocPath/storage");

    final appState = AppState(
      state: state,
      cahceDir: tempDir.path,
    );

    final authGuard = AuthGuard(state: appState);

    runApp(ZilPayApp(authGuard: authGuard, appState: appState));
  } catch (e) {
    debugPrint("try start, Error: $e");
  }
}

```

`lib/pages/about.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:provider/provider.dart';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import '../theme/app_theme.dart';
import '../components/custom_app_bar.dart';
import '../state/app_state.dart';
import 'package:zilpay/l10n/app_localizations.dart';

class AboutPage extends StatefulWidget {
  const AboutPage({super.key});

  @override
  State<AboutPage> createState() => _AboutPageState();
}

class _AboutPageState extends State<AboutPage> {
  PackageInfo _packageInfo = PackageInfo(
    appName: 'ZilPay',
    packageName: '',
    version: '',
    buildNumber: '',
  );

  @override
  void initState() {
    super.initState();
    _initPackageInfo();
  }

  Future<void> _initPackageInfo() async {
    final info = await PackageInfo.fromPlatform();
    if (mounted) {
      setState(() {
        _packageInfo = info;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);
    final l10n = AppLocalizations.of(context)!;

    return Scaffold(
      backgroundColor: theme.background,
      body: SafeArea(
        child: Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 480),
            child: Column(
              children: [
                Padding(
                  padding: EdgeInsets.symmetric(horizontal: adaptivePadding),
                  child: CustomAppBar(
                    title: l10n.aboutPageTitle,
                    onBackPressed: () => Navigator.pop(context),
                  ),
                ),
                Expanded(
                  child: SingleChildScrollView(
                    physics: const BouncingScrollPhysics(),
                    child: Padding(
                      padding: EdgeInsets.all(adaptivePadding),
                      child: Column(
                        children: [
                          _buildLogoSection(theme, l10n),
                          SizedBox(height: adaptivePadding * 2),
                          _buildAppInfoSection(theme, l10n),
                          SizedBox(height: adaptivePadding * 1.5),
                          _buildDeveloperSection(theme, l10n),
                          SizedBox(height: adaptivePadding * 1.5),
                          _buildLegalSection(theme, l10n),
                        ],
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildLogoSection(AppTheme theme, AppLocalizations l10n) {
    return Column(
      children: [
        Container(
          width: 120,
          height: 120,
          decoration: BoxDecoration(
            color: theme.cardBackground,
            borderRadius: BorderRadius.circular(24),
          ),
          child: Center(
            child: SvgPicture.asset(
              'assets/imgs/zilpay.svg',
              width: 80,
              height: 80,
            ),
          ),
        ),
        const SizedBox(height: 16),
        Text(
          l10n.aboutPageAppName,
          style: TextStyle(
            color: theme.textPrimary,
            fontSize: 28,
            fontWeight: FontWeight.bold,
            overflow: TextOverflow.ellipsis,
          ),
        ),
        const SizedBox(height: 8),
        Text(
          l10n.aboutPageAppDescription,
          style: TextStyle(
            color: theme.textSecondary,
            fontSize: 16,
          ),
          textAlign: TextAlign.center,
        ),
      ],
    );
  }

  Widget _buildAppInfoSection(AppTheme theme, AppLocalizations l10n) {
    return _buildSectionContainer(
      theme,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildSectionTitle(theme, l10n.aboutPageAppInfoTitle),
          const SizedBox(height: 16),
          _buildInfoRow(
            theme,
            l10n.aboutPageVersionLabel,
            '${_packageInfo.version} (${_packageInfo.buildNumber})',
          ),
          _buildInfoRow(
            theme,
            l10n.aboutPageBuildDateLabel,
            l10n.aboutPageBuildDateValue,
          ),
          _buildInfoRow(
            theme,
            l10n.aboutPagePlatformLabel,
            Theme.of(context).platform.toString().split('.').last,
          ),
        ],
      ),
    );
  }

  Widget _buildDeveloperSection(AppTheme theme, AppLocalizations l10n) {
    return _buildSectionContainer(
      theme,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildSectionTitle(theme, l10n.aboutPageDeveloperTitle),
          const SizedBox(height: 16),
          _buildInfoRow(
            theme,
            l10n.aboutPageAuthorLabel,
            l10n.aboutPageAuthorValue,
          ),
          _buildInfoRow(
            theme,
            l10n.aboutPageWebsiteLabel,
            l10n.aboutPageWebsiteValue,
          ),
        ],
      ),
    );
  }

  Widget _buildLegalSection(AppTheme theme, AppLocalizations l10n) {
    return _buildSectionContainer(
      theme,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildSectionTitle(theme, l10n.aboutPageLegalTitle),
          const SizedBox(height: 16),
          _buildActionRow(
            theme,
            l10n.aboutPagePrivacyPolicy,
            'assets/icons/shield.svg',
            false,
            () => _launchUrl('https://zilpay.io/policy'),
          ),
          _buildActionRow(
            theme,
            l10n.aboutPageTermsOfService,
            'assets/icons/document.svg',
            false,
            () => _launchUrl('https://zilpay.io/terms'),
          ),
          _buildActionRow(
            theme,
            l10n.aboutPageLicenses,
            'assets/icons/licenses.svg',
            true,
            () => _showLicensePage(context, l10n),
          ),
        ],
      ),
    );
  }

  Future<void> _showLicensePage(
    BuildContext context,
    AppLocalizations l10n,
  ) async {
    return showLicensePage(
      context: context,
      applicationName: _packageInfo.appName,
      applicationVersion: _packageInfo.version,
      applicationIcon: SvgPicture.asset(
        'assets/imgs/zilpay.svg',
        width: 48,
        height: 48,
      ),
      applicationLegalese: l10n.aboutPageLegalese,
    );
  }

  Widget _buildSectionContainer(AppTheme theme, {required Widget child}) {
    return Container(
      width: double.infinity,
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: BorderRadius.circular(16),
      ),
      padding: const EdgeInsets.all(16),
      child: child,
    );
  }

  Widget _buildSectionTitle(AppTheme theme, String title) {
    return Text(
      title,
      style: TextStyle(
        color: theme.textPrimary,
        fontSize: 18,
        fontWeight: FontWeight.bold,
        overflow: TextOverflow.ellipsis,
      ),
    );
  }

  Widget _buildInfoRow(AppTheme theme, String label, String value) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 12),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Expanded(
            flex: 3,
            child: Text(
              label,
              style: TextStyle(
                color: theme.textSecondary,
                fontSize: 16,
                overflow: TextOverflow.ellipsis,
              ),
            ),
          ),
          Expanded(
            flex: 4,
            child: Text(
              value,
              style: TextStyle(
                color: theme.textPrimary,
                fontSize: 16,
                fontWeight: FontWeight.w500,
                overflow: TextOverflow.ellipsis,
              ),
              textAlign: TextAlign.end,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildActionRow(
    AppTheme theme,
    String title,
    String iconPath,
    bool last,
    VoidCallback onTap,
  ) {
    return GestureDetector(
      onTap: onTap,
      behavior: HitTestBehavior.opaque,
      child: Container(
        padding: const EdgeInsets.symmetric(vertical: 12),
        decoration: BoxDecoration(
          border: Border(
            bottom: BorderSide(
              color: last
                  ? Colors.transparent
                  : theme.textSecondary.withValues(alpha: 0.1),
              width: 1,
            ),
          ),
        ),
        child: Row(
          children: [
            SvgPicture.asset(
              iconPath,
              width: 24,
              height: 24,
              colorFilter: ColorFilter.mode(
                theme.textPrimary,
                BlendMode.srcIn,
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Text(
                title,
                style: TextStyle(
                  color: theme.textPrimary,
                  fontSize: 16,
                  overflow: TextOverflow.ellipsis,
                ),
              ),
            ),
            SvgPicture.asset(
              'assets/icons/right_arrow.svg',
              width: 16,
              height: 16,
              colorFilter: ColorFilter.mode(
                theme.textSecondary,
                BlendMode.srcIn,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _launchUrl(String urlString) async {
    final Uri url = Uri.parse(urlString);
    try {
      if (!await launchUrl(url, mode: LaunchMode.externalApplication)) {
        throw Exception('Could not launch $url');
      }
    } catch (e) {
      debugPrint('Error launching URL: $e');
    }
  }
}

```

`lib/pages/add_account.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:zilpay/components/counter.dart';
import 'package:zilpay/components/smart_input.dart';
import 'dart:async';
import 'package:zilpay/components/custom_app_bar.dart';
import 'package:zilpay/mixins/wallet_type.dart';
import 'package:zilpay/services/auth_guard.dart';
import 'package:zilpay/services/biometric_service.dart';
import 'package:zilpay/services/device.dart';
import 'package:zilpay/src/rust/api/token.dart';
import 'package:zilpay/src/rust/api/wallet.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/l10n/app_localizations.dart';

class AddAccount extends StatefulWidget {
  const AddAccount({super.key});

  @override
  State<AddAccount> createState() => _AddAccountState();
}

class _AddAccountState extends State<AddAccount> {
  final TextEditingController _accountNameController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  final _passwordInputKey = GlobalKey<SmartInputState>();
  final _accountNameInputKey = GlobalKey<SmartInputState>();
  final AuthService _authService = AuthService();

  bool _isCreating = false;
  bool _zilliqaLegacy = false;
  String? _errorMessage;
  int _bip39Index = 0;
  bool _obscurePassword = true;
  bool _useBiometrics = false;
  bool _initialized = false;

  late AuthGuard _authGuard;

  @override
  void initState() {
    super.initState();
    _authGuard = Provider.of<AuthGuard>(context, listen: false);
    AppState appState = Provider.of<AppState>(context, listen: false);
    _bip39Index = appState.wallet!.accounts.length;
    _checkBiometricAvailability(appState);

    if (appState.account?.addrType == 0) {
      _zilliqaLegacy = true;
    }
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();

    if (!_initialized) {
      AppState appState = Provider.of<AppState>(context, listen: false);
      _setAutoAccountName(appState);
      _initialized = true;
    }
  }

  void _checkBiometricAvailability(AppState appState) {
    if (appState.wallet != null) {
      final authType = appState.wallet!.authType;
      setState(() {
        _useBiometrics = authType == AuthMethod.faceId.name ||
            authType == AuthMethod.fingerprint.name ||
            authType == AuthMethod.biometric.name ||
            authType == AuthMethod.pinCode.name;
      });
    }
  }

  @override
  void dispose() {
    _accountNameController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  void _setAutoAccountName(AppState appState) {
    _accountNameController.text = AppLocalizations.of(
      context,
    )!
        .addAccountPageDefaultName(_bip39Index);
  }

  bool _exists(AppState appState) {
    return appState.wallet?.accounts.any(
          (account) => account.index.toInt() == _bip39Index,
        ) ??
        false;
  }

  bool _isZIL(AppState appState) {
    if (appState.wallet == null) {
      return false;
    }

    final defaultChain = appState.getChain(appState.wallet!.defaultChainHash);

    if (defaultChain == null) {
      return false;
    }

    return appState.chain?.slip44 == 313 &&
        appState.wallet != null &&
        defaultChain.slip44 == appState.chain?.slip44;
  }

  Future<bool> _authenticateWithBiometrics() async {
    try {
      return await _authService.authenticate(
        allowPinCode: true,
        reason: AppLocalizations.of(context)!.addAccountPageBiometricReason,
      );
    } catch (e) {
      debugPrint('Biometric authentication error: $e');
      setState(() {
        _errorMessage =
            AppLocalizations.of(context)!.addAccountPageBiometricError(e);
      });
      return false;
    }
  }

  Future<void> _createAccount(AppState appState) async {
    final l10n = AppLocalizations.of(context)!;
    BigInt walletIndex = BigInt.from(appState.selectedWallet);

    if (_exists(appState)) {
      setState(() {
        _errorMessage = l10n.addAccountPageIndexExists(_bip39Index);
      });
      return;
    }

    if (_accountNameController.text.isEmpty) {
      _accountNameInputKey.currentState?.shake();
      return;
    }

    if (_passwordController.text.isEmpty &&
        appState.wallet!.authType == AuthMethod.none.name &&
        !_useBiometrics) {
      _passwordInputKey.currentState?.shake();
      return;
    }

    setState(() {
      _isCreating = true;
      _errorMessage = null;
    });

    String? session;

    if (_useBiometrics && _passwordController.text.isEmpty) {
      bool authenticated = await _authenticateWithBiometrics();
      if (!authenticated) {
        setState(() {
          _isCreating = false;
          _errorMessage = l10n.addAccountPageBiometricFailed;
        });
        return;
      }
    }

    try {
      session = await _authGuard.getSession(
          sessionKey: appState.wallet!.walletAddress);
    } catch (e) {
      debugPrint("getting session error: $e");
    }

    try {
      DeviceInfoService device = DeviceInfoService();
      List<String> identifiers = await device.getDeviceIdentifiers();

      if (appState.wallet!.walletType.contains(WalletType.SecretPhrase.name)) {
        AddNextBip39AccountParams params = AddNextBip39AccountParams(
          walletIndex: walletIndex,
          accountIndex: BigInt.from(_bip39Index),
          name: _accountNameController.text,
          passphrase: "",
          identifiers: identifiers,
          password: _passwordController.text.isEmpty
              ? null
              : _passwordController.text,
          sessionCipher: session,
        );

        await addNextBip39Account(
          params: params,
        );
      }

      await appState.syncData();

      if (_zilliqaLegacy && _isZIL(appState) && appState.wallet != null) {
        await zilliqaSwapChain(
          walletIndex: walletIndex,
          accountIndex: BigInt.from(appState.wallet!.accounts.length - 1),
        );
      }

      try {
        await syncBalances(walletIndex: BigInt.from(appState.selectedWallet));
      } catch (_) {}

      await appState.syncData();

      if (mounted) {
        Navigator.pop(context);
      }
    } catch (e) {
      setState(() {
        _errorMessage = l10n.addAccountPageCreateFailed(e);
        _isCreating = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);
    final keyboardHeight = MediaQuery.of(context).viewInsets.bottom;
    final l10n = AppLocalizations.of(context)!;

    return Scaffold(
      backgroundColor: theme.background,
      body: SafeArea(
        child: Column(
          children: [
            Padding(
              padding: EdgeInsets.symmetric(horizontal: adaptivePadding),
              child: CustomAppBar(
                title: l10n.addAccountPageTitle,
                onBackPressed: () => Navigator.pop(context),
                actionIcon: _isCreating
                    ? SizedBox(
                        width: 24,
                        height: 24,
                        child: CircularProgressIndicator(
                          strokeWidth: 2,
                          valueColor: AlwaysStoppedAnimation<Color>(
                            theme.textPrimary,
                          ),
                        ),
                      )
                    : SvgPicture.asset(
                        'assets/icons/plus.svg',
                        width: 24,
                        height: 24,
                        colorFilter: ColorFilter.mode(
                          theme.textPrimary,
                          BlendMode.srcIn,
                        ),
                      ),
                onActionPressed: () => _createAccount(appState),
              ),
            ),
            Expanded(
              child: SingleChildScrollView(
                physics: const BouncingScrollPhysics(),
                child: Padding(
                  padding: EdgeInsets.only(
                    left: adaptivePadding,
                    right: adaptivePadding,
                    top: adaptivePadding,
                    bottom: keyboardHeight + adaptivePadding,
                  ),
                  child: ConstrainedBox(
                    constraints: const BoxConstraints(maxWidth: 480),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.stretch,
                      children: [
                        Text(
                          l10n.addAccountPageSubtitle,
                          style: TextStyle(
                            color: theme.textPrimary,
                            fontSize: 24,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        SizedBox(height: adaptivePadding),
                        SmartInput(
                          key: _accountNameInputKey,
                          controller: _accountNameController,
                          hint: l10n.addAccountPageNameHint,
                          fontSize: 18,
                          height: 56,
                          disabled: _isCreating,
                          padding: const EdgeInsets.symmetric(horizontal: 20),
                          focusedBorderColor: theme.primaryPurple,
                        ),
                        SizedBox(height: adaptivePadding),
                        Container(
                          padding: EdgeInsets.all(16),
                          decoration: BoxDecoration(
                            color: theme.cardBackground,
                            borderRadius: BorderRadius.circular(16),
                            border: Border.all(color: theme.secondaryPurple),
                          ),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                l10n.addAccountPageBip39Index,
                                style: TextStyle(
                                  color: theme.textPrimary,
                                  fontSize: 16,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                              SizedBox(height: 8),
                              Counter(
                                initialValue: _bip39Index,
                                minValue: 0,
                                maxValue: 2147483647,
                                disabled: _isCreating,
                                iconColor: theme.primaryPurple,
                                numberStyle: TextStyle(
                                  color: theme.textPrimary,
                                  fontSize: 16,
                                  fontWeight: FontWeight.w500,
                                ),
                                onChanged: (value) {
                                  setState(() {
                                    _bip39Index = value;
                                  });
                                  _setAutoAccountName(appState);
                                },
                              ),
                            ],
                          ),
                        ),
                        if (_useBiometrics) ...[
                          SizedBox(height: adaptivePadding),
                          Container(
                            padding: const EdgeInsets.symmetric(
                                horizontal: 16, vertical: 12),
                            decoration: BoxDecoration(
                              color: theme.cardBackground,
                              borderRadius: BorderRadius.circular(16),
                              border: Border.all(color: theme.secondaryPurple),
                            ),
                            child: Row(
                              children: [
                                SvgPicture.asset(
                                  'assets/icons/biometric.svg',
                                  width: 24,
                                  height: 24,
                                  colorFilter: ColorFilter.mode(
                                    theme.textPrimary,
                                    BlendMode.srcIn,
                                  ),
                                ),
                                const SizedBox(width: 12),
                                Expanded(
                                  child: Text(
                                    l10n.addAccountPageUseBiometrics,
                                    style: TextStyle(
                                      color: theme.textPrimary,
                                      fontSize: 16,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ],
                        if (appState.wallet!.authType ==
                            AuthMethod.none.name) ...[
                          SizedBox(height: adaptivePadding),
                          SmartInput(
                            key: _passwordInputKey,
                            controller: _passwordController,
                            hint: l10n.addAccountPagePasswordHint,
                            fontSize: 18,
                            height: 56,
                            disabled: _isCreating,
                            padding: const EdgeInsets.symmetric(horizontal: 20),
                            focusedBorderColor: theme.primaryPurple,
                            obscureText: _obscurePassword,
                            rightIconPath: _obscurePassword
                                ? "assets/icons/close_eye.svg"
                                : "assets/icons/open_eye.svg",
                            onRightIconTap: () {
                              setState(() {
                                _obscurePassword = !_obscurePassword;
                              });
                            },
                          ),
                        ],
                        SizedBox(height: adaptivePadding),
                        if (_isZIL(appState))
                          Container(
                            padding: const EdgeInsets.symmetric(
                                horizontal: 16, vertical: 4),
                            child: Row(
                              children: [
                                SvgPicture.asset(
                                  'assets/icons/scilla.svg',
                                  width: 24,
                                  height: 24,
                                  colorFilter: ColorFilter.mode(
                                    theme.textPrimary,
                                    BlendMode.srcIn,
                                  ),
                                ),
                                const SizedBox(width: 12),
                                Expanded(
                                  child: Text(
                                    l10n.addAccountPageZilliqaLegacy,
                                    style: TextStyle(
                                      color: theme.textPrimary,
                                      fontSize: 16,
                                    ),
                                  ),
                                ),
                                Switch(
                                  value: _zilliqaLegacy,
                                  onChanged: _isCreating
                                      ? null
                                      : (bool value) async {
                                          setState(() {
                                            _zilliqaLegacy = value;
                                          });
                                        },
                                  activeColor: theme.primaryPurple,
                                  activeTrackColor: theme.primaryPurple
                                      .withValues(alpha: 0.5),
                                ),
                              ],
                            ),
                          ),
                        if (_errorMessage != null) ...[
                          SizedBox(height: adaptivePadding),
                          Text(
                            _errorMessage!,
                            style: TextStyle(
                              color: theme.danger,
                              fontSize: 14,
                            ),
                          ),
                        ],
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

```

`lib/pages/add_ledger_account.dart`:

```dart
import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:flutter_svg/svg.dart';
import 'package:ledger_flutter_plus/ledger_flutter_plus.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/counter.dart';
import 'package:zilpay/components/custom_app_bar.dart';
import 'package:zilpay/components/enable_card.dart';
import 'package:zilpay/components/image_cache.dart';
import 'package:zilpay/components/ledger_device_card.dart';
import 'package:zilpay/components/load_button.dart';
import 'package:zilpay/ledger/common.dart';
import 'package:zilpay/ledger/ethereum/ethereum_ledger_application.dart';
import 'package:zilpay/ledger/zilliqa/zilliqa_ledger_application.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/mixins/preprocess_url.dart';
import 'package:zilpay/mixins/wallet_type.dart';
import 'package:zilpay/services/auth_guard.dart';
import 'package:zilpay/services/biometric_service.dart';
import 'package:zilpay/services/device.dart';
import 'package:zilpay/src/rust/api/ledger.dart';
import 'package:zilpay/src/rust/api/provider.dart';
import 'package:zilpay/src/rust/models/ftoken.dart';
import 'package:zilpay/src/rust/models/provider.dart';
import 'package:zilpay/src/rust/models/settings.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/l10n/app_localizations.dart';
import 'package:zilpay/theme/app_theme.dart';

class AddLedgerAccountPage extends StatefulWidget {
  const AddLedgerAccountPage({super.key});

  @override
  State<AddLedgerAccountPage> createState() => _AddLedgerAccountPageState();
}

class _AddLedgerAccountPageState extends State<AddLedgerAccountPage> {
  final _walletNameController = TextEditingController();
  final _btnController = RoundedLoadingButtonController();
  final _createBtnController = RoundedLoadingButtonController();

  int _accountCount = 1;
  bool _loading = false;
  String _errorMessage = '';
  bool _createWallet = true;
  NetworkConfigInfo? _network;
  List<LedgerDevice> _ledgers = [];
  List<LedgerAccount> _accounts = [];
  Map<LedgerAccount, bool> _selectedAccounts = {};
  bool _accountsLoaded = false;
  LedgerDevice? _selectedDevice;
  bool _isScanning = false;
  StreamSubscription<LedgerDevice>? _scanSubscription;
  Timer? _scanTimeout;
  int _scanRetries = 0;
  static const _maxRetries = 2;

  late AuthGuard _authGuard;

  @override
  void initState() {
    super.initState();
    _authGuard = Provider.of<AuthGuard>(context, listen: false);
    _walletNameController.text = "";
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _checkLedgerDevices();
    });
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    final args =
        ModalRoute.of(context)?.settings.arguments as Map<String, dynamic>?;
    if (args == null) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        Navigator.of(context).pop();
      });
      return;
    }

    final network = args['chain'] as NetworkConfigInfo?;
    final ledger = args['ledger'] as LedgerDevice?;
    final createWallet = args['createWallet'] as bool?;

    if (network == null) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        Navigator.of(context).pop();
      });
      return;
    }

    setState(() {
      _network = network;
      if (ledger != null) {
        if (!_ledgers.any((d) => d.id == ledger.id)) {
          _ledgers.add(ledger);
        }
        _selectedDevice = ledger;
        _stopLedgerScan();
      }
      _createWallet = createWallet ?? true;
      _walletNameController.text = _ledgers.isNotEmpty
          ? "${_ledgers.first.name} (${network.name})"
          : "Ledger (${network.name})";

      final appState = context.read<AppState>();
      final isLedgerWallet = appState.selectedWallet != -1 &&
          appState.wallets.isNotEmpty &&
          appState.wallets[appState.selectedWallet].walletType
              .contains(WalletType.ledger.name);

      if (isLedgerWallet && !_createWallet) {
        final existingAccounts = appState.wallet?.accounts ?? [];
        _accounts = existingAccounts
            .map((account) => LedgerAccount(
                  index: account.index.toInt(),
                  address: account.addr,
                  publicKey: account.pubKey,
                ))
            .toList()
          ..sort((a, b) => a.index.compareTo(b.index));
        _selectedAccounts = {for (var account in _accounts) account: true};
        _accountsLoaded = true;
      }
    });
  }

  @override
  void dispose() {
    _walletNameController.dispose();
    _btnController.dispose();
    _createBtnController.dispose();
    _scanSubscription?.cancel();
    _scanTimeout?.cancel();
    super.dispose();
  }

  Future<void> _checkLedgerDevices() async {
    final appState = context.read<AppState>();
    final isLedgerWallet = appState.selectedWallet != -1 &&
        appState.wallets.isNotEmpty &&
        appState.wallets[appState.selectedWallet].walletType
            .contains(WalletType.ledger.name);

    if (_selectedDevice != null) {
      return;
    }

    if (!_createWallet || isLedgerWallet) {
      _startLedgerScan();
    } else if (_ledgers.isNotEmpty) {
      setState(() {
        _selectedDevice = _ledgers.first;
        _stopLedgerScan();
      });
    }
  }

  Future<void> _startLedgerScan() async {
    if (_scanRetries >= _maxRetries) {
      setState(() {
        _isScanning = false;
        _errorMessage = AppLocalizations.of(context)!
            .addLedgerAccountPageFailedToScanError('Max retries reached');
      });
      return;
    }

    setState(() {
      _isScanning = true;
      _scanRetries++;
    });

    final ledgerBle = LedgerInterface.ble(
      onPermissionRequest: (status) async {
        if (status != AvailabilityState.poweredOn) {
          setState(() => _errorMessage = AppLocalizations.of(context)!
              .addLedgerAccountPageBluetoothOffError);
          return false;
        }
        return true;
      },
    );

    _scanSubscription = ledgerBle.scan().listen(
      (device) {
        if (mounted) {
          setState(() {
            if (!_ledgers.any((d) => d.id == device.id)) {
              _ledgers.add(device);
            }
            final appState = context.read<AppState>();
            final deviceId =
                appState.wallet?.walletType.split('.').last.replaceAll('"', '');
            if (deviceId != null &&
                device.id.contains(deviceId) &&
                _selectedDevice == null) {
              _selectedDevice = device;
              _stopLedgerScan();
            }
          });
        }
      },
      onError: (e) {
        if (mounted) {
          setState(() {
            _isScanning = false;
            _errorMessage = AppLocalizations.of(context)!
                .addLedgerAccountPageFailedToScanError(e.toString());
          });
          Future.delayed(const Duration(seconds: 2), () {
            if (mounted && _ledgers.isEmpty && _selectedDevice == null) {
              _startLedgerScan();
            }
          });
        }
      },
    );

    _scanTimeout = Timer(const Duration(seconds: 15), () {
      _stopLedgerScan();
      if (mounted && _ledgers.isEmpty && _selectedDevice == null) {
        setState(() => _errorMessage =
            AppLocalizations.of(context)!.addLedgerAccountPageNoDevicesMessage);
        Future.delayed(const Duration(seconds: 2), () {
          if (mounted && _selectedDevice == null) {
            _startLedgerScan();
          }
        });
      }
    });
  }

  void _stopLedgerScan() {
    _scanSubscription?.cancel();
    _scanTimeout?.cancel();
    setState(() => _isScanning = false);
  }

  Future<void> _onGetAccounts() async {
    final l10n = AppLocalizations.of(context)!;

    if (_walletNameController.text.trim().isEmpty && _createWallet) {
      setState(
          () => _errorMessage = l10n.addLedgerAccountPageEmptyWalletNameError);
      _btnController.reset();
      return;
    }

    if (_walletNameController.text.length > 100 && _createWallet) {
      setState(() =>
          _errorMessage = l10n.addLedgerAccountPageWalletNameTooLongError);
      _btnController.reset();
      return;
    }

    setState(() {
      _loading = true;
      _errorMessage = '';
    });
    _btnController.start();

    try {
      if (_network == null || _selectedDevice == null) {
        throw Exception(l10n.addLedgerAccountPageNetworkOrLedgerMissingError);
      }

      final ledgerInterface = LedgerInterface.ble(
        onPermissionRequest: (_) async => true,
      );

      final connection = await ledgerInterface.connect(_selectedDevice!);
      List<LedgerAccount> newAccounts = [];

      if (_network?.slip44 == 60) {
        final ethereumApp = EthereumLedgerApp(connection, transformer: null);
        newAccounts = await ethereumApp
            .getAccounts(List<int>.generate(_accountCount, (i) => i));
      } else if (_network?.slip44 == 313) {
        final zilliqaApp = ZilliqaLedgerApp(connection, transformer: null);
        newAccounts = await zilliqaApp
            .getPublicAddress(List<int>.generate(_accountCount, (i) => i));
      }

      setState(() {
        final existingPubKeys =
            _accounts.map((acc) => acc.publicKey.toLowerCase()).toSet();
        final uniqueNewAccounts = newAccounts
            .where(
                (acc) => !existingPubKeys.contains(acc.publicKey.toLowerCase()))
            .toList();

        if (_createWallet) {
          _accounts = uniqueNewAccounts
            ..sort((a, b) => a.index.compareTo(b.index));
          _selectedAccounts = {for (var account in _accounts) account: true};
        } else {
          _accounts.addAll(uniqueNewAccounts);
          _accounts.sort((a, b) => a.index.compareTo(b.index));
          for (var acc in uniqueNewAccounts) {
            _selectedAccounts[acc] = true;
          }
        }
        _accountsLoaded = true;
      });

      _btnController.success();
      Future.delayed(const Duration(seconds: 1),
          () => mounted ? _btnController.reset() : null);
    } on LedgerException catch (e) {
      _handleLedgerError(e);
    } catch (e) {
      debugPrint("$e");
      setState(() => _errorMessage = e.toString());
      _btnController.error();
      Future.delayed(const Duration(seconds: 2),
          () => mounted ? _btnController.reset() : null);
    } finally {
      if (mounted && _loading) {
        setState(() => _loading = false);
      }
    }
  }

  void _handleLedgerError(LedgerException e) {
    String displayError = e.toString();
    if (e is ConnectionLostException) {
      displayError = "Connection to Ledger lost. Please reconnect.";
    } else if (e is DeviceNotConnectedException) {
      displayError = "Ledger device is not connected.";
    } else if (e is LedgerDeviceException) {
      displayError = "Ledger Error ${e.errorCode}: ${e.message}";
    }
    setState(() => _errorMessage = displayError);
    _btnController.error();
    Future.delayed(const Duration(seconds: 2),
        () => mounted ? _btnController.reset() : null);
  }

  void _toggleAccount(LedgerAccount account, bool value) {
    if (_loading) return;
    setState(() {
      _selectedAccounts[account] = value;
    });
  }

  Future<void> _saveSelectedAccounts() async {
    setState(() {
      _loading = true;
      _errorMessage = '';
    });
    _createBtnController.start();

    try {
      final appState = Provider.of<AppState>(context, listen: false);
      final l10n = AppLocalizations.of(context)!;
      final BigInt? chainHash;

      List<NetworkConfigInfo> chains = await getProviders();
      final matches = chains
          .where((chain) => chain.chainHash == _network!.chainHash)
          .toList();

      if (matches.isEmpty) {
        chainHash = await addProvider(providerConfig: _network!);
      } else {
        chainHash = matches.first.chainHash;
      }

      WalletSettingsInfo settings = WalletSettingsInfo(
        cipherOrders: Uint8List.fromList([]),
        argonParams: WalletArgonParamsInfo(
          iterations: 0,
          memory: 0,
          threads: 0,
          secret: '',
        ),
        currencyConvert: "BTC",
        ipfsNode: "dweb.link",
        ensEnabled: true,
        tokensListFetcher: true,
        nodeRankingEnabled: true,
        maxConnections: 5,
        requestTimeoutSecs: 30,
        ratesApiOptions: 1,
      );
      final isLegacyZilliq = _network?.slip44 == 313 &&
          _selectedAccounts.entries
              .map((entry) => entry.key)
              .every((a) => a.address.startsWith("zil1"));

      List<FTokenInfo> ftokens = [];

      if (_createWallet) {
        final selectedAccounts = _selectedAccounts.entries
            .where((entry) => entry.value)
            .map((entry) => entry.key)
            .toList();

        if (selectedAccounts.isEmpty) {
          throw Exception(l10n.addLedgerAccountPageNoAccountsSelectedError);
        }

        final pubKeys =
            selectedAccounts.map((a) => (a.index, a.publicKey)).toList();
        final accountNames =
            selectedAccounts.map((a) => "ledger ${a.index + 1}").toList();

        DeviceInfoService device = DeviceInfoService();
        List<String> identifiers = await device.getDeviceIdentifiers();

        final (session, walletAddress) = await addLedgerWallet(
          params: LedgerParamsInput(
            pubKeys: pubKeys,
            walletIndex: BigInt.from(appState.wallets.length),
            walletName: _walletNameController.text,
            ledgerId: _selectedDevice!.id,
            accountNames: accountNames,
            biometricType: AuthMethod.none.name,
            identifiers: identifiers,
            chainHash: chainHash,
            zilliqaLegacy: isLegacyZilliq,
          ),
          walletSettings: settings,
          ftokens: ftokens,
        );

        await appState.syncData();
        int currentWalletIndex = appState.wallets.length - 1;
        await _authGuard.setSession(walletAddress, session);
        await appState.syncData();
        appState.setSelectedWallet(currentWalletIndex);
        await appState.startTrackHistoryWorker();
        _createBtnController.success();
        setState(() {
          _loading = false;
        });

        Future.delayed(const Duration(seconds: 1), () {
          if (mounted) {
            Navigator.of(context).pushNamed("/");
          }
        });
      } else {
        final walletIndex = appState.selectedWallet;
        final wallet = appState.wallet;

        if (wallet == null) {
          throw Exception(l10n.addLedgerAccountPageNoWalletSelectedError);
        }

        final accountsToUpdate = _selectedAccounts.entries
            .where((entry) => entry.value)
            .map((entry) => (
                  entry.key.index,
                  entry.key.publicKey,
                  "ledger ${entry.key.index + 1}"
                ))
            .toList();

        await updateLedgerAccounts(
          walletIndex: BigInt.from(walletIndex),
          accounts: accountsToUpdate,
          zilliqaLegacy: isLegacyZilliq,
        );

        await appState.syncData();
        _createBtnController.success();

        setState(() {
          _loading = false;
        });

        Future.delayed(const Duration(seconds: 1), () {
          if (mounted) {
            Navigator.of(context).pushNamed("/");
          }
        });
      }
    } catch (e) {
      _createBtnController.error();
      setState(() {
        _loading = false;
        _errorMessage = e.toString();
      });
      Future.delayed(const Duration(seconds: 2), () {
        if (mounted) {
          _createBtnController.reset();
        }
      });
    }
  }

  Widget _buildDeviceInfoCard(AppTheme theme, AppLocalizations l10n) {
    if (_selectedDevice == null) return const SizedBox();
    return Container(
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: theme.primaryPurple.withValues(alpha: 0.3),
          width: 1.5,
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          LedgerCard(
            device: _selectedDevice!,
            isConnected: true,
            isConnecting: false,
            onTap: () {},
          ),
          _buildNetworkInfoRow(theme, l10n),
        ],
      ),
    );
  }

  Widget _buildNetworkInfoRow(AppTheme theme, AppLocalizations l10n) {
    final isTestnet = _network!.testnet ?? false;
    return Padding(
      padding: const EdgeInsets.all(12),
      child: Row(
        children: [
          SizedBox(
            width: 32,
            height: 32,
            child: AsyncImage(
              url: viewChain(network: _network!, theme: theme.value),
              fit: BoxFit.contain,
              errorWidget: const Icon(Icons.error),
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Expanded(
                      child: Text(
                        _network!.name,
                        style: TextStyle(
                          color: theme.textPrimary,
                          fontSize: 16,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ),
                    Container(
                      padding: const EdgeInsets.symmetric(
                          horizontal: 8, vertical: 2),
                      decoration: BoxDecoration(
                        color: isTestnet
                            ? theme.warning.withValues(alpha: 0.2)
                            : theme.success.withValues(alpha: 0.2),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Text(
                        isTestnet
                            ? l10n.setupNetworkSettingsPageTestnetLabel
                            : l10n.setupNetworkSettingsPageMainnetLabel,
                        style: TextStyle(
                          color: isTestnet ? theme.warning : theme.success,
                          fontSize: 10,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 2),
                Text(
                  '${l10n.setupNetworkSettingsPageTokenLabel} ${_network!.chain} (Chain ID: ${_network!.chainId})',
                  style: TextStyle(
                    color: theme.textSecondary,
                    fontSize: 12,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildWalletInfoCard(AppTheme theme, AppLocalizations l10n) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: theme.textSecondary.withValues(alpha: 0.3),
          width: 1.5,
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Center(
                child: Counter(
                  iconSize: 24,
                  iconColor: theme.textPrimary,
                  animationDuration: const Duration(milliseconds: 300),
                  numberStyle: TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: theme.textPrimary,
                  ),
                  minValue: 1,
                  initialValue: _accountCount,
                  disabled: _loading,
                  onChanged: !_loading
                      ? (value) {
                          setState(() {
                            _accountCount = value;
                          });
                        }
                      : null,
                ),
              ),
              const SizedBox(height: 16),
              RoundedLoadingButton(
                color: theme.primaryPurple,
                valueColor: theme.buttonText,
                controller: _btnController,
                onPressed: _onGetAccounts,
                child: Text(
                  l10n.addLedgerAccountPageGetAccountsButton,
                  style: TextStyle(
                    color: theme.buttonText,
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildAccountsCard(AppTheme theme) {
    if (!_accountsLoaded || _accounts.isEmpty) return const SizedBox();
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: theme.textSecondary.withValues(alpha: 0.3),
          width: 1.5,
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          ..._accounts.map((account) {
            final shortAddress =
                "${account.address.substring(0, 6)}...${account.address.substring(account.address.length - 4)}";
            return EnableCard(
              title: "Account ${account.index + 1}",
              name: shortAddress,
              iconWidget: SvgPicture.asset(
                'assets/icons/ledger.svg',
                width: 20,
                height: 20,
                colorFilter: ColorFilter.mode(
                  theme.success,
                  BlendMode.srcIn,
                ),
              ),
              isDefault: false,
              isEnabled: _selectedAccounts[account] ?? false,
              onToggle: (value) => _toggleAccount(account, value),
            );
          }).toList(),
        ],
      ),
    );
  }

  Widget _buildErrorMessage(AppTheme theme) {
    if (_errorMessage.isEmpty) return const SizedBox();
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: theme.danger.withValues(alpha: 0.1),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          SvgPicture.asset(
            'assets/icons/warning.svg',
            width: 24,
            height: 24,
            colorFilter: ColorFilter.mode(theme.danger, BlendMode.srcIn),
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              _errorMessage,
              style: TextStyle(
                color: theme.danger,
                fontSize: 14,
                fontWeight: FontWeight.w500,
              ),
              textAlign: TextAlign.center,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildDeviceList(AppTheme theme, AppLocalizations l10n) {
    if (_isScanning) {
      return Column(
        mainAxisAlignment: MainAxisAlignment.start,
        children: [
          Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              children: [
                LinearProgressIndicator(
                  backgroundColor: theme.textSecondary.withValues(alpha: 0.3),
                  valueColor:
                      AlwaysStoppedAnimation<Color>(theme.primaryPurple),
                ),
                const SizedBox(height: 16),
                Text(
                  l10n.addLedgerAccountPageScanningMessage,
                  style: TextStyle(color: theme.textSecondary),
                ),
              ],
            ),
          ),
        ],
      );
    } else if (_ledgers.isEmpty) {
      return Column(
        mainAxisAlignment: MainAxisAlignment.start,
        children: [
          Padding(
            padding: const EdgeInsets.all(16),
            child: Text(
              l10n.addLedgerAccountPageNoDevicesMessage,
              style: TextStyle(color: theme.textSecondary),
            ),
          ),
        ],
      );
    }
    return RefreshIndicator(
      onRefresh: () async {
        _stopLedgerScan();
        setState(() {
          _scanRetries = 0;
          _ledgers.clear();
          _selectedDevice = null;
        });
        await _startLedgerScan();
      },
      color: theme.primaryPurple,
      backgroundColor: theme.cardBackground,
      child: ListView.builder(
        physics: const AlwaysScrollableScrollPhysics(),
        itemCount: _ledgers.length,
        itemBuilder: (context, index) {
          final device = _ledgers[index];
          return Padding(
            padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),
            child: LedgerCard(
              device: device,
              isConnected: device.id == _selectedDevice?.id,
              isConnecting: false,
              onTap: () {
                setState(() {
                  _selectedDevice = device;
                  _stopLedgerScan();
                });
              },
            ),
          );
        },
      ),
    );
  }

  @override
  Widget build(context) {
    final theme = Provider.of<AppState>(context).currentTheme;
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);
    final l10n = AppLocalizations.of(context)!;

    return Scaffold(
      body: SafeArea(
        child: Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 480),
            child: Stack(
              children: [
                Column(
                  children: [
                    CustomAppBar(
                      title: l10n.addLedgerAccountPageAppBarTitle,
                      onBackPressed: () => Navigator.pop(context),
                    ),
                    if (_network == null)
                      Expanded(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.start,
                          children: [
                            Padding(
                              padding: const EdgeInsets.all(16),
                              child: LinearProgressIndicator(
                                backgroundColor:
                                    theme.textSecondary.withValues(alpha: 0.3),
                                valueColor: AlwaysStoppedAnimation<Color>(
                                    theme.primaryPurple),
                              ),
                            ),
                          ],
                        ),
                      )
                    else if (_selectedDevice == null &&
                        (!_createWallet ||
                            (Provider.of<AppState>(context).selectedWallet !=
                                    -1 &&
                                Provider.of<AppState>(context)
                                    .wallets
                                    .isNotEmpty &&
                                Provider.of<AppState>(context)
                                    .wallets[Provider.of<AppState>(context)
                                        .selectedWallet]
                                    .walletType
                                    .contains(WalletType.ledger.name))))
                      Expanded(
                        child: _buildDeviceList(theme, l10n),
                      )
                    else
                      Expanded(
                        child: RefreshIndicator(
                          onRefresh: () async {
                            _stopLedgerScan();
                            setState(() {
                              _scanRetries = 0;
                              _ledgers.clear();
                              _selectedDevice = null;
                            });
                            await _startLedgerScan();
                          },
                          color: theme.primaryPurple,
                          backgroundColor: theme.cardBackground,
                          child: SingleChildScrollView(
                            physics: const AlwaysScrollableScrollPhysics(),
                            child: Padding(
                              padding: EdgeInsets.all(adaptivePadding),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  _buildDeviceInfoCard(theme, l10n),
                                  if (_errorMessage.isNotEmpty) ...[
                                    const SizedBox(height: 16),
                                    _buildErrorMessage(theme),
                                  ],
                                  const SizedBox(height: 16),
                                  _buildWalletInfoCard(theme, l10n),
                                  if (_accountsLoaded &&
                                      _accounts.isNotEmpty) ...[
                                    const SizedBox(height: 16),
                                    _buildAccountsCard(theme),
                                  ],
                                  const SizedBox(height: 80),
                                ],
                              ),
                            ),
                          ),
                        ),
                      ),
                  ],
                ),
                if (_accountsLoaded && _accounts.isNotEmpty && !_isScanning)
                  Positioned(
                    bottom: 0,
                    left: 0,
                    right: 0,
                    child: Container(
                      padding: EdgeInsets.all(adaptivePadding),
                      child: RoundedLoadingButton(
                        controller: _createBtnController,
                        color: theme.primaryPurple,
                        valueColor: theme.buttonText,
                        onPressed: _saveSelectedAccounts,
                        successIcon: "assets/icons/ok.svg",
                        child: Text(
                          _createWallet
                              ? l10n.addLedgerAccountPageCreateButton
                              : l10n.addLedgerAccountPageAddButton,
                          style: TextStyle(
                            color: theme.buttonText,
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ),
                  ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

```

`lib/pages/address_book.dart`:

```dart
import 'package:blockies/blockies.dart';
import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/mixins/addr.dart';
import 'package:zilpay/modals/add_contect.dart';
import 'package:zilpay/src/rust/api/book.dart';
import 'package:zilpay/src/rust/models/book.dart';
import 'package:zilpay/state/app_state.dart';
import '../theme/app_theme.dart';
import '../components/custom_app_bar.dart';
import '../components/switch_setting_item.dart';
import 'package:zilpay/l10n/app_localizations.dart';

class AddressBookPage extends StatefulWidget {
  const AddressBookPage({super.key});

  @override
  State<AddressBookPage> createState() => _AddressBookPageState();
}

class _AddressBookPageState extends State<AddressBookPage> {
  Future<void> _showDeleteConfirmationDialog(BuildContext context,
      AppState state, AddressBookEntryInfo address) async {
    final l10n = AppLocalizations.of(context)!;
    final theme = state.currentTheme;

    return showDialog<void>(
      context: context,
      barrierDismissible: true,
      builder: (BuildContext dialogContext) {
        return AlertDialog(
          backgroundColor: theme.background,
          title: Text(
            l10n.addressBookPageDeleteConfirmationTitle,
            style: TextStyle(color: theme.textPrimary),
          ),
          content: SingleChildScrollView(
            child: ListBody(
              children: <Widget>[
                Text(
                  l10n.addressBookPageDeleteConfirmationMessage(address.name),
                  style: TextStyle(color: theme.textSecondary),
                ),
              ],
            ),
          ),
          actions: <Widget>[
            TextButton(
              child: Text(
                l10n.cancel,
                style: TextStyle(color: theme.textSecondary),
              ),
              onPressed: () {
                Navigator.of(dialogContext).pop();
              },
            ),
            TextButton(
              child: Text(
                l10n.delete,
                style: TextStyle(color: theme.danger),
              ),
              onPressed: () async {
                try {
                  await removeFromAddressBook(addr: address.addr);
                  await state.syncData();
                } catch (_) {
                } finally {}
                Navigator.of(dialogContext).pop();
              },
            ),
          ],
        );
      },
    );
  }

  Future<void> _handleTransactionHistoryChange(bool value) async {
    final stateProvider = Provider.of<AppState>(context, listen: false);
    await stateProvider.setShowAddressesThroughTransactionHistory(value);
  }

  @override
  Widget build(BuildContext context) {
    final state = Provider.of<AppState>(context);
    final theme = state.currentTheme;
    final l10n = AppLocalizations.of(context)!;

    return Scaffold(
      backgroundColor: theme.background,
      body: SafeArea(
        child: Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 480),
            child: Column(
              children: [
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: CustomAppBar(
                    title: l10n.addressBookPageTitle,
                    onBackPressed: () => Navigator.pop(context),
                    actionIcon: SvgPicture.asset(
                      'assets/icons/plus.svg',
                      width: 24,
                      height: 24,
                      colorFilter: ColorFilter.mode(
                        theme.textPrimary,
                        BlendMode.srcIn,
                      ),
                    ),
                    onActionPressed: () => showAddContactModal(
                      context: context,
                      state: state,
                    ),
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: SwitchSettingItem(
                    backgroundColor: theme.cardBackground,
                    iconPath: "assets/icons/history.svg",
                    title: l10n.transactionHistoryTitle,
                    description: l10n.transactionHistoryDescription,
                    value: state.showAddressesThroughTransactionHistory,
                    onChanged: _handleTransactionHistoryChange,
                  ),
                ),
                const SizedBox(height: 16),
                Expanded(
                  child: state.book.isEmpty
                      ? _buildEmptyState(theme, l10n)
                      : _buildAddressList(state, theme, l10n),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildEmptyState(AppTheme theme, AppLocalizations l10n) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 16),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            SvgPicture.asset(
              'assets/icons/book.svg',
              width: 120,
              height: 120,
              colorFilter: ColorFilter.mode(
                theme.textSecondary.withValues(alpha: 0.4),
                BlendMode.srcIn,
              ),
            ),
            const SizedBox(height: 16),
            Text(
              l10n.addressBookPageEmptyMessage,
              textAlign: TextAlign.center,
              style: TextStyle(
                color: theme.textSecondary,
                fontSize: 16,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAddressList(
      AppState state, AppTheme theme, AppLocalizations l10n) {
    return ListView.builder(
      itemCount: state.book.length,
      padding: const EdgeInsets.symmetric(horizontal: 16),
      physics: const BouncingScrollPhysics(),
      itemBuilder: (context, index) {
        final address = state.book[index];
        final isLastItem = index == state.book.length - 1;

        return GestureDetector(
          behavior: HitTestBehavior.opaque,
          onTap: () {
            // print('Tapped on ${address.name}');
          },
          child: Container(
            height: 72,
            decoration: BoxDecoration(
              border: !isLastItem
                  ? Border(
                      bottom: BorderSide(
                        color: theme.textSecondary.withValues(alpha: 0.1),
                        width: 1,
                      ),
                    )
                  : null,
            ),
            child: Row(
              children: [
                ClipRRect(
                  borderRadius: BorderRadius.circular(16),
                  child: SizedBox(
                    width: 40,
                    height: 40,
                    child: Blockies(
                      seed: address.addr.toLowerCase(),
                      size: 8,
                      color: theme.primaryPurple,
                      bgColor: theme.background,
                      spotColor: theme.textSecondary,
                    ),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        address.name,
                        style: TextStyle(
                          color: theme.textPrimary,
                          fontSize: 16,
                          fontWeight: FontWeight.w600,
                        ),
                        overflow: TextOverflow.ellipsis,
                        maxLines: 1,
                      ),
                      const SizedBox(height: 4),
                      Text(
                        shortenAddress(address.addr,
                            leftSize: 12, rightSize: 12),
                        style: TextStyle(
                          color: theme.textSecondary,
                          fontSize: 14,
                        ),
                        overflow: TextOverflow.ellipsis,
                        maxLines: 1,
                      ),
                    ],
                  ),
                ),
                SizedBox(
                  width: 48,
                  height: double.infinity,
                  child: IconButton(
                    padding: EdgeInsets.zero,
                    iconSize: 24,
                    icon: SvgPicture.asset(
                      'assets/icons/close.svg',
                      width: 24,
                      height: 24,
                      colorFilter: ColorFilter.mode(
                        theme.danger,
                        BlendMode.srcIn,
                      ),
                    ),
                    tooltip: l10n.addressBookPageDeleteTooltip(address.name),
                    onPressed: () {
                      _showDeleteConfirmationDialog(context, state, address);
                    },
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }
}

```

`lib/pages/appearance.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/custom_app_bar.dart';
import 'package:zilpay/components/option_list.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/components/switch_setting_item.dart';
import 'package:zilpay/l10n/app_localizations.dart';

class AppearanceSettingsPage extends StatefulWidget {
  const AppearanceSettingsPage({super.key});

  @override
  State<AppearanceSettingsPage> createState() => _AppearanceSettingsPageState();
}

class _AppearanceSettingsPageState extends State<AppearanceSettingsPage> {
  int selectedThemeIndex = 0;
  bool compactNumbers = false;

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    final themeProvider = Provider.of<AppState>(context, listen: false);
    setState(() {
      selectedThemeIndex = themeProvider.state.appearances;
      compactNumbers = themeProvider.state.abbreviatedNumber;
    });
  }

  Future<void> _handleThemeSelection(int index) async {
    final stateProvider = Provider.of<AppState>(context, listen: false);
    await stateProvider.setAppearancesCode(index, compactNumbers);
    setState(() {
      selectedThemeIndex = index;
    });
    await stateProvider.syncData();
  }

  Future<void> _handleCompactNumbersChange(bool value) async {
    final stateProvider = Provider.of<AppState>(context, listen: false);
    await stateProvider.setAppearancesCode(selectedThemeIndex, value);
    setState(() {
      compactNumbers = value;
    });
    await stateProvider.syncData();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<AppState>(context).currentTheme;
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);
    final l10n = AppLocalizations.of(context)!;

    final Color effectiveBgColor = Theme.of(context).scaffoldBackgroundColor;
    final Brightness backgroundBrightness =
        ThemeData.estimateBrightnessForColor(effectiveBgColor);
    final Brightness statusBarIconBrightness =
        backgroundBrightness == Brightness.light
            ? Brightness.dark
            : Brightness.light;
    final Brightness statusBarBrightness = backgroundBrightness;

    final SystemUiOverlayStyle overlayStyle = SystemUiOverlayStyle(
      statusBarColor: Colors.transparent,
      statusBarIconBrightness: statusBarIconBrightness,
      statusBarBrightness: statusBarBrightness,
    );

    return Scaffold(
      extendBody: true,
      appBar: AppBar(
        elevation: 0,
        backgroundColor: Colors.transparent,
        automaticallyImplyLeading: false,
        toolbarHeight: 0,
        systemOverlayStyle: overlayStyle,
      ),
      body: SafeArea(
        child: Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 480),
            child: Column(
              children: [
                CustomAppBar(
                  title: l10n.appearanceSettingsPageTitle,
                  onBackPressed: () => Navigator.pop(context),
                ),
                Expanded(
                  child: SingleChildScrollView(
                    physics: const BouncingScrollPhysics(),
                    child: Padding(
                      padding:
                          EdgeInsets.symmetric(horizontal: adaptivePadding),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          SwitchSettingItem(
                            backgroundColor: theme.cardBackground,
                            iconPath: "assets/icons/pin.svg",
                            title:
                                l10n.appearanceSettingsPageCompactNumbersTitle,
                            description: l10n
                                .appearanceSettingsPageCompactNumbersDescription,
                            value: compactNumbers,
                            onChanged: _handleCompactNumbersChange,
                          ),
                          const SizedBox(height: 24),
                          OptionsList(
                            options: [
                              OptionItem(
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      l10n.appearanceSettingsPageDeviceSettingsTitle,
                                      style: TextStyle(
                                        color: theme.textPrimary,
                                        fontSize: 16,
                                        fontWeight: FontWeight.w600,
                                      ),
                                    ),
                                    const SizedBox(height: 4),
                                    Text(
                                      l10n.appearanceSettingsPageDeviceSettingsSubtitle,
                                      style: TextStyle(
                                        color: theme.primaryPurple,
                                        fontSize: 14,
                                        fontWeight: FontWeight.w500,
                                      ),
                                    ),
                                    const SizedBox(height: 8),
                                    Text(
                                      l10n.appearanceSettingsPageDeviceSettingsDescription,
                                      style: TextStyle(
                                        color: theme.textSecondary,
                                        fontSize: 14,
                                      ),
                                    ),
                                  ],
                                ),
                                isSelected: selectedThemeIndex == 0,
                                onSelect: () => _handleThemeSelection(0),
                              ),
                              OptionItem(
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      l10n.appearanceSettingsPageDarkModeTitle,
                                      style: TextStyle(
                                        color: theme.textPrimary,
                                        fontSize: 16,
                                        fontWeight: FontWeight.w600,
                                      ),
                                    ),
                                    const SizedBox(height: 4),
                                    Text(
                                      l10n.appearanceSettingsPageDarkModeSubtitle,
                                      style: TextStyle(
                                        color: theme.primaryPurple,
                                        fontSize: 14,
                                        fontWeight: FontWeight.w500,
                                      ),
                                    ),
                                    const SizedBox(height: 8),
                                    Text(
                                      l10n.appearanceSettingsPageDarkModeDescription,
                                      style: TextStyle(
                                        color: theme.textSecondary,
                                        fontSize: 14,
                                      ),
                                    ),
                                  ],
                                ),
                                isSelected: selectedThemeIndex == 1,
                                onSelect: () => _handleThemeSelection(1),
                              ),
                              OptionItem(
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      l10n.appearanceSettingsPageLightModeTitle,
                                      style: TextStyle(
                                        color: theme.textPrimary,
                                        fontSize: 16,
                                        fontWeight: FontWeight.w600,
                                      ),
                                    ),
                                    const SizedBox(height: 4),
                                    Text(
                                      l10n.appearanceSettingsPageLightModeSubtitle,
                                      style: TextStyle(
                                        color: theme.primaryPurple,
                                        fontSize: 14,
                                        fontWeight: FontWeight.w500,
                                      ),
                                    ),
                                    const SizedBox(height: 8),
                                    Text(
                                      l10n.appearanceSettingsPageLightModeDescription,
                                      style: TextStyle(
                                        color: theme.textSecondary,
                                        fontSize: 14,
                                      ),
                                    ),
                                  ],
                                ),
                                isSelected: selectedThemeIndex == 2,
                                onSelect: () => _handleThemeSelection(2),
                              ),
                            ],
                            unselectedOpacity: 0.5,
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

```

`lib/pages/browser_page.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/hoverd_svg.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/components/tile_button.dart';
import 'package:zilpay/config/search_engines.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/src/rust/models/connection.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/theme/app_theme.dart';
import 'package:zilpay/components/image_cache.dart';
import 'package:zilpay/pages/web_view.dart';
import 'package:zilpay/l10n/app_localizations.dart';

class BrowserPage extends StatefulWidget {
  const BrowserPage({super.key});

  @override
  State<BrowserPage> createState() => _BrowserPageState();
}

class _BrowserPageState extends State<BrowserPage>
    with SingleTickerProviderStateMixin {
  late TabController _tabController;
  final TextEditingController _searchController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);
    final appState = Provider.of<AppState>(context, listen: false);
    appState.syncConnections();
  }

  @override
  void dispose() {
    _tabController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  void _handleSearch(String value) {
    if (value.isEmpty) return;

    final appState = Provider.of<AppState>(context, listen: false);
    final browserSettings = appState.state.browserSettings;
    final searchEngineIndex = browserSettings.searchEngineIndex;
    final searchEngine = baseSearchEngines[searchEngineIndex];

    String query = value.trim();
    String url;

    final uri = Uri.tryParse(query);
    if (uri != null) {
      if (uri.hasScheme && uri.hasAuthority) {
        url = query;
      } else if (uri.hasAuthority && uri.port != 0) {
        url = 'http://$query';
      } else if (isDomainName(query)) {
        url = 'https://$query';
      } else {
        url = '${searchEngine.url}${Uri.encodeQueryComponent(query)}';
      }
    } else {
      if (isDomainName(query)) {
        url = 'https://$query';
      } else {
        url = '${searchEngine.url}${Uri.encodeQueryComponent(query)}';
      }
    }

    _openWebView(url);
  }

  void _openWebView(String url) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => WebViewPage(
          initialUrl: url,
        ),
      ),
    );
  }

  bool isDomainName(String input) {
    final domainPart = input.split(':')[0];
    final domainRegex = RegExp(
        r'^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}$');
    return domainRegex.hasMatch(domainPart);
  }

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;
    final padding = EdgeInsets.symmetric(
        horizontal: AdaptiveSize.getAdaptivePadding(context, 16));
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);
    final connections = appState.connections;
    final l10n = AppLocalizations.of(context)!;

    return SafeArea(
      child: Center(
        child: ConstrainedBox(
          constraints: const BoxConstraints(maxWidth: 480),
          child: Scaffold(
            backgroundColor: theme.background,
            body: Column(
              children: [
                TabBar(
                  controller: _tabController,
                  tabs: [
                    Tab(text: l10n.browserPageConnectedTab),
                    Tab(text: l10n.browserPageExploreTab),
                  ],
                  labelStyle: TextStyle(
                      color: theme.textPrimary,
                      fontSize: 18,
                      fontWeight: FontWeight.w600),
                  unselectedLabelStyle: TextStyle(
                      color: theme.textSecondary,
                      fontSize: 18,
                      fontWeight: FontWeight.w600),
                  indicatorColor: theme.primaryPurple,
                  labelColor: theme.textPrimary,
                  unselectedLabelColor: theme.textSecondary,
                  indicatorSize: TabBarIndicatorSize.label,
                  splashFactory: NoSplash.splashFactory,
                  dividerColor: Colors.transparent,
                ),
                Expanded(
                  child: TabBarView(
                    controller: _tabController,
                    children: [
                      _buildConnectedTab(connections, theme, padding),
                      Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Text(l10n.browserPageNoExploreApps,
                                style: TextStyle(
                                    color: theme.textSecondary,
                                    fontSize: 16,
                                    fontWeight: FontWeight.w500)),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
                Padding(
                  padding: EdgeInsets.symmetric(horizontal: adaptivePadding),
                  child: _buildSearchBar(theme),
                ),
                const SizedBox(height: 4),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildSearchBar(AppTheme theme) {
    final appState = Provider.of<AppState>(context);
    final searchEngineIndex = appState.state.browserSettings.searchEngineIndex;
    final searchEngine = baseSearchEngines[searchEngineIndex];
    final l10n = AppLocalizations.of(context)!;

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        SmartInput(
          controller: _searchController,
          hint: l10n.browserPageSearchHint(searchEngine.name),
          leftIconPath: 'assets/icons/search.svg',
          rightIconPath: "assets/icons/close.svg",
          onChanged: (value) {},
          onSubmitted: _handleSearch,
          onRightIconTap: () {
            _searchController.text = "";
          },
          borderColor: theme.textPrimary,
          focusedBorderColor: theme.primaryPurple,
          height: 48,
          fontSize: 16,
          padding: const EdgeInsets.symmetric(horizontal: 16),
          autofocus: false,
          keyboardType: TextInputType.url,
        ),
      ],
    );
  }

  Widget _buildConnectedTab(
      List<ConnectionInfo> connections, AppTheme theme, EdgeInsets padding) {
    final l10n = AppLocalizations.of(context)!;

    if (connections.isEmpty) {
      return Center(
        child: Text(
          l10n.browserPageNoConnectedApps,
          style: TextStyle(
              color: theme.textSecondary,
              fontSize: 16,
              fontWeight: FontWeight.w500),
        ),
      );
    }

    return GridView.builder(
      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 3,
        mainAxisSpacing: 16,
        crossAxisSpacing: 16,
        childAspectRatio: 0.9,
      ),
      padding: padding.copyWith(top: 32, bottom: 16),
      itemCount: connections.length,
      itemBuilder: (context, index) {
        final connection = connections[index];
        final url = 'https://${connection.domain}';
        return _buildConnectedTile(
          connection.title,
          connection.favicon ?? 'https://${connection.domain}/favicon.ico',
          url,
          theme,
        );
      },
    );
  }

  Widget _buildConnectedTile(
      String label, String iconUrl, String url, AppTheme theme) {
    return TileButton(
      title: label,
      icon: AsyncImage(
        url: iconUrl,
        width: 24,
        height: 24,
        fit: BoxFit.contain,
        errorWidget: HoverSvgIcon(
          assetName: 'assets/icons/default.svg',
          width: 24,
          height: 24,
          onTap: () {},
          color: theme.textPrimary,
        ),
      ),
      onPressed: () => _openWebView(url),
      backgroundColor: theme.cardBackground,
      textColor: theme.primaryPurple,
    );
  }
}

```

`lib/pages/browser_settings.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_inappwebview/flutter_inappwebview.dart';
import 'package:provider/provider.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:zilpay/components/button_item.dart';
import 'package:zilpay/components/custom_app_bar.dart';
import 'package:zilpay/components/switch_setting_item.dart';
import 'package:zilpay/config/search_engines.dart';
import 'package:zilpay/l10n/app_localizations.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/modals/list_selector.dart';
import 'package:zilpay/src/rust/api/settings.dart';
import 'package:zilpay/src/rust/models/settings.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/theme/app_theme.dart';

class BrowserSettingsPage extends StatefulWidget {
  const BrowserSettingsPage({super.key});

  @override
  State<BrowserSettingsPage> createState() => _BrowserSettingsPageState();
}

class _BrowserSettingsPageState extends State<BrowserSettingsPage> {
  final List<ListItem> searchEngines = baseSearchEngines
      .map((s) => ListItem(title: s.name, subtitle: s.description))
      .toList();

  final List<ListItem> contentBlockingOptions = [
    ListItem(title: 'Off', subtitle: 'No content blocking'),
    ListItem(title: 'Moderate', subtitle: 'Blocks some trackers and ads'),
    ListItem(title: 'Strict', subtitle: 'Blocks most trackers and ads'),
  ];

  // Track which clear operations are currently loading
  final Set<String> _loading = {};

  @override
  void initState() {
    super.initState();
  }

  @override
  void dispose() {
    super.dispose();
  }

  // Helper method to set loading state
  void _setLoading(String operation, bool isLoading) {
    setState(() {
      if (isLoading) {
        _loading.add(operation);
      } else {
        _loading.remove(operation);
      }
    });
  }

  Future<void> _toggleCache(AppState appState, bool enabled) async {
    try {
      BrowserSettingsInfo newSettings =
          appState.state.browserSettings.copyWith(cacheEnabled: enabled);
      await setBrowserSettings(browserSettings: newSettings);
      await appState.syncData();
    } catch (e) {
      debugPrint("Error toggling cache: $e");
    }
  }

  Future<void> _toggleCookies(AppState appState, bool enabled) async {
    try {
      BrowserSettingsInfo newSettings =
          appState.state.browserSettings.copyWith(cookiesEnabled: enabled);
      await setBrowserSettings(browserSettings: newSettings);
      await appState.syncData();
    } catch (e) {
      debugPrint("Error toggling cookies: $e");
    }
  }

  Future<void> _toggleDoNotTrack(AppState appState, bool enabled) async {
    try {
      BrowserSettingsInfo newSettings =
          appState.state.browserSettings.copyWith(doNotTrack: enabled);
      await setBrowserSettings(browserSettings: newSettings);
      await appState.syncData();
    } catch (e) {
      debugPrint("Error toggling do not track: $e");
    }
  }

  Future<void> _toggleIncognitoMode(AppState appState, bool enabled) async {
    try {
      BrowserSettingsInfo newSettings =
          appState.state.browserSettings.copyWith(incognitoMode: enabled);
      await setBrowserSettings(browserSettings: newSettings);
      await appState.syncData();
    } catch (e) {
      debugPrint("Error toggling incognito mode: $e");
    }
  }

  Future<void> _clearCookies(AppState appState) async {
    final String operation = 'cookies';
    try {
      _setLoading(operation, true);
      await CookieManager.instance().deleteAllCookies();
      await CookieManager.instance().removeSessionCookies();
      await appState.syncData();
    } catch (e) {
      debugPrint("Error clearing cookies: $e");
    } finally {
      _setLoading(operation, false);
    }
  }

  Future<void> _clearCache(AppState appState) async {
    final String operation = 'cache';
    try {
      _setLoading(operation, true);
      await InAppWebViewController.clearAllCache();
      await appState.syncData();
    } catch (e) {
      debugPrint("Error clearing cache: $e");
    } finally {
      _setLoading(operation, false);
    }
  }

  Future<void> _clearLocalStorage(AppState appState) async {
    final String operation = 'localStorage';
    try {
      _setLoading(operation, true);
      final headlessWebView = HeadlessInAppWebView(
        initialUrlRequest: URLRequest(url: WebUri("about:blank")),
        onLoadStop: (controller, url) async {
          try {
            await controller.evaluateJavascript(
                source: "localStorage.clear();");
            await controller.evaluateJavascript(
                source: "sessionStorage.clear();");
            await controller.evaluateJavascript(source: """
            if (window.indexedDB) {
              window.indexedDB.deleteDatabase('all');
            }
          """);

            await controller.clearHistory();
          } catch (e) {
            debugPrint("Error in JavaScript execution: $e");
          }
        },
      );

      await headlessWebView.run();
      await Future<void>.delayed(const Duration(milliseconds: 800));
      await appState.syncData();
    } catch (e) {
      debugPrint("Error clearing localStorage: $e");
    } finally {
      _setLoading(operation, false);
    }
  }

  void _showSearchEngineModal(AppState appState) {
    showListSelectorModal(
      context: context,
      title: AppLocalizations.of(context)!.browserSettingsSearchEngineTitle,
      items: searchEngines,
      selectedIndex: appState.state.browserSettings.searchEngineIndex,
      onItemSelected: (index) async {
        final appState = Provider.of<AppState>(context, listen: false);
        try {
          BrowserSettingsInfo newSettings =
              appState.state.browserSettings.copyWith(searchEngineIndex: index);
          await setBrowserSettings(browserSettings: newSettings);
          await appState.syncData();
        } catch (e) {
          debugPrint("Error setting search engine: $e");
        }
      },
    );
  }

  void _showContentBlockingModal(AppState appState) {
    showListSelectorModal(
      context: context,
      title: AppLocalizations.of(context)!.browserSettingsContentBlockingTitle,
      items: contentBlockingOptions,
      selectedIndex: appState.state.browserSettings.contentBlocking,
      onItemSelected: (index) async {
        final appState = Provider.of<AppState>(context, listen: false);
        try {
          BrowserSettingsInfo newSettings =
              appState.state.browserSettings.copyWith(contentBlocking: index);
          await setBrowserSettings(browserSettings: newSettings);
          await appState.syncData();
        } catch (e) {
          debugPrint("Error setting content blocking: $e");
        }
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);

    return Scaffold(
      body: SafeArea(
        child: Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 480),
            child: Column(
              children: [
                Padding(
                  padding: EdgeInsets.symmetric(horizontal: adaptivePadding),
                  child: CustomAppBar(
                    title: AppLocalizations.of(context)!.browserSettingsTitle,
                    onBackPressed: () => Navigator.pop(context),
                  ),
                ),
                Expanded(
                  child: SingleChildScrollView(
                    physics: const BouncingScrollPhysics(),
                    child: Padding(
                      padding:
                          EdgeInsets.symmetric(horizontal: adaptivePadding),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          _buildButtonSection(theme, appState),
                          const SizedBox(height: 24),
                          _buildPrivacySection(theme, appState),
                          const SizedBox(height: 24),
                          _buildPerformanceSection(theme, appState),
                          const SizedBox(height: 24),
                          _buildClearDataSection(theme, appState),
                          const SizedBox(height: 24),
                        ],
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildButtonSection(AppTheme theme, AppState appState) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.only(left: 16, bottom: 16),
          child: Text(
            AppLocalizations.of(context)!.browserSettingsBrowserOptions,
            style: TextStyle(
              color: theme.textSecondary,
              fontSize: 16,
            ),
          ),
        ),
        Container(
          decoration: BoxDecoration(
            color: theme.cardBackground,
            borderRadius: BorderRadius.circular(16),
          ),
          child: Column(
            children: [
              ButtonItem(
                theme: theme,
                title:
                    AppLocalizations.of(context)!.browserSettingsSearchEngine,
                iconPath: 'assets/icons/search.svg',
                description: AppLocalizations.of(context)!
                    .browserSettingsSearchEngineDescription,
                onTap: () => _showSearchEngineModal(appState),
                subtitleText: searchEngines[
                        appState.state.browserSettings.searchEngineIndex]
                    .title,
              ),
              Divider(
                  height: 1, color: theme.textSecondary.withValues(alpha: 0.1)),
              ButtonItem(
                theme: theme,
                title: AppLocalizations.of(context)!
                    .browserSettingsContentBlocking,
                iconPath: 'assets/icons/shield.svg',
                description: AppLocalizations.of(context)!
                    .browserSettingsContentBlockingDescription,
                onTap: () => _showContentBlockingModal(appState),
                subtitleText: contentBlockingOptions[
                        appState.state.browserSettings.contentBlocking]
                    .title,
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildPrivacySection(AppTheme theme, AppState appState) {
    final settings = appState.state.browserSettings;

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.only(left: 16, bottom: 16),
          child: Text(
            AppLocalizations.of(context)!.browserSettingsPrivacySecurity,
            style: TextStyle(
              color: theme.textSecondary,
              fontSize: 16,
            ),
          ),
        ),
        Container(
          decoration: BoxDecoration(
            color: theme.cardBackground,
            borderRadius: BorderRadius.circular(16),
          ),
          child: Column(
            children: [
              SwitchSettingItem(
                title: AppLocalizations.of(context)!.browserSettingsCookies,
                iconPath: 'assets/icons/cookie.svg',
                description: AppLocalizations.of(context)!
                    .browserSettingsCookiesDescription,
                value: settings.cookiesEnabled,
                onChanged: (value) => _toggleCookies(appState, value),
              ),
              Divider(
                  height: 1, color: theme.textSecondary.withValues(alpha: 0.1)),
              SwitchSettingItem(
                title: AppLocalizations.of(context)!.browserSettingsDoNotTrack,
                iconPath: 'assets/icons/shield.svg',
                description: AppLocalizations.of(context)!
                    .browserSettingsDoNotTrackDescription,
                value: settings.doNotTrack,
                onChanged: (value) => _toggleDoNotTrack(appState, value),
              ),
              Divider(
                  height: 1, color: theme.textSecondary.withValues(alpha: 0.1)),
              SwitchSettingItem(
                title:
                    AppLocalizations.of(context)!.browserSettingsIncognitoMode,
                iconPath: 'assets/icons/incognito.svg',
                description: AppLocalizations.of(context)!
                    .browserSettingsIncognitoModeDescription,
                value: settings.incognitoMode,
                onChanged: (value) => _toggleIncognitoMode(appState, value),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildPerformanceSection(AppTheme theme, AppState appState) {
    final settings = appState.state.browserSettings;

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.only(left: 16, bottom: 16),
          child: Text(
            AppLocalizations.of(context)!.browserSettingsPerformance,
            style: TextStyle(
              color: theme.textSecondary,
              fontSize: 16,
            ),
          ),
        ),
        Container(
          decoration: BoxDecoration(
            color: theme.cardBackground,
            borderRadius: BorderRadius.circular(16),
          ),
          child: Column(
            children: [
              SwitchSettingItem(
                title: AppLocalizations.of(context)!.browserSettingsCache,
                iconPath: 'assets/icons/cache.svg',
                description: AppLocalizations.of(context)!
                    .browserSettingsCacheDescription,
                value: settings.cacheEnabled,
                onChanged: (value) => _toggleCache(appState, value),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildClearDataSection(AppTheme theme, AppState appState) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.only(left: 16, bottom: 16),
          child: Text(
            AppLocalizations.of(context)!.browserSettingsClearData,
            style: TextStyle(
              color: theme.textSecondary,
              fontSize: 16,
            ),
          ),
        ),
        Container(
          decoration: BoxDecoration(
            color: theme.cardBackground,
            borderRadius: BorderRadius.circular(16),
          ),
          child: Column(
            children: [
              _buildClearDataItem(
                theme,
                AppLocalizations.of(context)!.browserSettingsClearCookies,
                'assets/icons/cookie.svg',
                AppLocalizations.of(context)!
                    .browserSettingsClearCookiesDescription,
                () => _clearCookies(appState),
                _loading.contains('cookies'),
              ),
              Divider(
                  height: 1, color: theme.textSecondary.withValues(alpha: 0.1)),
              _buildClearDataItem(
                theme,
                AppLocalizations.of(context)!.browserSettingsClearCache,
                'assets/icons/cache.svg',
                AppLocalizations.of(context)!
                    .browserSettingsClearCacheDescription,
                () => _clearCache(appState),
                _loading.contains('cache'),
              ),
              Divider(
                  height: 1, color: theme.textSecondary.withValues(alpha: 0.1)),
              _buildClearDataItem(
                theme,
                AppLocalizations.of(context)!.browserSettingsClearLocalStorage,
                'assets/icons/data.svg',
                AppLocalizations.of(context)!
                    .browserSettingsClearLocalStorageDescription,
                () => _clearLocalStorage(appState),
                _loading.contains('localStorage'),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildClearDataItem(
    AppTheme theme,
    String title,
    String iconPath,
    String description,
    VoidCallback onTap,
    bool isLoading,
  ) {
    return Padding(
      padding: const EdgeInsets.all(16),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SvgPicture.asset(
            iconPath,
            width: 24,
            height: 24,
            colorFilter: ColorFilter.mode(
              theme.textPrimary,
              BlendMode.srcIn,
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: TextStyle(
                    color: theme.textPrimary,
                    fontSize: 16,
                    fontWeight: FontWeight.w500,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  description,
                  style: TextStyle(
                    color: theme.textSecondary,
                    fontSize: 14,
                  ),
                ),
              ],
            ),
          ),
          const SizedBox(width: 8),
          TextButton(
            onPressed: isLoading ? null : onTap,
            style: TextButton.styleFrom(
              foregroundColor: theme.primaryPurple,
              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
            ),
            child: isLoading
                ? SizedBox(
                    width: 16,
                    height: 16,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      valueColor:
                          AlwaysStoppedAnimation<Color>(theme.primaryPurple),
                    ),
                  )
                : Text(AppLocalizations.of(context)!.browserSettingsClear),
          ),
        ],
      ),
    );
  }
}

```

`lib/pages/currency_conversion.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/button_item.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/l10n/app_localizations.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/src/rust/api/settings.dart';
import 'package:zilpay/src/rust/api/utils.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/modals/list_selector.dart';
import '../theme/app_theme.dart';
import '../components/custom_app_bar.dart';

class CurrencyConversionPage extends StatefulWidget {
  const CurrencyConversionPage({super.key});

  @override
  State<CurrencyConversionPage> createState() => _CurrencyConversionPageState();
}

class _CurrencyConversionPageState extends State<CurrencyConversionPage> {
  late List<Currency> _currencies = [];
  late List<Currency> _filteredCurrencies = [];
  final TextEditingController _searchController = TextEditingController();
  String selectedCurrency = 'btc';
  int selectedEngine = 0;

  @override
  void initState() {
    super.initState();

    WidgetsBinding.instance.addPostFrameCallback((_) async {
      final state = Provider.of<AppState>(context, listen: false);
      final currenciesTickets = await getCurrenciesTickets();

      final currenciesList = currenciesTickets
          .map((pair) =>
              Currency(pair.$1, "${_getCurrencyName(pair.$1)} ${pair.$2}"))
          .toList();

      setState(() {
        _currencies = currenciesList;
        _filteredCurrencies = currenciesList;
      });

      if (state.wallet?.settings.currencyConvert != null) {
        setState(() {
          selectedCurrency = state.wallet!.settings.currencyConvert;
        });
      }

      setState(() {
        selectedEngine = state.wallet?.settings.ratesApiOptions ?? 0;
      });
    });
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  void _filterCurrencies(String query) {
    setState(() {
      if (query.isEmpty) {
        _filteredCurrencies = _currencies;
      } else {
        _filteredCurrencies = _currencies.where((currency) {
          return currency.name.toLowerCase().contains(query.toLowerCase()) ||
              currency.code.toLowerCase().contains(query.toLowerCase());
        }).toList();
      }
    });
  }

  String _getCurrencyName(String symbol) {
    final Map<String, String> currencyNames = {
      "BTC": "Bitcoin",
      "BRL": "Brazilian Real",
      "RUB": "Russian Ruble",
      "INR": "Indian Rupee",
      "CNY": "Chinese Yuan",
      "ZAR": "South African Rand",
      "EGP": "Egyptian Pound",
      "ETB": "Ethiopian Birr",
      "IRR": "Iranian Rial",
      "SAR": "Saudi Riyal",
      "AED": "United Arab Emirates Dirham",
      "USD": "United States Dollar",
      "EUR": "Euro",
      "JPY": "Japanese Yen",
      "GBP": "British Pound",
      "KRW": "South Korean Won",
      "CHF": "Swiss Franc",
      "AUD": "Australian Dollar",
      "CAD": "Canadian Dollar",
      "MXN": "Mexican Peso",
      "ETH": "Ethereum",
      "LTC": "Litecoin",
      "XRP": "Ripple",
      "BCH": "Bitcoin Cash",
      "ADA": "Cardano",
      "DOT": "Polkadot",
      "SOL": "Solana",
      "USDT": "Tether",
      "DOGE": "Dogecoin",
      "GOLD": "Gold",
      "SILVER": "Silver"
    };

    return currencyNames[symbol] ?? symbol;
  }

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;
    final bool isRateFetchEnabled =
        appState.wallet!.settings.ratesApiOptions != 0;
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);

    return Scaffold(
      backgroundColor: theme.background,
      body: SafeArea(
        child: Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 480),
            child: Column(
              children: [
                CustomAppBar(
                  title: AppLocalizations.of(context)!.currencyConversionTitle,
                  onBackPressed: () => Navigator.pop(context),
                ),
                Expanded(
                  child: Padding(
                    padding: EdgeInsets.symmetric(horizontal: adaptivePadding),
                    child: Column(
                      children: [
                        _buildEngineBlock(theme, appState),
                        const SizedBox(height: 16),
                        _buildCurrenciesBlock(
                            theme, appState, isRateFetchEnabled),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildEngineBlock(AppTheme theme, AppState appState) {
    return Container(
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: BorderRadius.circular(16),
      ),
      child: _buildEngineInfo(theme, appState),
    );
  }

  Widget _buildCurrenciesBlock(
      AppTheme theme, AppState appState, bool isRateFetchEnabled) {
    return Expanded(
      child: Container(
        decoration: BoxDecoration(
          color: theme.cardBackground,
          borderRadius: BorderRadius.circular(16),
        ),
        child: Opacity(
          opacity: isRateFetchEnabled ? 1.0 : 0.5,
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: AbsorbPointer(
              absorbing: !isRateFetchEnabled,
              child: Column(
                children: [
                  SmartInput(
                    controller: _searchController,
                    hint: AppLocalizations.of(context)!
                        .currencyConversionSearchHint,
                    leftIconPath: 'assets/icons/search.svg',
                    rightIconPath: "assets/icons/close.svg",
                    onChanged: (value) {
                      _filterCurrencies(value);
                    },
                    onRightIconTap: () {
                      _searchController.text = "";
                      _filterCurrencies("");
                    },
                    onSubmitted: (value) {},
                    borderColor: theme.textPrimary,
                    focusedBorderColor: theme.primaryPurple,
                    height: 48,
                    fontSize: 16,
                    padding: const EdgeInsets.symmetric(horizontal: 16),
                    autofocus: false,
                    keyboardType: TextInputType.text,
                  ),
                  const SizedBox(height: 16),
                  Expanded(
                    child: ListView.builder(
                      physics: const BouncingScrollPhysics(),
                      itemCount: _filteredCurrencies.length,
                      itemBuilder: (context, index) {
                        final currency = _filteredCurrencies[index];
                        final isSelected = currency.code.toLowerCase() ==
                            selectedCurrency.toLowerCase();

                        return _buildCurrencyItem(
                          theme,
                          currency,
                          isSelected,
                          onTap: () async {
                            setState(() {
                              selectedCurrency = currency.code;
                            });

                            await setRateFetcher(
                              walletIndex: BigInt.from(appState.selectedWallet),
                              currency: selectedCurrency,
                            );

                            await appState.syncRates(force: true);
                            await appState.syncData();
                          },
                        );
                      },
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildEngineInfo(AppTheme theme, AppState appState) {
    final engineText = selectedEngine == 0 ? 'None' : 'Coingecko';

    return ButtonItem(
      theme: theme,
      title: AppLocalizations.of(context)!.currencyConversionEngineTitle,
      iconPath: 'assets/icons/currency.svg',
      description:
          AppLocalizations.of(context)!.currencyConversionEngineDescription,
      subtitleText: engineText,
      onTap: () {
        _showEngineSelector(appState);
      },
    );
  }

  void _showEngineSelector(AppState appState) {
    final engines = [
      ListItem(
          title: AppLocalizations.of(context)!.currencyConversionEngineNone,
          subtitle: AppLocalizations.of(context)!
              .currencyConversionEngineNoneSubtitle),
      ListItem(
          title:
              AppLocalizations.of(context)!.currencyConversionEngineCoingecko,
          subtitle: AppLocalizations.of(context)!
              .currencyConversionEngineCoingeckoSubtitle),
    ];

    showListSelectorModal(
      context: context,
      title:
          AppLocalizations.of(context)!.currencyConversionEngineSelectorTitle,
      items: engines,
      selectedIndex: selectedEngine,
      onItemSelected: (index) async {
        BigInt walletIndex = BigInt.from(appState.selectedWallet);

        setState(() {
          selectedEngine = index;
        });

        await setRateEngine(
          walletIndex: walletIndex,
          engineCode: index,
        );

        await appState.syncRates(force: true);
        await appState.syncData();
      },
    );
  }

  Widget _buildCurrencyItem(
    AppTheme theme,
    Currency currency,
    bool isSelected, {
    required VoidCallback onTap,
  }) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        height: 56,
        decoration: BoxDecoration(
          border: Border(
            bottom: BorderSide(
              color: theme.textSecondary.withValues(alpha: 0.1),
              width: 1,
            ),
          ),
        ),
        child: Row(
          children: [
            SizedBox(
              width: 60,
              child: Text(
                currency.code.toUpperCase(),
                style: TextStyle(
                  color: theme.textPrimary,
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ),
            Expanded(
              child: Text(
                currency.name,
                style: TextStyle(
                  color: theme.textSecondary,
                  fontSize: 16,
                ),
              ),
            ),
            SizedBox(
              width: 24,
              height: 24,
              child: isSelected
                  ? SvgPicture.asset(
                      'assets/icons/ok.svg',
                      colorFilter: ColorFilter.mode(
                        theme.primaryPurple,
                        BlendMode.srcIn,
                      ),
                    )
                  : null,
            ),
          ],
        ),
      ),
    );
  }
}

class Currency {
  final String code;
  final String name;

  Currency(this.code, this.name);
}

```

`lib/pages/gen_bip39.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_svg/svg.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/button.dart';
import 'package:zilpay/components/custom_app_bar.dart';
import 'package:zilpay/components/mnemonic_word_input.dart';
import 'package:zilpay/components/tile_button.dart';
import 'package:zilpay/components/wor_count_selector.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/modals/backup_confirmation_modal.dart';
import 'package:zilpay/src/rust/api/methods.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/l10n/app_localizations.dart';

class SecretPhraseGeneratorPage extends StatefulWidget {
  const SecretPhraseGeneratorPage({
    super.key,
  });

  @override
  State<SecretPhraseGeneratorPage> createState() => _CreateAccountPageState();
}

class _CreateAccountPageState extends State<SecretPhraseGeneratorPage> {
  List<String> _mnemonicWords = [];
  var _count = 12;
  bool _hasBackupWords = false;
  bool _isCopied = false;
  // final String _selectedLanguage = 'English';

  @override
  void initState() {
    super.initState();
    _regenerateMnemonicWords();
  }

  @override
  Widget build(BuildContext context) {
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);
    final theme = Provider.of<AppState>(context).currentTheme;
    final l10n = AppLocalizations.of(context)!;

    return Scaffold(
      body: SafeArea(
        child: Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 480),
            child: Column(
              children: [
                CustomAppBar(
                  title: l10n.secretPhraseGeneratorPageTitle,
                  onBackPressed: () => Navigator.pop(context),
                  actionIcon: SvgPicture.asset(
                    'assets/icons/reload.svg',
                    width: 30,
                    height: 30,
                    colorFilter: ColorFilter.mode(
                      theme.textPrimary,
                      BlendMode.srcIn,
                    ),
                  ),
                  onActionPressed: _regenerateMnemonicWords,
                ),
                Expanded(
                  child: Padding(
                    padding: EdgeInsets.symmetric(horizontal: adaptivePadding),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        WordCountSelector(
                          wordCounts: const [12, 15, 18, 21, 24],
                          selectedCount: _count,
                          onCountChanged: (newCount) {
                            setState(() {
                              _count = newCount;
                              _regenerateMnemonicWords();
                            });
                          },
                        ),
                        const SizedBox(height: 16),
                        Expanded(
                          child: ListView.builder(
                            physics: const BouncingScrollPhysics(),
                            itemCount: _mnemonicWords.length,
                            itemBuilder: (context, index) {
                              return Padding(
                                padding:
                                    const EdgeInsets.symmetric(vertical: 8.0),
                                child: MnemonicWordInput(
                                  index: index + 1,
                                  word: _mnemonicWords[index],
                                  isEditable: false,
                                  opacity: 0.5,
                                ),
                              );
                            },
                          ),
                        ),
                        const SizedBox(height: 8),
                        Row(
                          children: [
                            Expanded(
                              child: Theme(
                                data: Theme.of(context).copyWith(
                                  splashFactory: NoSplash.splashFactory,
                                  highlightColor: Colors.transparent,
                                ),
                                child: CheckboxListTile(
                                  title: Text(
                                    l10n.secretPhraseGeneratorPageBackupCheckbox,
                                    style:
                                        TextStyle(color: theme.textSecondary),
                                  ),
                                  value: _hasBackupWords,
                                  onChanged: (_) {
                                    if (!_hasBackupWords) {
                                      showBackupConfirmationModal(
                                        context: context,
                                        onConfirmed: (confirmed) {
                                          setState(() {
                                            _hasBackupWords = confirmed;
                                          });
                                        },
                                      );
                                    }
                                  },
                                  controlAffinity:
                                      ListTileControlAffinity.leading,
                                  activeColor: theme.primaryPurple,
                                ),
                              ),
                            ),
                            TileButton(
                              icon: SvgPicture.asset(
                                _isCopied
                                    ? "assets/icons/check.svg"
                                    : "assets/icons/copy.svg",
                                width: 24,
                                height: 24,
                                colorFilter: ColorFilter.mode(
                                  theme.primaryPurple,
                                  BlendMode.srcIn,
                                ),
                              ),
                              disabled: false,
                              onPressed: () async {
                                await _handleCopy(_mnemonicWords.join(" "));
                              },
                              backgroundColor: theme.cardBackground,
                              textColor: theme.primaryPurple,
                            ),
                          ],
                        ),
                        const SizedBox(height: 16),
                        Padding(
                          padding: const EdgeInsets.only(bottom: 16),
                          child: CustomButton(
                            textColor: theme.buttonText,
                            backgroundColor: theme.primaryPurple,
                            text: l10n.secretPhraseGeneratorPageNextButton,
                            onPressed: () {
                              Navigator.of(context).pushNamed('/verify_bip39',
                                  arguments: {'bip39': _mnemonicWords});
                            },
                            borderRadius: 30.0,
                            height: 56.0,
                            disabled: !_hasBackupWords,
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Future<void> _handleCopy(String text) async {
    await Clipboard.setData(ClipboardData(text: text));
    setState(() {
      _isCopied = true;
    });

    Future.delayed(const Duration(seconds: 2), () {
      if (mounted) {
        setState(() {
          _isCopied = false;
        });
      }
    });
  }

  void _regenerateMnemonicWords() async {
    String words = await genBip39Words(count: _count);

    setState(() {
      _mnemonicWords = words.split(" ");
      _hasBackupWords = false;
      _isCopied = false;
    });
  }
}

```

`lib/pages/gen_wallet_options.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:zilpay/l10n/app_localizations.dart';
import 'package:zilpay/state/app_state.dart';
import '../components/view_item.dart';

class GenWalletOptionsPage extends StatelessWidget {
  const GenWalletOptionsPage({super.key});

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<AppState>(context).currentTheme;

    return Scaffold(
      backgroundColor: theme.background,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: SvgPicture.asset(
            'assets/icons/back.svg',
            width: 24,
            height: 24,
            colorFilter: ColorFilter.mode(
              theme.secondaryPurple,
              BlendMode.srcIn,
            ),
          ),
          onPressed: () => Navigator.of(context).pop(),
        ),
        title: Text(AppLocalizations.of(context)!.genWalletOptionsTitle,
            style: TextStyle(color: theme.textPrimary)),
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              WalletListItem(
                title: AppLocalizations.of(context)!.genWalletOptionsBIP39Title,
                subtitle:
                    AppLocalizations.of(context)!.genWalletOptionsBIP39Subtitle,
                icon: SvgPicture.asset(
                  'assets/icons/document.svg',
                  width: 35,
                  height: 35,
                  colorFilter: ColorFilter.mode(
                    theme.primaryPurple,
                    BlendMode.srcIn,
                  ),
                ),
                onTap: () {
                  Navigator.of(context).pushNamed('/gen_bip39');
                },
              ),
              WalletListItem(
                disabled: true,
                title:
                    AppLocalizations.of(context)!.genWalletOptionsSLIP0039Title,
                subtitle: AppLocalizations.of(context)!
                    .genWalletOptionsSLIP0039Subtitle,
                icon: SvgPicture.asset(
                  'assets/icons/puzzle.svg',
                  width: 35,
                  height: 35,
                  colorFilter: ColorFilter.mode(
                    theme.primaryPurple,
                    BlendMode.srcIn,
                  ),
                ),
                onTap: () {},
              ),
              WalletListItem(
                title: AppLocalizations.of(context)!
                    .genWalletOptionsPrivateKeyTitle,
                subtitle: AppLocalizations.of(context)!
                    .genWalletOptionsPrivateKeySubtitle,
                icon: SvgPicture.asset(
                  'assets/icons/bincode.svg',
                  width: 35,
                  height: 35,
                  colorFilter: ColorFilter.mode(
                    theme.primaryPurple,
                    BlendMode.srcIn,
                  ),
                ),
                onTap: () {
                  Navigator.of(context).pushNamed('/gen_sk');
                },
              ),
            ],
          ),
        ),
      ),
    );
  }
}

```

`lib/pages/history_page.dart`:

```dart
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart' show defaultTargetPlatform;
import 'package:provider/provider.dart';
import 'package:zilpay/components/linear_refresh_indicator.dart';
import 'package:zilpay/components/transaction_item.dart';
import 'package:zilpay/components/hoverd_svg.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/modals/transaction_details_modal.dart';
import 'package:zilpay/src/rust/api/transaction.dart';
import 'package:zilpay/src/rust/models/transactions/history.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/l10n/app_localizations.dart';

enum SortType { date, status }

class HistoryPage extends StatefulWidget {
  const HistoryPage({super.key});

  @override
  State<HistoryPage> createState() => _HistoryPageState();
}

class _HistoryPageState extends State<HistoryPage> {
  List<HistoricalTransactionInfo> _history = [];
  bool _isLoading = true;
  SortType _sortType = SortType.date;
  final TextEditingController _searchController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _loadInitialHistory();
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  Future<void> _loadInitialHistory() async {
    final appState = Provider.of<AppState>(context, listen: false);
    if (appState.wallet == null || appState.account == null) {
      if (mounted) Navigator.of(context).pop();
      return;
    }
    try {
      final history = await getHistory(
        walletIndex: BigInt.from(appState.selectedWallet),
      );
      if (mounted) {
        setState(() {
          _history = history;
          _isLoading = false;
        });
      }
    } catch (e) {
      debugPrint("Error syncing history: $e");
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  Future<void> _checkPendingTransactions(AppState appState) async {
    try {
      final history = await checkPendingTranasctions(
        walletIndex: BigInt.from(appState.selectedWallet),
      );
      if (mounted) {
        setState(() {
          _history = history;
        });
      }
    } catch (e) {
      debugPrint("Error syncing pending transactions: $e");
    }
  }

  Future<void> _clearAllTransactions(AppState appState) async {
    try {
      await clearHistory(
        walletIndex: BigInt.from(appState.selectedWallet),
      );
      if (mounted) {
        setState(() {
          _history = [];
        });
      }
    } catch (e) {
      debugPrint("Error clearing transactions: $e");
    }
  }

  List<HistoricalTransactionInfo> _getSortedAndFilteredHistory() {
    List<HistoricalTransactionInfo> filteredHistory =
        _history.where((transaction) {
      final searchText = _searchController.text.toLowerCase();
      return [
        transaction.transactionHash,
        transaction.amount,
        transaction.sender,
        transaction.recipient,
        transaction.contractAddress ?? '',
        transaction.title ?? '',
        transaction.error ?? '',
        transaction.tokenInfo?.symbol ?? '',
        transaction.chainType,
      ].any((field) => field.toLowerCase().contains(searchText));
    }).toList();
    if (_sortType == SortType.date) {
      filteredHistory.sort((a, b) => b.timestamp.compareTo(a.timestamp));
    } else {
      filteredHistory.sort((a, b) => a.status.index.compareTo(b.status.index));
    }
    return filteredHistory;
  }

  Widget _buildHeader(AppState appState, double adaptivePadding) {
    return Padding(
      padding: EdgeInsets.all(adaptivePadding),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            AppLocalizations.of(context)!.historyPageTitle,
            style: TextStyle(
              color: appState.currentTheme.textPrimary,
              fontSize: 20,
              fontWeight: FontWeight.bold,
            ),
          ),
          Row(
            children: [
              HoverSvgIcon(
                assetName: 'assets/icons/down_arrow.svg',
                width: 24,
                height: 24,
                onTap: () {
                  setState(() {
                    _sortType = _sortType == SortType.date
                        ? SortType.status
                        : SortType.date;
                  });
                },
                color: appState.currentTheme.textPrimary,
              ),
              HoverSvgIcon(
                assetName: 'assets/icons/minus.svg',
                width: 24,
                height: 24,
                onTap: () {
                  _clearAllTransactions(appState);
                },
                color: appState.currentTheme.danger,
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildContent(AppState appState, double adaptivePadding) {
    if (_isLoading) {
      return Center(
        child: CircularProgressIndicator(
          color: appState.currentTheme.primaryPurple,
        ),
      );
    }
    final sortedHistory = _getSortedAndFilteredHistory();
    if (sortedHistory.isEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              AppLocalizations.of(context)!.historyPageNoTransactions,
              style: TextStyle(
                color: appState.currentTheme.textPrimary,
                fontSize: 16,
                fontWeight: FontWeight.w500,
              ),
            ),
          ],
        ),
      );
    }
    return Padding(
      padding: EdgeInsets.all(adaptivePadding),
      child: Column(
        children: sortedHistory.asMap().entries.map((entry) {
          final transaction = entry.value;
          final isLast = entry.key == sortedHistory.length - 1;
          return HistoryItem(
            transaction: transaction,
            showDivider: !isLast,
            onTap: () {
              showTransactionDetailsModal(
                context: context,
                transaction: transaction,
              );
            },
          );
        }).toList(),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);
    final isIOS = defaultTargetPlatform == TargetPlatform.iOS;

    final slivers = [
      if (isIOS)
        CupertinoSliverRefreshControl(
          onRefresh: () => _checkPendingTransactions(appState),
          builder: (
            BuildContext context,
            RefreshIndicatorMode refreshState,
            double pulledExtent,
            double refreshTriggerPullDistance,
            double refreshIndicatorExtent,
          ) {
            return LinearRefreshIndicator(
              pulledExtent: pulledExtent,
              refreshTriggerPullDistance: refreshTriggerPullDistance,
              refreshIndicatorExtent: refreshIndicatorExtent,
            );
          },
        ),
      SliverToBoxAdapter(
        child: Column(
          children: [
            _buildHeader(appState, adaptivePadding),
            _buildContent(appState, adaptivePadding),
          ],
        ),
      ),
    ];

    Widget scrollView = CustomScrollView(
      physics: const AlwaysScrollableScrollPhysics(),
      slivers: slivers,
    );

    if (!isIOS) {
      scrollView = RefreshIndicator(
        onRefresh: () => _checkPendingTransactions(appState),
        child: scrollView,
      );
    }

    return Scaffold(
      backgroundColor: appState.currentTheme.background,
      body: SafeArea(
        child: Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 480),
            child: Column(
              children: [
                Expanded(child: scrollView),
                Padding(
                  padding: EdgeInsets.symmetric(horizontal: adaptivePadding),
                  child: SmartInput(
                    controller: _searchController,
                    hint: AppLocalizations.of(context)!.historyPageSearchHint,
                    leftIconPath: 'assets/icons/search.svg',
                    rightIconPath: "assets/icons/close.svg",
                    onChanged: (value) {
                      setState(() {});
                    },
                    onRightIconTap: () {
                      _searchController.text = "";
                    },
                    onSubmitted: (value) {},
                    borderColor: appState.currentTheme.textPrimary,
                    focusedBorderColor: appState.currentTheme.primaryPurple,
                    height: 48,
                    fontSize: 16,
                    padding: const EdgeInsets.symmetric(horizontal: 16),
                    autofocus: false,
                    keyboardType: TextInputType.text,
                  ),
                ),
                const SizedBox(height: 4),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

```

`lib/pages/home_page.dart`:

```dart
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart' show defaultTargetPlatform;
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/hoverd_svg.dart';
import 'package:zilpay/components/linear_refresh_indicator.dart';
import 'package:zilpay/components/net_btn.dart';
import 'package:zilpay/components/tile_button.dart';
import 'package:zilpay/components/token_card.dart';
import 'package:zilpay/components/wallet_header.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/mixins/wallet_type.dart';
import 'package:zilpay/src/rust/api/token.dart';
import 'package:zilpay/src/rust/api/wallet.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:zilpay/l10n/app_localizations.dart';

const double ICON_SIZE_SMALL = 24.0;
const double ICON_SIZE_MEDIUM = 32.0;
const double ICON_SIZE_TILE_BUTTON = 25.0;

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> with TickerProviderStateMixin {
  bool _isFirstLoad = true;
  String? _errorMessage;
  late AnimationController _animationController;
  late Animation<double> _heightAnimation;
  late Animation<double> _opacityAnimation;

  @override
  void initState() {
    super.initState();

    _animationController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 400),
    );

    _heightAnimation = CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeOutCubic,
    );

    _opacityAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(
      CurvedAnimation(
        parent: _animationController,
        curve: const Interval(0.3, 1.0, curve: Curves.easeOut),
      ),
    );

    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (_isFirstLoad) {
        _isFirstLoad = false;
        final appState = Provider.of<AppState>(context, listen: false);
        _refreshData(appState);
      }
    });
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  Future<void> _refreshData(AppState appState) async {
    BigInt index = BigInt.from(appState.selectedWallet);

    try {
      await syncBalances(walletIndex: index);
      if (_errorMessage != null) {
        setState(() {
          _errorMessage = null;
        });
        _animationController.reverse();
      }
    } catch (e) {
      setState(() {
        _errorMessage = e.toString();
      });
      _animationController.forward();
    }

    await appState.syncRates();
    await appState.syncData();
  }

  void _dismissError() {
    _animationController.reverse().then((_) {
      setState(() {
        _errorMessage = null;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);
    final adaptivePaddingCard = AdaptiveSize.getAdaptivePadding(context, 12);
    final isIOS = defaultTargetPlatform == TargetPlatform.iOS;
    final l10n = AppLocalizations.of(context)!;

    final filteredTokens = appState.wallet!.tokens
        .where((t) => t.addrType == appState.account?.addrType)
        .toList();

    final slivers = [
      if (isIOS)
        CupertinoSliverRefreshControl(
          onRefresh: () => _refreshData(appState),
          builder: (
            BuildContext context,
            RefreshIndicatorMode refreshState,
            double pulledExtent,
            double refreshTriggerPullDistance,
            double refreshIndicatorExtent,
          ) {
            return LinearRefreshIndicator(
              pulledExtent: pulledExtent,
              refreshTriggerPullDistance: refreshTriggerPullDistance,
              refreshIndicatorExtent: refreshIndicatorExtent,
            );
          },
        ),
      if (_errorMessage != null)
        SliverToBoxAdapter(
          child: SizeTransition(
            axisAlignment: -1,
            sizeFactor: _heightAnimation,
            child: FadeTransition(
              opacity: _opacityAnimation,
              child: Container(
                margin: const EdgeInsets.fromLTRB(16, 16, 16, 0),
                padding:
                    const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
                decoration: BoxDecoration(
                  color: theme.danger,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Row(
                  children: [
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(l10n.homePageErrorTitle,
                              style: theme.subtitle1.copyWith(
                                color: theme.buttonText,
                              )),
                          const SizedBox(height: 4),
                          Text(
                            _errorMessage!,
                            style: TextStyle(
                              color: theme.buttonText,
                              fontSize: 16,
                            ),
                          ),
                        ],
                      ),
                    ),
                    IconButton(
                      icon: SvgPicture.asset(
                        'assets/icons/close.svg',
                        width: ICON_SIZE_SMALL,
                        height: ICON_SIZE_SMALL,
                        colorFilter: ColorFilter.mode(
                          theme.buttonText,
                          BlendMode.srcIn,
                        ),
                      ),
                      onPressed: _dismissError,
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      SliverToBoxAdapter(
        child: Padding(
          padding: const EdgeInsets.symmetric(
            horizontal: 16,
            vertical: 12,
          ),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              if (appState.account != null)
                Expanded(
                  child: WalletHeader(
                    account: appState.account!,
                    onSettings: () {
                      Navigator.pushNamed(context, '/settings');
                    },
                  ),
                ),
            ],
          ),
        ),
      ),
      SliverToBoxAdapter(
        child: SingleChildScrollView(
          scrollDirection: Axis.horizontal,
          padding: EdgeInsets.symmetric(horizontal: adaptivePadding),
          child: Row(
            children: [
              TileButton(
                icon: SvgPicture.asset(
                  "assets/icons/send.svg",
                  width: ICON_SIZE_TILE_BUTTON,
                  height: ICON_SIZE_TILE_BUTTON,
                  colorFilter: ColorFilter.mode(
                    theme.primaryPurple,
                    BlendMode.srcIn,
                  ),
                ),
                title: l10n.homePageSendButton,
                onPressed: () {
                  Navigator.pushNamed(context, '/send');
                },
                backgroundColor: theme.cardBackground,
                textColor: theme.primaryPurple,
              ),
              SizedBox(width: adaptivePaddingCard),
              TileButton(
                icon: SvgPicture.asset(
                  "assets/icons/receive.svg",
                  width: ICON_SIZE_TILE_BUTTON,
                  height: ICON_SIZE_TILE_BUTTON,
                  colorFilter: ColorFilter.mode(
                    theme.primaryPurple,
                    BlendMode.srcIn,
                  ),
                ),
                title: l10n.homePageReceiveButton,
                onPressed: () {
                  Navigator.pushNamed(context, '/receive');
                },
                backgroundColor: theme.cardBackground,
                textColor: theme.primaryPurple,
              ),
              if (appState.account != null &&
                  appState.chain?.slip44 == 313 &&
                  !appState.wallet!.walletType
                      .contains(WalletType.ledger.name)) ...[
                SizedBox(width: adaptivePaddingCard),
                TileButton(
                  icon: SvgPicture.asset(
                    "assets/icons/anchor.svg",
                    width: ICON_SIZE_TILE_BUTTON,
                    height: ICON_SIZE_TILE_BUTTON,
                    colorFilter:
                        ColorFilter.mode(theme.primaryPurple, BlendMode.srcIn),
                  ),
                  title: "Stake",
                  onPressed: () async {
                    Navigator.pushNamed(context, '/zil_stake');
                  },
                  backgroundColor: theme.cardBackground,
                  textColor: theme.primaryPurple,
                ),
                SizedBox(width: adaptivePaddingCard),
                TileButton(
                  icon: SvgPicture.asset(
                    appState.account?.addrType == 0
                        ? "assets/icons/scilla.svg"
                        : "assets/icons/solidity.svg",
                    width: ICON_SIZE_TILE_BUTTON,
                    height: ICON_SIZE_TILE_BUTTON,
                    colorFilter:
                        ColorFilter.mode(theme.primaryPurple, BlendMode.srcIn),
                  ),
                  title: appState.account?.addrType == 0 ? "Scilla" : "EVM",
                  onPressed: () async {
                    BigInt walletIndex = BigInt.from(appState.selectedWallet);
                    await zilliqaSwapChain(
                      walletIndex: walletIndex,
                      accountIndex: appState.wallet!.selectedAccount,
                    );
                    await appState.syncData();

                    try {
                      await syncBalances(
                        walletIndex: walletIndex,
                      );
                      await appState.syncData();
                    } catch (_) {}
                  },
                  backgroundColor: theme.cardBackground,
                  textColor: theme.primaryPurple,
                ),
              ],
            ],
          ),
        ),
      ),
      SliverToBoxAdapter(
        child: Padding(
          padding:
              EdgeInsets.symmetric(horizontal: adaptivePadding, vertical: 4),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Row(
                children: [
                  NetworkDownButton(
                    onPressed: () {
                      Navigator.pushNamed(context, '/networks');
                    },
                    chain: appState.chain!,
                  ),
                  SizedBox(width: adaptivePadding),
                  HoverSvgIcon(
                    assetName: appState.hideBalance
                        ? 'assets/icons/close_eye.svg'
                        : 'assets/icons/open_eye.svg',
                    width: ICON_SIZE_MEDIUM,
                    height: ICON_SIZE_MEDIUM,
                    padding: EdgeInsets.fromLTRB(
                        0, adaptivePadding, 0, adaptivePadding),
                    color: theme.textSecondary,
                    onTap: () {
                      setState(() {
                        appState.setHideBalance(!appState.hideBalance);
                      });
                    },
                  ),
                ],
              ),
              HoverSvgIcon(
                assetName: 'assets/icons/manage.svg',
                width: ICON_SIZE_MEDIUM,
                height: ICON_SIZE_MEDIUM,
                padding: EdgeInsets.fromLTRB(
                    30, adaptivePadding, 0, adaptivePadding),
                color: theme.textSecondary,
                onTap: () {
                  Navigator.pushNamed(context, '/manage_tokens');
                },
              ),
            ],
          ),
        ),
      ),
      SliverList(
        delegate: SliverChildBuilderDelegate(
          (context, index) {
            final token = filteredTokens[index];
            final isLast = index == filteredTokens.length - 1;
            final tokenAmountValue = token.balances.isNotEmpty &&
                    token.balances.keys
                        .contains(appState.wallet!.selectedAccount)
                ? BigInt.tryParse(token
                        .balances[appState.wallet!.selectedAccount]
                        .toString()) ??
                    BigInt.zero
                : BigInt.zero;

            return TokenCard(
              ftoken: token,
              hideBalance: appState.hideBalance,
              tokenAmount: tokenAmountValue,
              showDivider: !isLast,
              onTap: () {
                final originalIndex = appState.wallet!.tokens.indexOf(token);
                Navigator.of(context).pushNamed(
                  '/send',
                  arguments: {'token_index': originalIndex},
                );
              },
            );
          },
          childCount: filteredTokens.length,
        ),
      ),
    ];

    Widget scrollView = CustomScrollView(
      physics: const AlwaysScrollableScrollPhysics(),
      slivers: slivers,
    );

    if (!isIOS) {
      scrollView = RefreshIndicator(
        onRefresh: () => _refreshData(appState),
        child: scrollView,
      );
    }

    return SafeArea(
      child: Center(
        child: ConstrainedBox(
          constraints: const BoxConstraints(maxWidth: 480),
          child: scrollView,
        ),
      ),
    );
  }
}

```

`lib/pages/initial_page.dart`:

```dart
import 'dart:io' show Platform;
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:path_provider/path_provider.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/button.dart';
import 'package:zilpay/l10n/app_localizations.dart';
import 'package:zilpay/src/rust/api/backend.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/theme/app_theme.dart';

class InitialPage extends StatefulWidget {
  const InitialPage({super.key});

  @override
  State<InitialPage> createState() => _InitialPageState();
}

class _InitialPageState extends State<InitialPage> {
  bool _isLoading = true;
  bool _isRestoreAvailable = false;
  String? _vaultJson;
  String? _accountsJson;

  @override
  void initState() {
    super.initState();
    _loadingOldStorage();
  }

  void _loadingOldStorage() async {
    try {
      if (Platform.isAndroid) {
        final (vaultJson, accountsJson) = await loadOldDatabaseAndroid();
        setState(() {
          _vaultJson = vaultJson;
          _accountsJson = accountsJson;
          _isRestoreAvailable = true;
        });
      } else if (Platform.isIOS) {
        final appDocDir = await getApplicationSupportDirectory();
        final (vaultJson, accountsJson) =
            await loadOldDatabaseIos(baseDir: appDocDir.path);
        setState(() {
          _vaultJson = vaultJson;
          _accountsJson = accountsJson;
          _isRestoreAvailable = true;
        });
      }
    } catch (_) {
      setState(() {
        _isRestoreAvailable = false;
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Widget _buildButton(AppTheme theme) {
    if (_isLoading) {
      return const CircularProgressIndicator(
        valueColor: AlwaysStoppedAnimation<Color>(Colors.purple),
      );
    } else if (_isRestoreAvailable) {
      return CustomButton(
        textColor: theme.buttonText,
        backgroundColor: theme.primaryPurple,
        text: AppLocalizations.of(context)!.initialPagerestoreZilPay,
        onPressed: () {
          Navigator.of(context).pushNamed(
            '/rk_restore',
            arguments: {
              'vaultJson': _vaultJson,
              'accountsJson': _accountsJson,
            },
          );
        },
      );
    } else {
      return CustomButton(
        textColor: theme.buttonText,
        backgroundColor: theme.primaryPurple,
        text: AppLocalizations.of(context)?.initialPagegetStarted ?? "",
        onPressed: () {
          Navigator.of(context).pushNamed('/new_wallet_options');
        },
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<AppState>(context).currentTheme;

    final Color effectiveBgColor = theme.background;
    final Brightness backgroundBrightness =
        ThemeData.estimateBrightnessForColor(effectiveBgColor);
    final Brightness statusBarIconBrightness =
        backgroundBrightness == Brightness.light
            ? Brightness.dark
            : Brightness.light;
    final Brightness statusBarBrightness = backgroundBrightness;

    final SystemUiOverlayStyle overlayStyle = SystemUiOverlayStyle(
      statusBarColor: Colors.transparent,
      statusBarIconBrightness: statusBarIconBrightness,
      statusBarBrightness: statusBarBrightness,
    );

    return Scaffold(
      extendBody: true,
      appBar: AppBar(
        elevation: 0,
        backgroundColor: Colors.transparent,
        automaticallyImplyLeading: false,
        toolbarHeight: 0,
        systemOverlayStyle: overlayStyle,
      ),
      backgroundColor: theme.background,
      body: SafeArea(
        child: Column(
          children: [
            Padding(
              padding:
                  const EdgeInsets.symmetric(horizontal: 16.0, vertical: 16.0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  IconButton(
                    icon: SvgPicture.asset(
                      'assets/icons/moon_sun.svg',
                      colorFilter: ColorFilter.mode(
                        theme.textPrimary,
                        BlendMode.srcIn,
                      ),
                      width: 30.0,
                      height: 30.0,
                    ),
                    onPressed: () async {
                      final appState =
                          Provider.of<AppState>(context, listen: false);

                      switch (appState.state.appearances) {
                        case 0:
                          final Brightness systemBrightness =
                              PlatformDispatcher.instance.platformBrightness;
                          if (systemBrightness == Brightness.dark) {
                            await appState.setAppearancesCode(
                              2,
                              appState.state.abbreviatedNumber,
                            );
                          } else {
                            await appState.setAppearancesCode(
                              1,
                              appState.state.abbreviatedNumber,
                            );
                          }
                          break;
                        case 1:
                          await appState.setAppearancesCode(
                            2,
                            appState.state.abbreviatedNumber,
                          );
                          break;
                        case 2:
                          await appState.setAppearancesCode(
                            1,
                            appState.state.abbreviatedNumber,
                          );
                          break;
                      }
                    },
                  ),
                  IconButton(
                    icon: SvgPicture.asset(
                      'assets/icons/language.svg',
                      colorFilter:
                          ColorFilter.mode(theme.textPrimary, BlendMode.srcIn),
                      width: 34.0,
                      height: 34.0,
                    ),
                    onPressed: () {
                      Navigator.pushNamed(context, '/language');
                    },
                  ),
                ],
              ),
            ),
            Expanded(
              child: Center(
                child: SvgPicture.asset(
                  'assets/icons/little_dragons.svg',
                  width: 400.0,
                  height: 400.0,
                  colorFilter: ColorFilter.mode(
                    theme.textPrimary,
                    BlendMode.srcIn,
                  ),
                ),
              ),
            ),
            Padding(
              padding:
                  const EdgeInsets.only(left: 16.0, right: 16.0, bottom: 32.0),
              child: _buildButton(theme),
            ),
          ],
        ),
      ),
    );
  }
}

```

`lib/pages/keystore_backup.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_common.dart';
import 'package:flutter_svg/svg.dart';
import 'package:provider/provider.dart';
import 'package:screen_protector/screen_protector.dart';
import 'package:file_picker/file_picker.dart';
import 'package:zilpay/components/button.dart';
import 'package:zilpay/components/custom_app_bar.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/components/load_button.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/services/device.dart';
import 'package:zilpay/src/rust/api/wallet.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/theme/app_theme.dart';
import 'package:zilpay/l10n/app_localizations.dart';
import 'dart:io';
import 'package:path_provider/path_provider.dart';
import 'package:share_plus/share_plus.dart';

class KeystoreBackup extends StatefulWidget {
  const KeystoreBackup({super.key});

  @override
  State<KeystoreBackup> createState() => _KeystoreBackupState();
}

class _KeystoreBackupState extends State<KeystoreBackup> {
  bool isProcessing = false;
  bool hasError = false;
  String? errorMessage;
  bool _obscureConfirmPassword = true;
  bool isBackupCreated = false;
  String? backupFilePath;
  Uint8List? keystoreBytes;

  final _confirmPasswordController = TextEditingController();
  final _confirmPasswordInputKey = GlobalKey<SmartInputState>();
  final _btnController = RoundedLoadingButtonController();

  @override
  void initState() {
    _secureScreen();
    super.initState();
  }

  @override
  void dispose() {
    _confirmPasswordController.dispose();
    ScreenProtector.preventScreenshotOff();
    ScreenProtector.protectDataLeakageOff();
    ScreenProtector.protectDataLeakageWithBlurOff();
    super.dispose();
  }

  Future<void> _secureScreen() async {
    await ScreenProtector.preventScreenshotOn();
    await ScreenProtector.protectDataLeakageOn();
    await ScreenProtector.protectDataLeakageWithBlur();
  }

  void _onCreateBackup(BigInt walletIndex, String name) async {
    final l10n = AppLocalizations.of(context)!;

    if (_confirmPasswordController.text.isEmpty) {
      setState(() {
        hasError = true;
        errorMessage = l10n.keystoreBackupPasswordTooShort;
      });
      return;
    }

    _btnController.start();
    setState(() {
      isProcessing = true;
      hasError = false;
      errorMessage = null;
    });

    try {
      final device = DeviceInfoService();
      final identifiers = await device.getDeviceIdentifiers();

      keystoreBytes = await makeKeystoreFile(
        walletIndex: walletIndex,
        password: _confirmPasswordController.text,
        deviceIndicators: identifiers,
      );

      final docPath = await _saveKeystoreToDocumentsDir(
        keystoreBytes!,
        name,
      );

      setState(() {
        isBackupCreated = true;
        backupFilePath = docPath;
        isProcessing = false;
      });

      _btnController.success();
    } catch (e) {
      setState(() {
        isProcessing = false;
        hasError = true;
        errorMessage = "${l10n.keystoreBackupError} $e";
      });
      _btnController.error();
      await Future.delayed(const Duration(seconds: 1));
      _btnController.reset();
    }
  }

  Future<String> _saveKeystoreToDocumentsDir(
    Uint8List keystoreBytes,
    String name,
  ) async {
    try {
      final directory = await getApplicationDocumentsDirectory();
      final timestamp = DateTime.now().millisecondsSinceEpoch;
      final filePath =
          '${directory.path}/${name}_zilpay_keystore_$timestamp.zp';

      final file = File(filePath);
      await file.writeAsBytes(keystoreBytes);

      return filePath;
    } catch (e) {
      throw Exception('Failed to save keystore file: $e');
    }
  }

  Future<void> _saveKeystoreWithPicker(String name) async {
    final l10n = AppLocalizations.of(context)!;

    if (keystoreBytes == null) {
      setState(() {
        hasError = true;
        errorMessage = l10n.keystoreBackupError;
      });
      return;
    }

    try {
      final timestamp = DateTime.now().millisecondsSinceEpoch;
      final fileName = '${name}_zilpay_keystore_$timestamp.zp';

      if (Platform.isIOS) {
        final directory = await getApplicationDocumentsDirectory();
        final outputPath = '${directory.path}/$fileName';

        final file = File(outputPath);
        await file.writeAsBytes(keystoreBytes!);

        setState(() {
          backupFilePath = outputPath;
        });

        await SharePlus.instance.share(
          ShareParams(
            files: [XFile(outputPath)],
          ),
        );
      } else {
        String? outputDirectory = await FilePicker.platform.getDirectoryPath(
          dialogTitle: l10n.keystoreBackupSaveDialogTitle,
        );

        if (outputDirectory != null) {
          final outputPath = '$outputDirectory/$fileName';

          final file = File(outputPath);
          await file.writeAsBytes(keystoreBytes!);

          setState(() {
            backupFilePath = outputPath;
          });

          if (mounted) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text(l10n.keystoreBackupSavedSuccess),
                backgroundColor: Provider.of<AppState>(context, listen: false)
                    .currentTheme
                    .success,
              ),
            );
          }
        }
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          hasError = true;
          errorMessage = '${l10n.keystoreBackupSaveFailed}: $e';
        });
      }
    }
  }

  Future<void> _shareKeystoreFile() async {
    if (backupFilePath == null || !File(backupFilePath!).existsSync()) {
      final l10n = AppLocalizations.of(context)!;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(l10n.keystoreBackupSaveFailed),
          backgroundColor:
              Provider.of<AppState>(context, listen: false).currentTheme.danger,
        ),
      );
      return;
    }

    await SharePlus.instance.share(
      ShareParams(
        files: [XFile(backupFilePath!)],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final state = Provider.of<AppState>(context);
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);
    final theme = state.currentTheme;
    final l10n = AppLocalizations.of(context)!;

    return Scaffold(
      body: SafeArea(
        child: Column(
          children: [
            CustomAppBar(
              title: l10n.keystoreBackupTitle,
              onBackPressed: () => Navigator.pop(context),
            ),
            Expanded(
              child: SingleChildScrollView(
                padding: EdgeInsets.symmetric(horizontal: adaptivePadding),
                child: Column(
                  children: [
                    _buildWarningAlert(theme),
                    if (!isBackupCreated) ...[
                      SmartInput(
                        key: _confirmPasswordInputKey,
                        controller: _confirmPasswordController,
                        hint: l10n.keystoreBackupConfirmPasswordHint,
                        fontSize: 18,
                        height: 50,
                        padding: const EdgeInsets.symmetric(horizontal: 20),
                        focusedBorderColor: theme.primaryPurple,
                        obscureText: _obscureConfirmPassword,
                        onSubmitted: (_) => _onCreateBackup(
                          BigInt.from(
                            state.selectedWallet,
                          ),
                          state.wallet?.walletName ?? "",
                        ),
                        rightIconPath: _obscureConfirmPassword
                            ? "assets/icons/close_eye.svg"
                            : "assets/icons/open_eye.svg",
                        onRightIconTap: () => setState(() =>
                            _obscureConfirmPassword = !_obscureConfirmPassword),
                      ),
                      if (hasError && errorMessage != null)
                        Container(
                          margin: const EdgeInsets.only(top: 8),
                          child: Text(
                            errorMessage!,
                            style: TextStyle(
                              color: theme.danger,
                              fontSize: 14,
                            ),
                          ),
                        ),
                      const SizedBox(height: 16),
                      Container(
                        constraints: const BoxConstraints(maxWidth: 480),
                        child: RoundedLoadingButton(
                          color: theme.primaryPurple,
                          valueColor: theme.buttonText,
                          controller: _btnController,
                          onPressed: () => _onCreateBackup(
                            BigInt.from(state.selectedWallet),
                            state.wallet?.walletName ?? "",
                          ),
                          child: Text(
                            l10n.keystoreBackupCreateButton,
                            style: TextStyle(
                              color: theme.buttonText,
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      ),
                    ],
                    if (isBackupCreated) ...[
                      _buildSuccessMessage(theme),
                      SizedBox(height: adaptivePadding),
                      if (!Platform.isIOS) ...[
                        Container(
                          constraints: const BoxConstraints(maxWidth: 480),
                          child: CustomButton(
                            textColor: theme.buttonText,
                            backgroundColor: theme.primaryPurple,
                            text: l10n.keystoreBackupSaveAsButton,
                            onPressed: () => _saveKeystoreWithPicker(
                              state.wallet?.walletName ?? "",
                            ),
                            borderRadius: 30.0,
                            height: 56.0,
                          ),
                        ),
                        SizedBox(height: adaptivePadding),
                      ],
                      Container(
                        constraints: const BoxConstraints(maxWidth: 480),
                        child: CustomButton(
                          textColor: theme.buttonText,
                          backgroundColor: theme.primaryPurple,
                          text: l10n.keystoreBackupShareButton,
                          onPressed: _shareKeystoreFile,
                          borderRadius: 30.0,
                          height: 56.0,
                        ),
                      ),
                      SizedBox(height: adaptivePadding),
                      Container(
                        constraints: const BoxConstraints(maxWidth: 480),
                        child: CustomButton(
                          textColor: theme.buttonText,
                          backgroundColor: theme.secondaryPurple,
                          text: l10n.keystoreBackupDoneButton,
                          onPressed: () => Navigator.pop(context),
                          borderRadius: 30.0,
                          height: 56.0,
                        ),
                      ),
                    ],
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildWarningAlert(AppTheme theme) {
    final l10n = AppLocalizations.of(context)!;

    return Container(
      margin: const EdgeInsets.symmetric(vertical: 16),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: theme.warning.withValues(alpha: 0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: theme.warning),
      ),
      child: Column(
        children: [
          Row(
            children: [
              SvgPicture.asset(
                "assets/icons/warning.svg",
                width: 24,
                height: 24,
                colorFilter: ColorFilter.mode(
                  theme.warning,
                  BlendMode.srcIn,
                ),
              ),
              const SizedBox(width: 8),
              Text(
                l10n.keystoreBackupWarningTitle,
                style: TextStyle(
                  color: theme.warning,
                  fontWeight: FontWeight.bold,
                  fontSize: 16,
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Text(
            l10n.keystoreBackupWarningMessage,
            style: TextStyle(
              color: theme.warning,
              fontSize: 14,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSuccessMessage(AppTheme theme) {
    final l10n = AppLocalizations.of(context)!;

    return Container(
      margin: const EdgeInsets.symmetric(vertical: 16),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: theme.success.withValues(alpha: 0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: theme.success),
      ),
      child: Column(
        children: [
          Row(
            children: [
              Text(
                l10n.keystoreBackupSuccessTitle,
                style: TextStyle(
                  color: theme.success,
                  fontWeight: FontWeight.bold,
                  fontSize: 16,
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Text(
            l10n.keystoreBackupSuccessMessage,
            style: TextStyle(
              color: theme.success,
              fontSize: 14,
            ),
          ),
          if (backupFilePath != null) ...[
            const SizedBox(height: 8),
            Text(
              '${l10n.keystoreBackupTempLocation}:\n$backupFilePath',
              style: TextStyle(
                color: theme.success,
                fontSize: 12,
                fontStyle: FontStyle.italic,
              ),
            ),
          ],
        ],
      ),
    );
  }
}

```

`lib/pages/keystore_file_restore.dart`:

```dart
import 'dart:io';
import 'dart:typed_data';
import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:provider/provider.dart';
import 'package:file_picker/file_picker.dart';
import 'package:zilpay/components/biometric_switch.dart';
import 'package:zilpay/components/custom_app_bar.dart';
import 'package:zilpay/components/load_button.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/src/rust/api/wallet.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/l10n/app_localizations.dart';
import 'package:zilpay/services/biometric_service.dart';
import 'package:zilpay/services/auth_guard.dart';
import 'package:zilpay/services/device.dart';
import 'package:path_provider/path_provider.dart';
import 'package:zilpay/theme/app_theme.dart';

class RestoreKeystoreFilePage extends StatefulWidget {
  const RestoreKeystoreFilePage({super.key});

  @override
  State<RestoreKeystoreFilePage> createState() =>
      _RestoreKeystoreFilePageState();
}

class _RestoreKeystoreFilePageState extends State<RestoreKeystoreFilePage> {
  static const List<int> SIGNATURE = [
    90,
    73,
    76,
    80,
    65,
    89,
    95,
    66,
    65,
    67,
    75,
    85,
    80
  ];

  String _password = '';
  bool _disabled = false;
  String _errorMessage = '';
  bool _isLoading = true;
  List<KeystoreFile> _backupFiles = [];
  KeystoreFile? _selectedFile;

  final AuthService _authService = AuthService();
  late AuthGuard _authGuard;
  late AppState _appState;
  List<AuthMethod> _authMethods = [AuthMethod.none];
  bool _useDeviceAuth = true;

  final TextEditingController _passwordController = TextEditingController();
  final _passwordInputKey = GlobalKey<SmartInputState>();
  final _btnController = RoundedLoadingButtonController();
  bool _obscurePassword = true;

  @override
  void initState() {
    super.initState();
    _loadBackupFiles();

    _authGuard = Provider.of<AuthGuard>(context, listen: false);
    _appState = Provider.of<AppState>(context, listen: false);
    _checkAuthMethods();
  }

  @override
  void dispose() {
    _passwordController.dispose();
    _btnController.dispose();
    super.dispose();
  }

  Future<void> _checkAuthMethods() async {
    final methods = await _authService.getAvailableAuthMethods();
    setState(() {
      _authMethods = methods;
    });
  }

  Future<void> _loadBackupFiles() async {
    setState(() {
      _isLoading = true;
      _backupFiles = [];
      _errorMessage = '';
    });

    try {
      final List<KeystoreFile> files = [];

      final tempDir = await getTemporaryDirectory();
      await _loadFilesFromDirectory(tempDir.path, files);

      final docDir = await getApplicationDocumentsDirectory();
      await _loadFilesFromDirectory(docDir.path, files);

      if (Platform.isAndroid) {
        await _loadFilesFromDirectory('/storage/emulated/0/Download', files);
      }

      setState(() {
        _backupFiles = files;
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _isLoading = false;
        _errorMessage = e.toString();
      });
    }
  }

  Future<void> _loadFilesFromDirectory(
      String dirPath, List<KeystoreFile> files) async {
    try {
      final dir = Directory(dirPath);
      if (await dir.exists()) {
        final dirFiles = dir
            .listSync()
            .where((entity) => entity is File && entity.path.endsWith('.zp'))
            .map((entity) => entity as File);

        for (final file in dirFiles) {
          try {
            final keystoreFile = await _parseKeystoreFile(file);
            if (keystoreFile != null) {
              files.add(keystoreFile);
            }
          } catch (_) {}
        }
      }
    } catch (_) {}
  }

  Future<KeystoreFile?> _parseKeystoreFile(File file) async {
    try {
      final bytes = await file.readAsBytes();
      if (bytes.length < SIGNATURE.length + 1) {
        return KeystoreFile(
          file: file,
          fileName: file.path.split('/').last,
          filePath: file.path,
          lastModified: file.lastModifiedSync(),
          isValid: false,
        );
      }

      final signatureBytes = bytes.sublist(0, SIGNATURE.length);
      final signatureMatches =
          _compareByteList(signatureBytes, Uint8List.fromList(SIGNATURE));

      int? version;
      if (signatureMatches && bytes.length > SIGNATURE.length) {
        version = bytes[SIGNATURE.length];
      }

      return KeystoreFile(
        file: file,
        fileName: file.path.split('/').last,
        filePath: file.path,
        lastModified: file.lastModifiedSync(),
        isValid: signatureMatches,
        version: version,
      );
    } catch (e) {
      return null;
    }
  }

  bool _compareByteList(Uint8List a, Uint8List b) {
    if (a.length != b.length) return false;
    for (int i = 0; i < a.length; i++) {
      if (a[i] != b[i]) return false;
    }
    return true;
  }

  void _selectBackupFile(KeystoreFile file) {
    if (_disabled) return;

    setState(() {
      _selectedFile = file;
      _errorMessage = '';
    });
  }

  Future<void> _openFilePicker() async {
    if (_disabled) return;

    try {
      final l10n = AppLocalizations.of(context)!;
      final result = await FilePicker.platform.pickFiles(type: FileType.any);

      if (result != null &&
          result.files.isNotEmpty &&
          result.files.first.path != null) {
        final path = result.files.first.path!;
        if (path.toLowerCase().endsWith('.zp')) {
          try {
            final file = File(path);
            final keystoreFile = await _parseKeystoreFile(file);

            if (keystoreFile != null) {
              setState(() {
                if (!_backupFiles
                    .any((f) => f.filePath == keystoreFile.filePath)) {
                  _backupFiles.add(keystoreFile);
                }
                _selectedFile = keystoreFile;
                _errorMessage = '';
              });
            }
          } catch (e) {
            setState(() => _errorMessage = e.toString());
          }
        } else {
          setState(() => _errorMessage = l10n.keystoreRestoreExtError);
        }
      }
    } catch (e) {
      setState(() => _errorMessage = e.toString());
    }
  }

  Future<void> _restoreFromKeystore() async {
    setState(() {
      _disabled = true;
      _errorMessage = '';
    });

    if (_passwordController.text.isEmpty) {
      setState(() {
        _errorMessage =
            AppLocalizations.of(context)!.passwordSetupPageShortPasswordError;
        _disabled = false;
      });
      _passwordInputKey.currentState?.shake();
      _btnController.reset();
      return;
    }

    try {
      _btnController.start();

      if (_useDeviceAuth) {
        final authenticated = await _authService.authenticate(
          allowPinCode: true,
          reason: AppLocalizations.of(context)!.passwordSetupPageAuthReason,
        );
        setState(() => _useDeviceAuth = authenticated);
        if (!authenticated) {
          setState(() {
            _disabled = false;
          });
          _btnController.reset();
          return;
        }
      }

      DeviceInfoService device = DeviceInfoService();
      List<String> identifiers = await device.getDeviceIdentifiers();

      AuthMethod biometricType = AuthMethod.none;
      if (_useDeviceAuth) {
        biometricType = _authMethods[0];
      }

      final fileBytes = await _selectedFile!.file.readAsBytes();
      final (String, String) session = await restoreFromKeystore(
        keystoreBytes: fileBytes,
        deviceIndicators: identifiers,
        password: _passwordController.text,
        biometricType: biometricType.name,
      );

      if (_useDeviceAuth) {
        await _authGuard.setSession(session.$2, session.$1);
      }

      await _appState.syncData();
      await _appState.startTrackHistoryWorker();

      _appState.setSelectedWallet(_appState.wallets.length - 1);

      _btnController.success();

      if (mounted) {
        Navigator.of(context).pushReplacementNamed('/');
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _errorMessage = e.toString();
          _disabled = false;
        });
        _btnController.error();
        await Future.delayed(const Duration(seconds: 1));
        _btnController.reset();
      }
    }
  }

  String _getFormattedDate(DateTime date) {
    return '${date.day}/${date.month}/${date.year} ${date.hour}:${date.minute.toString().padLeft(2, '0')}';
  }

  @override
  Widget build(BuildContext context) {
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);
    final theme = Provider.of<AppState>(context).currentTheme;
    final l10n = AppLocalizations.of(context)!;

    return Scaffold(
      body: SafeArea(
        child: Column(
          children: [
            CustomAppBar(
              title: l10n.restoreWalletOptionsKeyStoreTitle,
              onBackPressed: _disabled ? () {} : () => Navigator.pop(context),
              actionIcon: SvgPicture.asset(
                'assets/icons/reload.svg',
                width: 24,
                height: 24,
                colorFilter:
                    ColorFilter.mode(theme.textPrimary, BlendMode.srcIn),
              ),
              onActionPressed: _disabled ? null : _loadBackupFiles,
            ),
            Expanded(
              child: Padding(
                padding: EdgeInsets.symmetric(horizontal: adaptivePadding),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    Padding(
                      padding: const EdgeInsets.only(top: 16, bottom: 8),
                      child: SmartInput(
                        key: _passwordInputKey,
                        controller: _passwordController,
                        hint: l10n.keystorePasswordHint,
                        height: 50.0,
                        fontSize: 18,
                        padding: const EdgeInsets.symmetric(horizontal: 20),
                        focusedBorderColor: theme.primaryPurple,
                        disabled: _disabled || _selectedFile == null,
                        obscureText: _obscurePassword,
                        rightIconPath: _obscurePassword
                            ? "assets/icons/close_eye.svg"
                            : "assets/icons/open_eye.svg",
                        onRightIconTap: _disabled
                            ? null
                            : () {
                                setState(
                                    () => _obscurePassword = !_obscurePassword);
                              },
                        onChanged: _disabled
                            ? null
                            : (value) {
                                setState(() {
                                  _password = value;
                                  if (_errorMessage.isNotEmpty) {
                                    _errorMessage = '';
                                  }
                                });
                              },
                      ),
                    ),
                    BiometricSwitch(
                      biometricType: _authMethods.first,
                      value: _useDeviceAuth,
                      disabled: _disabled,
                      onChanged: (value) async {
                        setState(() => _useDeviceAuth = value);
                      },
                    ),
                    Padding(
                      padding: const EdgeInsets.only(top: 8, bottom: 16),
                      child: RoundedLoadingButton(
                        color: theme.primaryPurple,
                        valueColor: theme.buttonText,
                        controller: _btnController,
                        onPressed: (_password.isNotEmpty &&
                                _selectedFile != null &&
                                !_disabled)
                            ? _restoreFromKeystore
                            : () {},
                        child: Text(
                          l10n.keystoreRestoreButton,
                          style: const TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ),
                    if (_errorMessage.isNotEmpty)
                      Padding(
                        padding: const EdgeInsets.only(bottom: 16),
                        child: Text(
                          _errorMessage,
                          style: TextStyle(
                            color: theme.danger,
                            fontSize: 14,
                            fontWeight: FontWeight.w500,
                          ),
                          textAlign: TextAlign.center,
                        ),
                      ),
                    _buildFileListHeader(theme),
                    _buildFileList(theme),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildFileListHeader(AppTheme theme) {
    final l10n = AppLocalizations.of(context)!;

    return Padding(
      padding: const EdgeInsets.only(bottom: 8),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            l10n.keystoreRestoreFilesTitle,
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
              color: theme.textPrimary,
            ),
          ),
          IconButton(
            onPressed: _disabled ? null : _openFilePicker,
            icon: SvgPicture.asset(
              'assets/icons/plus.svg',
              width: 24,
              height: 24,
              colorFilter: ColorFilter.mode(
                  _disabled ? theme.textSecondary : theme.textPrimary,
                  BlendMode.srcIn),
            ),
            splashRadius: 20,
          ),
        ],
      ),
    );
  }

  Widget _buildFileList(AppTheme theme) {
    if (_isLoading) {
      return Expanded(
        child: Center(
          child: CircularProgressIndicator(color: theme.primaryPurple),
        ),
      );
    }

    final l10n = AppLocalizations.of(context)!;

    return Expanded(
      child: _backupFiles.isEmpty
          ? Center(
              child: Text(
                l10n.keystoreRestoreNoFile,
                style: TextStyle(
                  color: theme.textSecondary,
                  fontSize: 16,
                ),
              ),
            )
          : ListView.builder(
              itemCount: _backupFiles.length,
              itemBuilder: (context, index) {
                final file = _backupFiles[index];
                final isSelected = _selectedFile?.filePath == file.filePath;
                final formattedDate = _getFormattedDate(file.lastModified);

                return Padding(
                  padding: const EdgeInsets.only(bottom: 12),
                  child: KeystoreFileCard(
                    file: file,
                    isSelected: isSelected,
                    formattedDate: formattedDate,
                    theme: theme,
                    disabled: _disabled,
                    onPressed: () => _selectBackupFile(file),
                  ),
                );
              },
            ),
    );
  }
}

class KeystoreFile {
  final File file;
  final String fileName;
  final String filePath;
  final DateTime lastModified;
  final bool isValid;
  final int? version;
  final int fileSize;

  KeystoreFile({
    required this.file,
    required this.fileName,
    required this.filePath,
    required this.lastModified,
    required this.isValid,
    this.version,
  }) : fileSize = file.lengthSync();
}

class KeystoreFileCard extends StatelessWidget {
  final KeystoreFile file;
  final bool isSelected;
  final String formattedDate;
  final AppTheme theme;
  final bool disabled;
  final VoidCallback onPressed;

  const KeystoreFileCard({
    Key? key,
    required this.file,
    required this.isSelected,
    required this.formattedDate,
    required this.theme,
    required this.onPressed,
    this.disabled = false,
  }) : super(key: key);

  String _formatFileSize() {
    final sizeInKB = (file.fileSize / 1024).toStringAsFixed(1);
    return '$sizeInKB KB';
  }

  @override
  Widget build(BuildContext context) {
    return PressableCard(
      onPressed: disabled ? () {} : onPressed,
      backgroundColor: isSelected
          ? theme.primaryPurple.withValues(alpha: 0.1)
          : theme.cardBackground,
      borderColor: isSelected
          ? theme.primaryPurple
          : theme.secondaryPurple.withValues(alpha: 0.3),
      disabled: disabled,
      child: Padding(
        padding: const EdgeInsets.all(12),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                SvgPicture.asset(
                  'assets/icons/document.svg',
                  width: 32,
                  height: 32,
                  colorFilter: ColorFilter.mode(
                    file.isValid
                        ? (disabled ? theme.textSecondary : theme.primaryPurple)
                        : theme.textSecondary,
                    BlendMode.srcIn,
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        file.fileName,
                        style: TextStyle(
                          color: disabled
                              ? theme.textSecondary
                              : theme.textPrimary,
                          fontSize: 16,
                          fontWeight: FontWeight.w500,
                        ),
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                      ),
                      const SizedBox(height: 4),
                      Row(
                        children: [
                          Text(
                            formattedDate,
                            style: TextStyle(
                              color: theme.textSecondary,
                              fontSize: 12,
                            ),
                          ),
                          const SizedBox(width: 8),
                          Text(
                            _formatFileSize(),
                            style: TextStyle(
                              color: theme.textSecondary,
                              fontSize: 12,
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
                if (file.isValid)
                  Container(
                    padding:
                        const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                    decoration: BoxDecoration(
                      color: theme.primaryPurple
                          .withValues(alpha: disabled ? 0.1 : 0.2),
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Text(
                      'v${file.version ?? "?"}',
                      style: TextStyle(
                        color: disabled
                            ? theme.textSecondary
                            : theme.primaryPurple,
                        fontSize: 12,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
              ],
            ),
            const SizedBox(height: 8),
            Text(
              file.filePath,
              style: TextStyle(
                color: theme.textSecondary,
                fontSize: 12,
              ),
              maxLines: 2,
              overflow: TextOverflow.ellipsis,
            ),
          ],
        ),
      ),
    );
  }
}

class PressableCard extends StatefulWidget {
  final Widget child;
  final VoidCallback onPressed;
  final Color backgroundColor;
  final Color borderColor;
  final bool disabled;

  const PressableCard({
    Key? key,
    required this.child,
    required this.onPressed,
    required this.backgroundColor,
    required this.borderColor,
    this.disabled = false,
  }) : super(key: key);

  @override
  State<PressableCard> createState() => _PressableCardState();
}

class _PressableCardState extends State<PressableCard> {
  bool _isPressed = false;

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTapDown:
          widget.disabled ? null : (_) => setState(() => _isPressed = true),
      onTapUp: widget.disabled
          ? null
          : (_) {
              setState(() => _isPressed = false);
              widget.onPressed();
            },
      onTapCancel:
          widget.disabled ? null : () => setState(() => _isPressed = false),
      child: AnimatedScale(
        scale: (_isPressed && !widget.disabled) ? 0.97 : 1.0,
        duration: const Duration(milliseconds: 100),
        child: Card(
          margin: EdgeInsets.zero,
          color: widget.backgroundColor,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
            side: BorderSide(
              color: widget.disabled
                  ? widget.borderColor.withValues(alpha: 0.5)
                  : widget.borderColor,
              width: 1,
            ),
          ),
          child: widget.child,
        ),
      ),
    );
  }
}

```

`lib/pages/ledger_connect.dart`:

```dart
import 'dart:async';
import 'dart:io' show Platform;
import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/custom_app_bar.dart';
import 'package:zilpay/components/ledger_device_card.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:ledger_flutter_plus/ledger_flutter_plus.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:async/async.dart';

class LedgerConnectPage extends StatefulWidget {
  const LedgerConnectPage({super.key});
  @override
  State<LedgerConnectPage> createState() => _LedgerConnectPageState();
}

class _LedgerConnectPageState extends State<LedgerConnectPage> {
  LedgerInterface? _ledgerBle;
  LedgerInterface? _ledgerUsb;
  final Set<LedgerDevice> _discoveredDevices = {};
  StreamSubscription? _scanSubscription;
  bool _isScanning = false;
  bool _isConnecting = false;
  LedgerDevice? _connectingDevice;
  LedgerConnection? _ledgerConnection;
  String _statusText = 'Initializing...';
  StreamSubscription? _disconnectionSubscription;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _initLedger();
      Future.delayed(const Duration(milliseconds: 500), _startScanning);
    });
  }

  @override
  void dispose() {
    _scanSubscription?.cancel();
    _disconnectionSubscription?.cancel();
    _ledgerConnection
        ?.disconnect()
        .catchError((e) => debugPrint('Error disconnecting on dispose: $e'));
    _ledgerBle
        ?.dispose()
        .catchError((e) => debugPrint('Error disposing BLE: $e'));
    _ledgerUsb
        ?.dispose()
        .catchError((e) => debugPrint('Error disposing USB: $e'));
    super.dispose();
  }

  void _initLedger() {
    if (!mounted) return;
    try {
      _ledgerBle = LedgerInterface.ble(
        onPermissionRequest: _handlePermissionRequest,
        bleOptions: BluetoothOptions(
          maxScanDuration: const Duration(seconds: 15),
        ),
      );
      _ledgerUsb = Platform.isAndroid ? LedgerInterface.usb() : null;
      setState(() {
        _statusText = 'Ready to scan. Press refresh button.';
      });
    } catch (e) {
      debugPrint('Error initializing Ledger: $e');
      if (!mounted) return;
      setState(() {
        _statusText = 'Error initializing Ledger: $e';
      });
      _showErrorDialog(
          'Initialization Error', 'Failed to initialize Ledger interfaces: $e');
    }
  }

  Future<bool> _handlePermissionRequest(AvailabilityState status) async {
    if (!mounted) return false;

    if (status == AvailabilityState.poweredOff) {
      setState(() {
        _statusText =
            'Bluetooth is turned off. Please enable Bluetooth on your device.';
      });
      _showErrorDialog('Bluetooth Off',
          'Please turn on Bluetooth in your device settings and try again.');
      return false;
    }

    if (status == AvailabilityState.unauthorized) {
      setState(() {
        _statusText = 'Bluetooth permission denied. Please enable in settings.';
      });

      if (Platform.isIOS) {
        _showErrorDialog('Permission Required',
            'This app requires Bluetooth permission to scan for Ledger devices. Please enable Bluetooth permission in your device settings.',
            showSettingsButton: true);
      } else {
        final statuses = await [
          Permission.bluetoothScan,
          Permission.bluetoothConnect,
          Permission.locationWhenInUse,
        ].request();

        final allGranted = statuses.values.every((s) => s.isGranted);
        if (!allGranted && mounted) {
          _showErrorDialog('Permission Denied',
              'Bluetooth permissions are required to scan for Ledger devices. Please grant permissions in settings.',
              showSettingsButton: true);
          return false;
        }
      }
      return false;
    }

    if (status == AvailabilityState.unsupported) {
      setState(() {
        _statusText = 'Bluetooth LE is not supported on this device.';
      });
      _showErrorDialog('Unsupported Device',
          'This device does not support Bluetooth Low Energy, which is required to connect to Ledger devices wirelessly.');
      return false;
    }

    if (Platform.isIOS) {
      return true;
    }

    final statuses = await [
      Permission.bluetoothScan,
      Permission.bluetoothConnect,
      Permission.locationWhenInUse,
    ].request();

    final allGranted = statuses.values.every((s) => s.isGranted);

    if (!allGranted && mounted) {
      setState(() {
        _statusText = 'Permissions denied. Cannot scan via BLE.';
      });

      _showErrorDialog('Permission Denied',
          'Bluetooth permissions are required to scan for Ledger devices via BLE. Please grant permissions in settings.',
          showSettingsButton: true);
      return false;
    }

    return true;
  }

  Future<void> _startScanning() async {
    if (_isScanning || _isConnecting || _ledgerBle == null) return;

    await _disconnectDevice();
    if (!mounted) return;

    setState(() {
      _isScanning = true;
      _discoveredDevices.clear();
      _statusText = 'Scanning for Ledger devices...';
    });

    await _scanSubscription?.cancel();
    _scanSubscription = null;

    try {
      final bleStatus = await _ledgerBle!.status;
      debugPrint('[Scan] Current BLE status: $bleStatus');

      if (bleStatus != AvailabilityState.poweredOn) {
        debugPrint('[Scan] BLE not powered on, current state: $bleStatus');
        final granted = await _handlePermissionRequest(bleStatus);
        if (!granted) {
          setState(() => _isScanning = false);
          return;
        }
      }

      await Future.delayed(const Duration(milliseconds: 500));

      final bleStream = _ledgerBle!.scan();
      final usbStream = Platform.isAndroid ? _ledgerUsb?.scan() : null;

      final combinedStream = StreamGroup.merge([
        bleStream,
        if (usbStream != null) usbStream,
      ]);

      _scanSubscription = combinedStream.listen(
        (device) {
          if (!mounted) return;
          setState(() {
            _discoveredDevices.add(device);
            _statusText = 'Found ${_discoveredDevices.length} device(s)...';
          });
        },
        onError: (error) {
          if (!mounted) return;
          debugPrint('[Scan] Scan Error: $error');
          setState(() {
            _isScanning = false;
            _statusText = 'Scan Error: $error';
          });
          _showErrorDialog('Scan Error', 'Scan Error: $error');
        },
        onDone: () {
          if (!mounted) return;
          setState(() {
            _isScanning = false;
            _statusText = _discoveredDevices.isEmpty
                ? 'Scan finished. No devices found.'
                : 'Scan finished. Found ${_discoveredDevices.length} device(s). Select one to connect.';
          });
        },
      );

      Future.delayed(const Duration(seconds: 16), () {
        if (mounted && _isScanning) {
          _stopScan();
        }
      });
    } catch (e, s) {
      debugPrint('[Scan] Error starting scan: $e\n$s');
      if (!mounted) return;
      setState(() {
        _isScanning = false;
        _statusText = 'Failed to start scan: $e';
      });
      _showErrorDialog('Scan Error', 'Failed to start scan: $e');
    }
  }

  Future<void> _stopScan() async {
    debugPrint("[Scan] Stopping scan...");
    await _scanSubscription?.cancel();
    _scanSubscription = null;
    if (mounted && _isScanning) {
      setState(() {
        _isScanning = false;
        if (!_isConnecting && _ledgerConnection == null) {
          _statusText = _discoveredDevices.isEmpty
              ? 'Scan stopped.'
              : 'Scan stopped. Found ${_discoveredDevices.length} device(s).';
        }
      });
      debugPrint("[Scan] Scan stopped and state updated.");
    }
  }

  Future<void> _connectToDevice(LedgerDevice device, {int retries = 2}) async {
    if (_isConnecting || _ledgerConnection != null) {
      debugPrint('[Connect] Attempt aborted: Already connecting or connected.');
      return;
    }
    if (_isScanning) {
      await _stopScan();
    }
    if (!mounted) return;
    debugPrint(
        '[Connect] Attempting connection to ${device.name} (${device.id}) via ${device.connectionType.name}');
    setState(() {
      _isConnecting = true;
      _connectingDevice = device;
      _statusText =
          'Connecting to ${device.name} (${device.connectionType.name.toUpperCase()})...';
    });
    LedgerConnection? tempConnection;
    const connectionTimeout = Duration(seconds: 30);
    int attempt = 0;

    while (attempt < retries) {
      try {
        debugPrint(
            '[Connect] Calling ${device.connectionType.name}.connect() with ${connectionTimeout.inSeconds}s timeout... (Attempt ${attempt + 1} of $retries)');
        if (device.connectionType == ConnectionType.ble && _ledgerBle != null) {
          tempConnection = await _ledgerBle!.connect(device).timeout(
            connectionTimeout,
            onTimeout: () {
              debugPrint('[Connect] BLE connection timed out.');
              throw TimeoutException(
                  'Connection timed out after ${connectionTimeout.inSeconds} seconds');
            },
          );
        } else if (device.connectionType == ConnectionType.usb &&
            _ledgerUsb != null) {
          tempConnection = await _ledgerUsb!.connect(device).timeout(
            connectionTimeout,
            onTimeout: () {
              debugPrint('[Connect] USB connection timed out.');
              throw TimeoutException(
                  'Connection timed out after ${connectionTimeout.inSeconds} seconds');
            },
          );
        } else {
          throw Exception('Appropriate Ledger interface not available.');
        }
        debugPrint(
            '[Connect] Connection call successful for ${device.id}. Connection object present:');
        if (!mounted) {
          debugPrint(
              '[Connect] Widget unmounted after connection success, disconnecting.');
          await tempConnection.disconnect().catchError((e) => debugPrint(
              '[Connect] Error disconnecting after widget disposed: $e'));
          return;
        }
        _ledgerConnection = tempConnection;
        setState(() {
          debugPrint('[Connect] Setting state to connected.');
          _statusText = 'Successfully connected to ${device.name}!';
        });
        Navigator.of(context).pushNamed(
          '/net_setup',
          arguments: {
            'ledger': device,
          },
        );
        debugPrint('[Connect] Setting up disconnect listener for ${device.id}');
        _listenForDisconnection(device.id);
        debugPrint('[Connect] Disconnect listener setup initiated.');
        return;
      } on TimeoutException catch (e) {
        debugPrint('[Connect] TimeoutException caught: ${e.message}');
        attempt++;
        if (attempt >= retries) {
          if (!mounted) return;
          setState(() {
            _statusText =
                'Connection Failed: Timed out after $attempt attempts';
            _ledgerConnection = null;
          });
          _showErrorDialog('Connection Failed',
              'Connection timed out after $attempt attempts. Please ensure the device is unlocked and try again.');
        } else {
          debugPrint(
              '[Connect] Retrying connection (attempt ${attempt + 1} of $retries)');
          await Future.delayed(const Duration(milliseconds: 500));
        }
      } on LedgerException catch (e) {
        debugPrint('[Connect] LedgerException caught: $e');
        if (!mounted) return;
        setState(() {
          _statusText = 'Connection Failed: $e';
          _ledgerConnection = null;
        });
        _showErrorDialog('Connection Failed', 'Ledger Error: $e');
        return;
      } catch (e, s) {
        debugPrint('[Connect] Generic Exception caught: $e\n$s');
        if (!mounted) return;
        setState(() {
          _statusText = 'Connection Failed: $e';
          _ledgerConnection = null;
        });
        _showErrorDialog('Connection Failed',
            'Could not connect to ${device.name}.\nError: $e');
        return;
      } finally {
        if (mounted && attempt >= retries) {
          setState(() {
            _isConnecting = false;
            _connectingDevice = null;
          });
        }
      }
    }
  }

  void _listenForDisconnection(String deviceId) {
    _disconnectionSubscription?.cancel();
    _disconnectionSubscription = null;
    final manager = (_ledgerConnection?.connectionType == ConnectionType.ble)
        ? _ledgerBle
        : _ledgerUsb;
    if (manager == null || _ledgerConnection == null) {
      debugPrint(
          "[Disconnect Listener] Cannot listen: Manager or connection is null.");
      return;
    }
    debugPrint("[Disconnect Listener] Setting up listener for $deviceId");
    try {
      _disconnectionSubscription =
          manager.deviceStateChanges(deviceId).listen((state) {
        debugPrint("[Disconnect Listener] State changed for $deviceId: $state");
        bool isDisconnected = false;
        if (manager == _ledgerBle) {
          isDisconnected = state == BleConnectionState.disconnected;
        }
        if (isDisconnected &&
            mounted &&
            _ledgerConnection?.device.id == deviceId) {
          debugPrint(
              '[Disconnect Listener] Device $deviceId disconnected externally.');
          _handleDisconnectionUI('Device disconnected.');
        }
      }, onError: (e) {
        debugPrint('[Disconnect Listener] Error in stream for $deviceId: $e');
        if (mounted) {}
      }, onDone: () {
        debugPrint('[Disconnect Listener] Stream done for $deviceId.');
        if (mounted && _ledgerConnection?.device.id == deviceId) {
          _handleDisconnectionUI('Listener stopped.');
        }
      });
    } catch (e) {
      debugPrint(
          "[Disconnect Listener] Error setting up listener for $deviceId: $e");
      if (mounted) {
        setState(() {
          if (_ledgerConnection != null) {
            _statusText = 'Failed to monitor disconnects.';
          }
        });
      }
    }
  }

  Future<void> _disconnectDevice() async {
    debugPrint("[Disconnect] Initiating disconnection...");
    await _disconnectionSubscription?.cancel();
    _disconnectionSubscription = null;
    if (_ledgerConnection == null) {
      debugPrint("[Disconnect] No active connection to disconnect.");
      return;
    }
    final deviceName = _ledgerConnection?.device.name ?? 'Ledger';
    final deviceId = _ledgerConnection?.device.id ?? 'unknown';
    debugPrint("[Disconnect] Disconnecting from $deviceName ($deviceId)");
    final connectionToClose = _ledgerConnection;
    _ledgerConnection = null;
    if (mounted) {
      _handleDisconnectionUI('Disconnecting from $deviceName...');
    }
    try {
      await connectionToClose!.disconnect();
      debugPrint('[Disconnect] Successfully disconnected from $deviceName.');
      if (mounted) {
        _handleDisconnectionUI('Disconnected from $deviceName.');
      }
    } catch (e) {
      debugPrint('[Disconnect] Error during disconnect: $e');
      if (mounted) {
        _handleDisconnectionUI('Error disconnecting from $deviceName.');
      }
    }
  }

  void _handleDisconnectionUI(String statusMsg) {
    debugPrint(
        "[Disconnect Handler] Handling disconnection UI update. Message: $statusMsg");
    if (!mounted) return;
    _disconnectionSubscription?.cancel();
    _disconnectionSubscription = null;
    setState(() {
      _ledgerConnection = null;
      _isConnecting = false;
      _connectingDevice = null;
      _statusText = statusMsg;
    });
  }

  void _showErrorDialog(String title, String content,
      {bool showSettingsButton = false}) {
    if (!mounted) return;
    final theme = Provider.of<AppState>(context, listen: false).currentTheme;

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: theme.cardBackground,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
        title: Text(title, style: TextStyle(color: theme.textPrimary)),
        content: Text(content, style: TextStyle(color: theme.textSecondary)),
        actions: [
          TextButton(
            onPressed: Navigator.of(context).pop,
            child: Text('Cancel', style: TextStyle(color: theme.primaryPurple)),
          ),
          if (showSettingsButton)
            TextButton(
              onPressed: () async {
                Navigator.of(context).pop();
                await openAppSettings();
              },
              child: Text('Go to Settings',
                  style: TextStyle(color: theme.primaryPurple)),
            ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 20);
    final theme = Provider.of<AppState>(context).currentTheme;
    final bool isConnected = _ledgerConnection != null;
    final String pageTitle = "Connect Ledger";

    return Scaffold(
      backgroundColor: theme.background,
      body: SafeArea(
        child: Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 500),
            child: Column(
              children: [
                CustomAppBar(
                  title: pageTitle,
                  onBackPressed: () => Navigator.pop(context),
                  actionIcon: SvgPicture.asset(
                    'assets/icons/reload.svg',
                    width: 28,
                    height: 28,
                    colorFilter: ColorFilter.mode(
                      (_isScanning || _isConnecting)
                          ? theme.textSecondary.withAlpha(128)
                          : theme.textPrimary,
                      BlendMode.srcIn,
                    ),
                  ),
                  onActionPressed:
                      (_isScanning || _isConnecting) ? null : _startScanning,
                ),
                Padding(
                  padding: EdgeInsets.symmetric(
                      horizontal: adaptivePadding, vertical: 16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      Text(
                        _statusText,
                        textAlign: TextAlign.center,
                        style: TextStyle(
                          color: theme.textSecondary,
                          fontSize: 15,
                          height: 1.4,
                        ),
                      ),
                      const SizedBox(height: 12),
                      AnimatedOpacity(
                        opacity: (_isScanning || _isConnecting) ? 1.0 : 0.0,
                        duration: const Duration(milliseconds: 300),
                        child: SizedBox(
                          height: 4,
                          child: (_isScanning || _isConnecting)
                              ? LinearProgressIndicator(
                                  backgroundColor:
                                      theme.primaryPurple.withAlpha(51),
                                  valueColor: AlwaysStoppedAnimation<Color>(
                                      theme.primaryPurple),
                                )
                              : Container(),
                        ),
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 10),
                Expanded(
                  child: RefreshIndicator(
                    onRefresh: _startScanning,
                    color: theme.primaryPurple,
                    backgroundColor: theme.cardBackground,
                    child: _discoveredDevices.isEmpty &&
                            !_isScanning &&
                            !_isConnecting &&
                            !isConnected
                        ? LayoutBuilder(
                            builder: (context, constraints) =>
                                SingleChildScrollView(
                              physics: const AlwaysScrollableScrollPhysics(),
                              child: ConstrainedBox(
                                constraints: BoxConstraints(
                                    minHeight: constraints.maxHeight),
                                child: Center(
                                  child: Padding(
                                    padding: const EdgeInsets.symmetric(
                                        horizontal: 30.0),
                                    child: Text(
                                      'No devices found. Ensure Ledger is powered on, unlocked, and Bluetooth/USB is enabled.\nPull down or use refresh icon to scan again.',
                                      textAlign: TextAlign.center,
                                      style: TextStyle(
                                          color: theme.textSecondary,
                                          fontSize: 16,
                                          height: 1.5),
                                    ),
                                  ),
                                ),
                              ),
                            ),
                          )
                        : ListView.builder(
                            physics: const AlwaysScrollableScrollPhysics(),
                            padding: EdgeInsets.symmetric(
                                horizontal: adaptivePadding - 4),
                            itemCount: _discoveredDevices.length,
                            itemBuilder: (context, index) {
                              final device =
                                  _discoveredDevices.elementAt(index);
                              final bool isCurrentlyConnected = isConnected &&
                                  _ledgerConnection!.device.id == device.id;
                              final bool isCurrentlyConnecting =
                                  _isConnecting &&
                                      _connectingDevice?.id == device.id;
                              return Padding(
                                padding: const EdgeInsets.symmetric(
                                    vertical: 6, horizontal: 4),
                                child: LedgerCard(
                                  key: ValueKey(device.id),
                                  device: device,
                                  isConnected: isCurrentlyConnected,
                                  isConnecting: isCurrentlyConnecting,
                                  onTap: () => _connectToDevice(device),
                                ),
                              );
                            },
                          ),
                  ),
                ),
                if (isConnected)
                  Padding(
                    padding: EdgeInsets.all(adaptivePadding),
                    child: ElevatedButton.icon(
                      icon: SvgPicture.asset(
                        'assets/icons/disconnect.svg',
                        width: 20,
                        height: 20,
                        colorFilter:
                            ColorFilter.mode(theme.buttonText, BlendMode.srcIn),
                      ),
                      label: Text(
                          'Disconnect from ${_ledgerConnection?.device.name ?? 'Unknown'}',
                          style: TextStyle(color: theme.buttonText)),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: theme.danger,
                        padding: const EdgeInsets.symmetric(
                            horizontal: 24, vertical: 12),
                        shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(30.0)),
                        elevation: 3.0,
                      ),
                      onPressed: _disconnectDevice,
                    ),
                  ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

```

`lib/pages/locale.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/src/rust/api/settings.dart';
import 'package:zilpay/state/app_state.dart';
import '../theme/app_theme.dart';
import '../components/custom_app_bar.dart';
import 'package:zilpay/l10n/app_localizations.dart';

class Language {
  final String code;
  final String name;
  final String localName;

  Language(this.code, this.name, this.localName);
}

class LanguagePage extends StatefulWidget {
  const LanguagePage({super.key});

  @override
  State<LanguagePage> createState() => _LanguagePageState();
}

class _LanguagePageState extends State<LanguagePage> {
  final List<Language> languages = [];

  String selectedLanguage = 'system';
  bool vibrateEnabled = true;

  @override
  void initState() {
    super.initState();
    final _appState = Provider.of<AppState>(context, listen: false);

    if (_appState.state.locale != null) {
      setState(() {
        selectedLanguage = _appState.state.locale!;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;
    final l10n = AppLocalizations.of(context)!;

    languages.clear();
    languages.addAll([
      Language('system', 'System', ""),
      Language('ru', 'Russian', "Русский"),
      Language('en', 'English', "English"),
      Language('ja', 'Japanese', "日本語"),
      Language('zh', 'Chinese', "中文"),
    ]);

    return Scaffold(
      backgroundColor: theme.background,
      body: SafeArea(
        child: Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 480),
            child: Column(
              children: [
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: CustomAppBar(
                    title: l10n.languagePageTitle,
                    onBackPressed: () => Navigator.pop(context),
                  ),
                ),
                Expanded(
                  child: ListView.builder(
                    physics: const BouncingScrollPhysics(),
                    itemCount: languages.length,
                    itemBuilder: (context, index) {
                      final language = languages[index];
                      final isSelected = language.code == selectedLanguage;
                      final isLastItem = index == languages.length - 1;

                      return _buildLanguageItem(
                        theme,
                        language,
                        isSelected,
                        isLastItem,
                        onTap: () async {
                          await setDefaultLocale(locale: language.code);
                          setState(() {
                            selectedLanguage = language.code;
                          });

                          await appState.syncData();
                        },
                      );
                    },
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildLanguageItem(
    AppTheme theme,
    Language language,
    bool isSelected,
    bool isLastItem, {
    required VoidCallback onTap,
  }) {
    return GestureDetector(
      behavior: HitTestBehavior.opaque,
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        decoration: BoxDecoration(
          border: !isLastItem
              ? Border(
                  bottom: BorderSide(
                    color: theme.textSecondary.withValues(alpha: 0.1),
                    width: 1,
                  ),
                )
              : null,
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              language.name,
              style: TextStyle(
                color: theme.textPrimary,
                fontSize: 16,
                fontWeight: FontWeight.w500,
              ),
            ),
            const SizedBox(height: 4),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Expanded(
                  child: Text(
                    language.localName,
                    style: TextStyle(
                      color: theme.textSecondary,
                      fontSize: 14,
                    ),
                  ),
                ),
                SizedBox(
                  width: 24,
                  height: 24,
                  child: isSelected
                      ? SvgPicture.asset(
                          'assets/icons/ok.svg',
                          colorFilter: ColorFilter.mode(
                            theme.primaryPurple,
                            BlendMode.srcIn,
                          ),
                        )
                      : null,
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}

```

`lib/pages/login_page.dart`:

```dart
import 'dart:async';

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:flutter_svg/svg.dart';
import 'package:zilpay/src/rust/api/auth.dart';
import 'package:zilpay/src/rust/models/wallet.dart';
import 'package:zilpay/l10n/app_localizations.dart';

import '../components/load_button.dart';
import '../components/smart_input.dart';
import '../components/wallet_option.dart';
import '../mixins/adaptive_size.dart';
import '../mixins/wallet_type.dart';
import '../services/auth_guard.dart';
import '../services/biometric_service.dart';
import '../services/device.dart';
import '../state/app_state.dart';

class LoginPage extends StatefulWidget {
  const LoginPage({super.key});

  @override
  State<LoginPage> createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final _passwordController = TextEditingController();
  final _passwordInputKey = GlobalKey<SmartInputState>();
  final _btnController = RoundedLoadingButtonController();
  final AuthService _authService = AuthService();

  late final AuthGuard _authGuard;
  late final AppState _appState;

  bool _obscurePassword = true;
  bool _obscureButton = true;
  int _selectedWallet = -1;

  @override
  void initState() {
    super.initState();
    _initializeServices();
  }

  void _initializeServices() {
    _authGuard = Provider.of<AuthGuard>(context, listen: false);
    _appState = Provider.of<AppState>(context, listen: false);
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();

    if (_appState.wallets.isEmpty) {
      setState(() => _selectedWallet = -1);
      Navigator.of(context).pushNamed('/initial');
    }
  }

  @override
  void dispose() {
    _passwordController.dispose();
    _btnController.dispose();
    super.dispose();
  }

  void _navigateToHome() {
    _appState.setSelectedWallet(_selectedWallet);
    Navigator.of(context).pushNamed('/');
  }

  void _navigateToNewWallet() {
    Navigator.pushNamed(context, '/new_wallet_options');
  }

  Future<bool> _authenticateWithSession(
    String session,
    int walletIndex,
    List<String> identifiers,
  ) async {
    try {
      bool unlocked = await tryUnlockWithSession(
        sessionCipher: session,
        walletIndex: BigInt.from(walletIndex),
        identifiers: identifiers,
      );

      if (unlocked) {
        await _appState.syncData();
        _authGuard.setEnabled(true);
        return true;
      }
    } catch (e) {
      debugPrint('Session authentication error: $e');
    }
    return false;
  }

  Future<bool> _authenticateWithPassword(
    String password,
    int walletIndex,
    List<String> identifiers,
  ) async {
    try {
      bool unlocked = await tryUnlockWithPassword(
        password: password,
        walletIndex: BigInt.from(walletIndex),
        identifiers: identifiers,
      );

      if (unlocked) {
        await _appState.syncData();
        _authGuard.setEnabled(true);
        return true;
      }
    } catch (e) {
      debugPrint('Password authentication error: $e');
    }
    return false;
  }

  Future<bool> _authenticateWithBiometrics() async {
    try {
      return await _authService.authenticate(
        allowPinCode: true,
        reason: AppLocalizations.of(context)!.loginPageBiometricReason,
      );
    } catch (e) {
      debugPrint('Biometric authentication error: $e');
      return false;
    }
  }

  Future<void> _handleAuthentication() async {
    if (_selectedWallet == -1 || _appState.wallets.isEmpty) return;

    final wallet = _appState.wallets[_selectedWallet];
    final device = DeviceInfoService();
    final identifiers = await device.getDeviceIdentifiers();

    _btnController.start();

    try {
      bool isAuthenticated = false;

      if (wallet.walletType.contains(WalletType.ledger.name)) {
        final session =
            await _authGuard.getSession(sessionKey: wallet.walletAddress);
        isAuthenticated = await _authenticateWithSession(
          session ?? "",
          _selectedWallet,
          identifiers,
        );
      } else if (wallet.authType != AuthMethod.none.name &&
          _passwordController.text.isEmpty) {
        final biometricAuth = await _authenticateWithBiometrics();
        if (biometricAuth) {
          final session =
              await _authGuard.getSession(sessionKey: wallet.walletAddress);
          isAuthenticated = await _authenticateWithSession(
            session ?? "",
            _selectedWallet,
            identifiers,
          );
        }
      } else if (_passwordController.text.isNotEmpty) {
        isAuthenticated = await _authenticateWithPassword(
          _passwordController.text,
          _selectedWallet,
          identifiers,
        );
      } else {
        if (mounted) {
          _btnController.reset();
        }
        return;
      }

      if (isAuthenticated) {
        if (mounted) {
          _btnController.reset();
        }
        _navigateToHome();
      } else {
        if (mounted) {
          _handleAuthenticationError();
        }
      }

      await _appState.startTrackHistoryWorker();
    } catch (e) {
      debugPrint("unlock $e");
      if (mounted) {
        _handleAuthenticationError();
      }
    }
  }

  void _handleAuthenticationError() {
    if (mounted) {
      _btnController.error();
      if (_passwordController.text.isNotEmpty) {
        _passwordInputKey.currentState?.shake();
      }
      Timer(const Duration(seconds: 1), () {
        if (mounted) {
          _btnController.reset();
        }
      });
    }
  }

  Widget _buildBackground(Size screenSize) {
    return Positioned(
      child: SizedBox(
        height: screenSize.height * 0.6,
        child: Transform.scale(
          scale: 1.4,
          child: SvgPicture.asset(
            'assets/imgs/zilpay.svg',
            fit: BoxFit.cover,
            width: screenSize.width,
            height: screenSize.height * 0.6,
          ),
        ),
      ),
    );
  }

  Widget _buildHeader(AppState theme) {
    return Padding(
      padding: EdgeInsets.all(AdaptiveSize.getAdaptivePadding(context, 16)),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          const Spacer(),
          IconButton(
            onPressed: _navigateToNewWallet,
            icon: SvgPicture.asset(
              'assets/icons/plus.svg',
              width: 32,
              height: 32,
              colorFilter: ColorFilter.mode(
                theme.currentTheme.textPrimary,
                BlendMode.srcIn,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildWalletList(AppState theme) {
    return Expanded(
      child: ListView.builder(
        physics: const BouncingScrollPhysics(),
        padding: EdgeInsets.symmetric(
          horizontal: AdaptiveSize.getAdaptivePadding(context, 16),
        ),
        itemCount: _appState.wallets.length,
        itemBuilder: (context, index) => _buildWalletItem(index, theme),
      ),
    );
  }

  Widget _buildWalletItem(int index, AppState theme) {
    if (index >= _appState.wallets.length) return const SizedBox.shrink();

    final wallet = _appState.wallets[index];
    final l10n = AppLocalizations.of(context)!;

    if (!_obscureButton && _selectedWallet != index) {
      return const SizedBox.shrink();
    }

    return Padding(
      padding: EdgeInsets.only(top: index > 0 ? 4 : 0),
      child: WalletOption(
        title: wallet.walletName.isEmpty
            ? l10n.loginPageWalletTitle(index + 1)
            : wallet.walletName,
        walletIndex: index,
        address: wallet.walletAddress,
        isSelected: _selectedWallet == index,
        padding: const EdgeInsets.all(16),
        onTap: () {
          setState(() => _selectedWallet = index);
          _handleAuthentication();
        },
        icons: _getWalletIcons(wallet),
      ),
    );
  }

  List<String> _getWalletIcons(WalletInfo wallet) {
    return [
      if (wallet.walletType.contains(WalletType.ledger.name))
        'assets/icons/ledger.svg',
      if (wallet.walletType.contains(WalletType.SecretPhrase.name))
        'assets/icons/document.svg',
      if (wallet.walletType.contains(WalletType.SecretKey.name))
        'assets/icons/bincode.svg',
      if (wallet.authType == AuthMethod.faceId.name) 'assets/icons/face_id.svg',
      if (wallet.authType == AuthMethod.fingerprint.name)
        'assets/icons/fingerprint.svg',
      if (wallet.authType == AuthMethod.biometric.name)
        'assets/icons/biometric.svg',
      if (wallet.authType == AuthMethod.pinCode.name) 'assets/icons/pin.svg',
    ];
  }

  Widget _buildLoginForm(AppState theme) {
    final isLedgerWallet = _selectedWallet != -1 &&
        _appState.wallets.isNotEmpty &&
        _appState.wallets[_selectedWallet].walletType
            .contains(WalletType.ledger.name);
    final l10n = AppLocalizations.of(context)!;

    return Padding(
      padding: EdgeInsets.all(AdaptiveSize.getAdaptivePadding(context, 16)),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          SmartInput(
            key: _passwordInputKey,
            controller: _passwordController,
            hint: l10n.loginPagePasswordHint,
            fontSize: 18,
            height: 50,
            disabled: _selectedWallet == -1 || isLedgerWallet,
            padding: const EdgeInsets.symmetric(horizontal: 20),
            focusedBorderColor: theme.currentTheme.primaryPurple,
            obscureText: _obscurePassword,
            onFocusChanged: (isFocused) =>
                setState(() => _obscureButton = !isFocused),
            rightIconPath: _obscurePassword
                ? "assets/icons/close_eye.svg"
                : "assets/icons/open_eye.svg",
            onRightIconTap: () =>
                setState(() => _obscurePassword = !_obscurePassword),
          ),
          const SizedBox(height: 8),
          if (_obscureButton) _buildUnlockButton(theme),
        ],
      ),
    );
  }

  Widget _buildUnlockButton(AppState appState) {
    final theme = appState.currentTheme;
    final l10n = AppLocalizations.of(context)!;

    return SizedBox(
      width: double.infinity,
      child: RoundedLoadingButton(
        color: theme.primaryPurple,
        valueColor: theme.buttonText,
        controller: _btnController,
        onPressed: _handleAuthentication,
        child: Text(
          l10n.loginPageUnlockButton,
          style: TextStyle(
            color: theme.buttonText,
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final screenSize = MediaQuery.of(context).size;
    final l10n = AppLocalizations.of(context)!;

    if (appState.wallets.isEmpty) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        Navigator.of(context).pushReplacementNamed('/initial');
      });
      return const Scaffold(
        body: Center(
          child: CircularProgressIndicator(),
        ),
      );
    }

    return Scaffold(
      backgroundColor: appState.currentTheme.background,
      body: Stack(
        children: [
          _buildBackground(screenSize),
          SafeArea(
            child: Center(
              child: ConstrainedBox(
                constraints: const BoxConstraints(maxWidth: 480),
                child: Column(
                  children: [
                    _buildHeader(appState),
                    Text(
                      l10n.loginPageWelcomeBack,
                      style: TextStyle(
                        color: appState.currentTheme.textPrimary,
                        fontSize: 32,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 16),
                    _buildWalletList(appState),
                    _buildLoginForm(appState),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}

```

`lib/pages/main_page.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../components/bottom_nav_bar.dart';
import './home_page.dart';
import './history_page.dart';
import './browser_page.dart';

class MainPage extends StatefulWidget {
  const MainPage({super.key});

  @override
  State<MainPage> createState() => MainPageState();
}

class MainPageState extends State<MainPage> {
  int _selectedIndex = 0;

  static final List<Widget> _pages = <Widget>[
    const HomePage(),
    const HistoryPage(),
    // const ChatPage(),
    const BrowserPage()
  ];

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();

    final args =
        ModalRoute.of(context)?.settings.arguments as Map<String, dynamic>?;
    final selectedIndex = args?['selectedIndex'] as int?;

    if (selectedIndex != null) {
      _selectedIndex = selectedIndex;
    }
  }

  void _onItemTapped(int index) {
    if (index == _selectedIndex) {
      return;
    }

    Navigator.push(
      context,
      PageRouteBuilder<MainPage>(
        settings: RouteSettings(
          name: '/',
          arguments: {'selectedIndex': index},
        ),
        pageBuilder: (_, __, ___) => const MainPage(),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final Color effectiveBgColor = Theme.of(context).scaffoldBackgroundColor;
    final Brightness backgroundBrightness =
        ThemeData.estimateBrightnessForColor(effectiveBgColor);
    final Brightness statusBarIconBrightness =
        backgroundBrightness == Brightness.light
            ? Brightness.dark
            : Brightness.light;
    final Brightness statusBarBrightness = backgroundBrightness;

    final SystemUiOverlayStyle overlayStyle = SystemUiOverlayStyle(
      statusBarColor: Colors.transparent,
      statusBarIconBrightness: statusBarIconBrightness,
      statusBarBrightness: statusBarBrightness,
    );

    return Scaffold(
      extendBody: true,
      body: _pages.elementAt(_selectedIndex),
      appBar: AppBar(
        elevation: 0,
        backgroundColor: Colors.transparent,
        automaticallyImplyLeading: false,
        toolbarHeight: 0,
        systemOverlayStyle: overlayStyle,
      ),
      bottomNavigationBar: CustomBottomNavigationBar(
        items: [
          CustomBottomNavigationBarItem(iconPath: 'assets/icons/wallet.svg'),
          CustomBottomNavigationBarItem(iconPath: 'assets/icons/history.svg'),
          // CustomBottomNavigationBarItem(iconPath: 'assets/icons/ai.svg'),
          CustomBottomNavigationBarItem(iconPath: 'assets/icons/nav.svg'),
        ],
        currentIndex: _selectedIndex,
        onTap: _onItemTapped,
      ),
    );
  }
}

```

`lib/pages/manage_tokens.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:provider/provider.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:zilpay/components/custom_app_bar.dart';
import 'package:zilpay/components/enable_card.dart';
import 'package:zilpay/components/image_cache.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/mixins/preprocess_url.dart';
import 'package:zilpay/src/rust/api/token.dart';
import 'package:zilpay/src/rust/models/ftoken.dart';
import 'package:zilpay/src/rust/models/provider.dart';
import 'package:zilpay/state/app_state.dart';
import 'dart:convert';
import 'dart:async';

extension FTokenInfoJsonExtension on FTokenInfo {
  static FTokenInfo fromJson(Map<String, dynamic> json) {
    return FTokenInfo(
      name: json['name'] as String,
      symbol: json['symbol'] as String,
      decimals: json['decimals'] as int,
      addr: json['addr'] as String,
      addrType: json['addrType'] as int,
      logo: json['logo'] as String?,
      balances: {},
      rate: json['rate'] as double,
      default_: json['default_'] as bool,
      native: json['native'] as bool,
      chainHash: BigInt.parse(json['chainHash'] as String),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'name': name,
      'symbol': symbol,
      'decimals': decimals,
      'addr': addr,
      'addrType': addrType,
      'logo': logo,
      'balances': {},
      'rate': rate,
      'default_': default_,
      'native': native,
      'chainHash': chainHash.toString(),
    };
  }
}

class ManageTokensPage extends StatefulWidget {
  const ManageTokensPage({super.key});

  @override
  State<ManageTokensPage> createState() => _ManageTokensPageState();
}

class _ManageTokensPageState extends State<ManageTokensPage> {
  final TextEditingController _searchController = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  String _searchQuery = '';
  List<FTokenInfo> _allTokens = [];
  bool _isLoading = false;
  Timer? _debounce;

  bool _canFetchApiTokens(AppState appState) {
    final chain = appState.chain;
    return chain != null && chain.testnet != true;
  }

  @override
  void initState() {
    super.initState();
    _scrollController.addListener(() {
      if (_scrollController.position.pixels ==
          _scrollController.position.maxScrollExtent) {}
    });
    _initializeTokens();
  }

  @override
  void dispose() {
    _searchController.dispose();
    _scrollController.dispose();
    _debounce?.cancel();
    super.dispose();
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    final appState = Provider.of<AppState>(context);
    if (_canFetchApiTokens(appState)) {
      _initializeTokens();
    }
  }

  void _initializeTokens() {
    final appState = Provider.of<AppState>(context, listen: false);
    final walletTokens = appState.wallet?.tokens ?? [];
    setState(() {
      _allTokens = walletTokens;
    });
    if (_canFetchApiTokens(appState)) {
      _loadCachedTokens();
    }
  }

  Future<void> _loadCachedTokens() async {
    final appState = Provider.of<AppState>(context, listen: false);
    final chain = appState.chain;
    if (chain == null ||
        (chain.slip44 == 313 && appState.account?.addrType == 1)) return;
    final cacheKey = _getCacheKey(chain);
    final prefs = await SharedPreferences.getInstance();
    final cachedData = prefs.getString(cacheKey);
    if (cachedData != null) {
      final List<dynamic> decoded = jsonDecode(cachedData);
      final cachedTokens = decoded
          .map((item) => FTokenInfoJsonExtension.fromJson(item))
          .toList();
      _updateAllTokens(cachedTokens);
    } else {
      _fetchApiTokens();
    }
  }

  Future<void> _fetchApiTokens() async {
    final appState = Provider.of<AppState>(context, listen: false);

    if (appState.wallet?.settings.tokensListFetcher != true) {
      return;
    }

    setState(() => _isLoading = true);
    final chain = appState.chain;
    if (chain == null) return;
    String logo =
        "https://raw.githubusercontent.com/zilpay/tokens_meta/refs/heads/master/ft/${chain.shortName}/%{contract_address}%/%{dark,light}%.webp";

    try {
      List<FTokenInfo> apiTokens;
      if (chain.slip44 == 313 && appState.account?.addrType == 0) {
        apiTokens = await fetchTokensListZilliqaLegacy(limit: 200, offset: 0);
        apiTokens = apiTokens.map((token) {
          return FTokenInfo(
            name: token.name,
            symbol: token.symbol,
            decimals: token.decimals,
            addr: token.addr,
            addrType: token.addrType,
            logo: logo,
            balances: token.balances,
            rate: 0,
            default_: false,
            native: false,
            chainHash: chain.chainHash,
          );
        }).toList();
      } else if (chain.slip44 == 60 && appState.account?.addrType == 1) {
        apiTokens = await fetchTokensEvmList(
          chainName: chain.shortName,
          chainId: chain.chainId.toInt(),
        );
        apiTokens = apiTokens.map((token) {
          return FTokenInfo(
            name: token.name,
            symbol: token.symbol,
            decimals: token.decimals,
            addr: token.addr,
            addrType: token.addrType,
            logo: logo,
            balances: token.balances,
            rate: 0,
            default_: false,
            native: false,
            chainHash: chain.chainHash,
          );
        }).toList();
      } else {
        return;
      }

      _updateAllTokens(apiTokens);
      final prefs = await SharedPreferences.getInstance();
      final cacheKey = _getCacheKey(chain);
      final encoded =
          jsonEncode(apiTokens.map((token) => token.toJson()).toList());
      await prefs.setString(cacheKey, encoded);
    } catch (e) {
      debugPrint("Fetch tokens error: $e");
    } finally {
      setState(() => _isLoading = false);
    }
  }

  String _getCacheKey(NetworkConfigInfo chain) {
    if (chain.slip44 == 313) {
      return 'legacy_zilliqa_tokens_cache_${chain.shortName}';
    } else {
      return 'evm_tokens_cache_${chain.shortName}';
    }
  }

  void _updateAllTokens(List<FTokenInfo> additionalTokens) async {
    final appState = Provider.of<AppState>(context, listen: false);
    final walletTokens = appState.wallet?.tokens ?? [];
    final uniqueTokens = <String, FTokenInfo>{};
    await Future.microtask(() {
      for (var token in walletTokens) {
        uniqueTokens[token.addr.toLowerCase()] = token;
      }
      for (var token in additionalTokens) {
        uniqueTokens[token.addr.toLowerCase()] = token;
      }
    });
    setState(() {
      _allTokens = uniqueTokens.values.toList();
    });
  }

  Future<void> _fetchTokenByAddress(String address) async {
    final appState = Provider.of<AppState>(context, listen: false);
    if (_allTokens
        .any((token) => token.addr.toLowerCase() == address.toLowerCase())) {
      return;
    }
    setState(() => _isLoading = true);
    try {
      final meta = await fetchTokenMeta(
        addr: address,
        walletIndex: BigInt.from(appState.selectedWallet),
      );
      setState(() {
        _allTokens.add(meta);
      });
    } catch (e) {
      debugPrint("Fetch token meta error: $e");
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);

    final filteredTokens = _allTokens.where((token) {
      final query = _searchQuery.toLowerCase();
      return token.name.toLowerCase().contains(query) ||
          token.symbol.toLowerCase().contains(query) ||
          token.addr.toLowerCase().contains(query);
    }).toList();

    return Scaffold(
      backgroundColor: theme.background,
      body: SafeArea(
        child: Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 480),
            child: Column(
              children: [
                Padding(
                  padding: EdgeInsets.symmetric(horizontal: adaptivePadding),
                  child: CustomAppBar(
                    title: "Tokens",
                    onBackPressed: () => Navigator.pop(context),
                  ),
                ),
                Padding(
                  padding: EdgeInsets.symmetric(
                      horizontal: adaptivePadding, vertical: 16),
                  child: SmartInput(
                    controller: _searchController,
                    hint: "Search tokens",
                    leftIconPath: 'assets/icons/search.svg',
                    rightIconPath: 'assets/icons/close.svg',
                    onChanged: (value) {
                      setState(() => _searchQuery = value);
                      if (_debounce?.isActive ?? false) _debounce!.cancel();
                      _debounce = Timer(const Duration(milliseconds: 500), () {
                        if (value.length == 42) {
                          _fetchTokenByAddress(value);
                        }
                      });
                    },
                    onRightIconTap: () {
                      _searchController.text = "";
                      setState(() => _searchQuery = "");
                    },
                    borderColor: theme.textPrimary,
                    focusedBorderColor: theme.primaryPurple,
                    height: 48,
                    fontSize: 16,
                    padding: const EdgeInsets.symmetric(horizontal: 16),
                    autofocus: false,
                  ),
                ),
                Container(
                  width: 36,
                  height: 4,
                  margin: const EdgeInsets.symmetric(vertical: 8),
                  decoration: BoxDecoration(
                    color: theme.modalBorder,
                    borderRadius: BorderRadius.circular(2),
                  ),
                ),
                Expanded(
                  child: RefreshIndicator(
                    onRefresh: _fetchApiTokens,
                    child: CustomScrollView(
                      controller: _scrollController,
                      physics: const AlwaysScrollableScrollPhysics(),
                      slivers: [
                        if (filteredTokens.isEmpty)
                          SliverToBoxAdapter(
                            child: Center(child: Text("No tokens found")),
                          )
                        else
                          SliverPadding(
                            padding: EdgeInsets.symmetric(
                                horizontal: adaptivePadding),
                            sliver: SliverList(
                              delegate: SliverChildBuilderDelegate(
                                (context, index) {
                                  final token = filteredTokens[index];
                                  final isEnabled = appState.wallet?.tokens
                                          .any((t) => t.addr == token.addr) ??
                                      false;
                                  return EnableCard(
                                    title: token.symbol,
                                    name: token.name,
                                    iconWidget: AsyncImage(
                                      url: processTokenLogo(
                                        token: token,
                                        shortName:
                                            appState.chain?.shortName ?? "",
                                        theme: theme.value,
                                      ),
                                      width: 32.0,
                                      height: 32.0,
                                      fit: BoxFit.contain,
                                      errorWidget: SvgPicture.asset(
                                        "assets/icons/warning.svg",
                                        width: 32.0,
                                        height: 32.0,
                                        colorFilter: ColorFilter.mode(
                                          theme.warning,
                                          BlendMode.srcIn,
                                        ),
                                      ),
                                      loadingWidget: const Center(
                                        child: CircularProgressIndicator(
                                          strokeWidth: 2,
                                        ),
                                      ),
                                    ),
                                    isDefault: token.native,
                                    isEnabled: isEnabled,
                                    onToggle: (value) async {
                                      try {
                                        if (value) {
                                          await addFtoken(
                                            meta: token,
                                            walletIndex: BigInt.from(
                                                appState.selectedWallet),
                                          );
                                        } else {
                                          await rmFtoken(
                                            walletIndex: BigInt.from(
                                                appState.selectedWallet),
                                            tokenAddress: token.addr,
                                          );
                                        }
                                        await appState.syncData();
                                      } catch (e) {
                                        debugPrint("Toggle token error: $e");
                                      }
                                    },
                                  );
                                },
                                childCount: filteredTokens.length,
                              ),
                            ),
                          ),
                        if (_isLoading)
                          SliverToBoxAdapter(
                            child: LinearProgressIndicator(),
                          ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

```

`lib/pages/network.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/network_card.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/mixins/preprocess_url.dart';
import 'package:zilpay/modals/chain_config_edit.dart';
import 'package:zilpay/src/rust/api/provider.dart';
import 'package:zilpay/src/rust/models/provider.dart';
import 'package:zilpay/src/rust/models/wallet.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/theme/app_theme.dart';
import '../components/custom_app_bar.dart';
import 'package:zilpay/l10n/app_localizations.dart';

class NetworkPage extends StatefulWidget {
  const NetworkPage({super.key});

  @override
  State<NetworkPage> createState() => _NetworkPageState();
}

class _NetworkPageState extends State<NetworkPage> {
  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';
  List<NetworkItem> addedNetworks = [];
  List<NetworkItem> potentialNetworks = [];
  bool isLoading = true;
  String? errorMessage;
  String? _shortName;
  bool isTestnet = false;

  @override
  void initState() {
    super.initState();
    _loadNetworks();
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    final AppState appState = Provider.of<AppState>(context, listen: false);
    if (appState.chain != null && (appState.chain?.testnet ?? false)) {
      setState(() {
        isTestnet = true;
      });
    }
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  String _createNetworkIdentifier(NetworkConfigInfo network) {
    final chainId = network.chainId.toString();
    final slip44 = network.slip44.toString();
    final name = network.name.toLowerCase();
    return '$slip44|$chainId|$name';
  }

  Future<void> _loadNetworks() async {
    setState(() {
      isLoading = true;
      errorMessage = null;
    });

    try {
      final storedProviders = await getProviders();
      final String mainnetJsonData =
          await rootBundle.loadString('assets/chains/mainnet-chains.json');
      final String testnetJsonData =
          await rootBundle.loadString('assets/chains/testnet-chains.json');
      final List<NetworkConfigInfo> mainnetChains =
          await getChainsProvidersFromJson(jsonStr: mainnetJsonData);
      final List<NetworkConfigInfo> testnetChains =
          await getChainsProvidersFromJson(jsonStr: testnetJsonData);

      setState(() {
        addedNetworks.clear();
        potentialNetworks.clear();

        addedNetworks.addAll(storedProviders.map(
            (provider) => NetworkItem(configInfo: provider, isAdded: true)));

        final Set<String> addedNetworkIds = {};
        final Set<String> addedNetworkNamesLower = {};

        for (final network in addedNetworks) {
          addedNetworkIds.add(_createNetworkIdentifier(network.configInfo));
          addedNetworkNamesLower.add(network.configInfo.name.toLowerCase());
        }

        final List<NetworkItem> potentialMainnetItems = [];
        for (final chain in mainnetChains) {
          final networkId = _createNetworkIdentifier(chain);
          final nameLower = chain.name.toLowerCase();

          if (!addedNetworkIds.contains(networkId) &&
              !addedNetworkNamesLower.contains(nameLower)) {
            potentialMainnetItems
                .add(NetworkItem(configInfo: chain, isAdded: false));
          }
        }

        final List<NetworkItem> potentialTestnetItems = [];
        for (final chain in testnetChains) {
          final networkId = _createNetworkIdentifier(chain);
          final nameLower = chain.name.toLowerCase();

          if (!addedNetworkIds.contains(networkId) &&
              !addedNetworkNamesLower.contains(nameLower)) {
            potentialTestnetItems
                .add(NetworkItem(configInfo: chain, isAdded: false));
          }
        }

        potentialNetworks.clear();
        potentialNetworks
            .addAll([...potentialMainnetItems, ...potentialTestnetItems]);

        isLoading = false;
        if (_shortName != null) _trySelectNetworkByShortName();
      });
    } catch (e) {
      setState(() {
        isLoading = false;
        errorMessage =
            AppLocalizations.of(context)!.networkPageLoadError + '$e';
      });
    }
  }

  void _trySelectNetworkByShortName() {
    if (_shortName == null) return;

    int addedIndex = addedNetworks
        .indexWhere((network) => network.configInfo.name == _shortName);
    if (addedIndex >= 0) {
      _handleNetworkSelect(addedNetworks[addedIndex].configInfo);
      return;
    }

    int potentialIndex = potentialNetworks
        .indexWhere((network) => network.configInfo.name == _shortName);
    if (potentialIndex >= 0) {
      _handleNetworkSelect(potentialNetworks[potentialIndex].configInfo);
    }
  }

  List<NetworkItem> _getFilteredNetworks(List<NetworkItem> networks) {
    if (_searchQuery.isEmpty) return networks;
    return networks
        .where((network) => network.configInfo.name
            .toLowerCase()
            .contains(_searchQuery.toLowerCase()))
        .toList();
  }

  void _handleNetworkSelect(NetworkConfigInfo network) async {
    final appState = Provider.of<AppState>(context, listen: false);

    try {
      await selectAccountsChain(
        walletIndex: BigInt.from(appState.selectedWallet),
        chainHash: network.chainHash,
      );
    } catch (_) {}

    await appState.syncData();
  }

  Future<void> _handleAddNetwork(
      NetworkConfigInfo config, AppState state) async {
    try {
      await addProvider(providerConfig: config);
      await state.syncData();
      await _loadNetworks();
    } catch (e) {
      setState(() {
        errorMessage = AppLocalizations.of(context)!.networkPageAddError + '$e';
      });
    }
  }

  void _handleEditNetwork(NetworkConfigInfo config) {
    showChainInfoModal(
      context: context,
      networkConfig: config,
      onRemoved: () async {
        Navigator.of(context).pop();
        await _loadNetworks();
      },
    );
  }

  Widget _buildNetworkSection(
      String title,
      List<NetworkItem> networks,
      AppTheme theme,
      NetworkConfigInfo? chain,
      WalletInfo? wallet,
      bool isAvailableSection) {
    if (networks.isEmpty) return const SizedBox.shrink();
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(title,
            style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.w500,
                color: theme.textSecondary.withValues(alpha: 0.7))),
        const SizedBox(height: 16),
        ...networks.map((network) => NetworkCard(
              configInfo: network.configInfo,
              isAdded: network.isAdded,
              isDefault:
                  wallet?.defaultChainHash == network.configInfo.chainHash,
              isSelected: chain?.chainId == network.configInfo.chainId &&
                  chain?.slip44 == network.configInfo.slip44,
              // disabled: chain?.slip44 != network.configInfo.slip44,
              isTestnet: network.configInfo.testnet ?? false,
              iconUrl:
                  viewChain(network: network.configInfo, theme: theme.value),
              onNetworkSelect: _handleNetworkSelect,
              onNetworkEdit: _handleEditNetwork,
              onNetworkAdd: (config) => _handleAddNetwork(
                  config, Provider.of<AppState>(context, listen: false)),
            )),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;
    final chain = appState.chain;
    final wallet = appState.wallet;
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);
    final filteredAddedNetworks = _getFilteredNetworks(addedNetworks);
    final filteredPotentialNetworks = _getFilteredNetworks(potentialNetworks)
        .where((network) => isTestnet || !(network.configInfo.testnet ?? false))
        .toList();
    final l10n = AppLocalizations.of(context)!;

    return Scaffold(
      backgroundColor: theme.background,
      body: SafeArea(
        child: Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 480),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Padding(
                  padding: EdgeInsets.symmetric(
                    horizontal: adaptivePadding,
                  ),
                  child: CustomAppBar(
                    title: l10n.networkPageTitle,
                    onBackPressed: () => Navigator.pop(context),
                    actionWidget: Row(
                      children: [
                        Text(l10n.networkPageShowTestnet,
                            style: TextStyle(
                                color: theme.textSecondary, fontSize: 14)),
                        const SizedBox(width: 8),
                        Switch(
                            value: isTestnet,
                            onChanged: (value) => setState(() {
                                  isTestnet = value;
                                  _loadNetworks();
                                }),
                            activeColor: theme.primaryPurple),
                      ],
                    ),
                  ),
                ),
                Padding(
                  padding: EdgeInsets.symmetric(horizontal: adaptivePadding),
                  child: SmartInput(
                    controller: _searchController,
                    hint: l10n.networkPageSearchHint,
                    leftIconPath: 'assets/icons/search.svg',
                    onChanged: (value) => setState(() => _searchQuery = value),
                    borderColor: theme.textPrimary,
                    focusedBorderColor: theme.primaryPurple,
                    height: 48,
                    fontSize: 16,
                    padding: const EdgeInsets.symmetric(horizontal: 16),
                  ),
                ),
                if (errorMessage != null)
                  Padding(
                      padding: const EdgeInsets.all(16),
                      child: Text(errorMessage!,
                          style: TextStyle(color: theme.danger, fontSize: 14))),
                Expanded(
                  child: SingleChildScrollView(
                    physics: const BouncingScrollPhysics(),
                    padding: EdgeInsets.symmetric(
                        horizontal: adaptivePadding, vertical: 24),
                    child: Align(
                      alignment: Alignment.topLeft,
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          _buildNetworkSection(
                              l10n.networkPageAddedNetworks,
                              filteredAddedNetworks,
                              theme,
                              chain,
                              wallet,
                              false),
                          if (filteredAddedNetworks.isNotEmpty &&
                              filteredPotentialNetworks.isNotEmpty)
                            const SizedBox(height: 24),
                          _buildNetworkSection(
                              l10n.networkPageAvailableNetworks,
                              filteredPotentialNetworks,
                              theme,
                              chain,
                              wallet,
                              true),
                        ],
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class NetworkItem {
  final NetworkConfigInfo configInfo;
  final bool isAdded;

  NetworkItem({required this.configInfo, required this.isAdded});
}

```

`lib/pages/new_wallet_options.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:provider/provider.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:zilpay/l10n/app_localizations.dart';
import 'package:zilpay/state/app_state.dart';
import '../components/view_item.dart';

class AddWalletOptionsPage extends StatelessWidget {
  const AddWalletOptionsPage({super.key});

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<AppState>(context).currentTheme;

    final Color effectiveBgColor = Theme.of(context).scaffoldBackgroundColor;
    final Brightness backgroundBrightness =
        ThemeData.estimateBrightnessForColor(effectiveBgColor);
    final Brightness statusBarIconBrightness =
        backgroundBrightness == Brightness.light
            ? Brightness.dark
            : Brightness.light;
    final Brightness statusBarBrightness = backgroundBrightness;

    final SystemUiOverlayStyle overlayStyle = SystemUiOverlayStyle(
      statusBarColor: Colors.transparent,
      statusBarIconBrightness: statusBarIconBrightness,
      statusBarBrightness: statusBarBrightness,
    );

    return Scaffold(
      backgroundColor: theme.background,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: SvgPicture.asset(
            'assets/icons/back.svg',
            width: 24,
            height: 24,
            colorFilter: ColorFilter.mode(
              theme.secondaryPurple,
              BlendMode.srcIn,
            ),
          ),
          onPressed: () => Navigator.of(context).pop(),
        ),
        systemOverlayStyle: overlayStyle,
        title: Text(AppLocalizations.of(context)!.addWalletOptionsTitle,
            style: TextStyle(color: theme.textPrimary)),
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              WalletListItem(
                title: AppLocalizations.of(context)!
                    .addWalletOptionsNewWalletTitle,
                subtitle: AppLocalizations.of(context)!
                    .addWalletOptionsNewWalletSubtitle,
                icon: SvgPicture.asset(
                  'assets/icons/add.svg',
                  width: 35,
                  height: 35,
                  colorFilter: ColorFilter.mode(
                    theme.primaryPurple,
                    BlendMode.srcIn,
                  ),
                ),
                onTap: () {
                  Navigator.of(context).pushNamed('/gen_options');
                },
              ),
              WalletListItem(
                title: AppLocalizations.of(context)!
                    .addWalletOptionsExistingWalletTitle,
                subtitle: AppLocalizations.of(context)!
                    .addWalletOptionsExistingWalletSubtitle,
                icon: SvgPicture.asset(
                  'assets/icons/import.svg',
                  width: 35,
                  height: 35,
                  colorFilter: ColorFilter.mode(
                    theme.primaryPurple,
                    BlendMode.srcIn,
                  ),
                ),
                onTap: () {
                  Navigator.of(context).pushNamed('/restore_options');
                },
              ),
              WalletListItem(
                title: AppLocalizations.of(context)!
                    .addWalletOptionsPairWithLedgerTitle,
                subtitle: AppLocalizations.of(context)!
                    .addWalletOptionsPairWithLedgerSubtitle,
                icon: SvgPicture.asset(
                  'assets/icons/ledger.svg',
                  width: 25,
                  height: 25,
                  colorFilter: ColorFilter.mode(
                    theme.primaryPurple,
                    BlendMode.srcIn,
                  ),
                ),
                onTap: () {
                  Navigator.of(context).pushNamed('/ledger_connect');
                },
              ),
              const SizedBox(height: 24),
              Padding(
                padding: const EdgeInsets.only(left: 16.0),
                child: Text(
                  AppLocalizations.of(context)!.addWalletOptionsOtherOptions,
                  style: theme.caption.copyWith(
                    color: theme.textSecondary,
                  ),
                ),
              ),
              const SizedBox(height: 16),
              WalletListItem(
                disabled: true,
                title: AppLocalizations.of(context)!
                    .addWalletOptionsWatchAccountTitle,
                subtitle: AppLocalizations.of(context)!
                    .addWalletOptionsWatchAccountSubtitle,
                icon: SvgPicture.asset(
                  'assets/icons/looking.svg',
                  width: 35,
                  height: 35,
                  colorFilter: ColorFilter.mode(
                    theme.primaryPurple,
                    BlendMode.srcIn,
                  ),
                ),
                onTap: () {},
              ),
            ],
          ),
        ),
      ),
    );
  }
}

```

`lib/pages/notification.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:blockies/blockies.dart';
import 'package:zilpay/components/switch_setting_item.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/src/rust/api/settings.dart';
import 'package:zilpay/src/rust/models/notification.dart';
import 'package:zilpay/src/rust/models/wallet.dart';
import 'package:zilpay/theme/app_theme.dart';
import 'package:zilpay/l10n/app_localizations.dart';
import '../components/custom_app_bar.dart';
import '../state/app_state.dart';

class NotificationsSettingsPage extends StatefulWidget {
  const NotificationsSettingsPage({super.key});

  @override
  State<NotificationsSettingsPage> createState() =>
      _NotificationsSettingsPageState();
}

class _NotificationsSettingsPageState extends State<NotificationsSettingsPage> {
  final ScrollController _scrollController = ScrollController();

  @override
  void initState() {
    super.initState();
    _initializeServices();
  }

  @override
  void dispose() {
    _scrollController.dispose();
    super.dispose();
  }

  void _initializeServices() {}

  @override
  Widget build(BuildContext context) {
    final state = Provider.of<AppState>(context);
    final theme = state.currentTheme;
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);

    return Scaffold(
      backgroundColor: theme.background,
      body: SafeArea(
        child: Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 480),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Padding(
                  padding: EdgeInsets.symmetric(horizontal: adaptivePadding),
                  child: CustomAppBar(
                    title: AppLocalizations.of(context)!
                        .notificationsSettingsPageTitle,
                    onBackPressed: () => Navigator.pop(context),
                  ),
                ),
                Expanded(
                  child: SingleChildScrollView(
                    physics: const BouncingScrollPhysics(),
                    child: Padding(
                      padding:
                          EdgeInsets.symmetric(horizontal: adaptivePadding),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          SwitchSettingItem(
                            iconPath: "assets/icons/manage.svg",
                            title: AppLocalizations.of(context)!
                                .notificationsSettingsPagePushTitle,
                            backgroundColor: theme.cardBackground,
                            description: AppLocalizations.of(context)!
                                .notificationsSettingsPagePushDescription,
                            value: state.state.notificationsGlobalEnabled,
                            onChanged: (value) async {
                              await setGlobalNotifications(
                                  globalEnabled: value);
                              await state.syncData();
                            },
                          ),
                          SizedBox(height: adaptivePadding),
                          _buildWalletsSection(theme, adaptivePadding),
                          SizedBox(height: adaptivePadding),
                        ],
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildWalletsSection(AppTheme theme, double adaptivePadding) {
    return Consumer<AppState>(
      builder: (context, appState, _) {
        final isGlobalEnabled = appState.state.notificationsGlobalEnabled;

        return Opacity(
          opacity: isGlobalEnabled ? 1.0 : 0.5,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                AppLocalizations.of(context)!
                    .notificationsSettingsPageWalletsTitle,
                style: TextStyle(
                  color: theme.textPrimary,
                  fontSize: 20,
                  fontWeight: FontWeight.w600,
                ),
              ),
              SizedBox(height: 8),
              Text(
                AppLocalizations.of(context)!
                    .notificationsSettingsPageWalletsDescription,
                style: TextStyle(
                  color: theme.textSecondary,
                  fontSize: 16,
                ),
              ),
              SizedBox(height: adaptivePadding),
              Container(
                decoration: BoxDecoration(
                  color: theme.cardBackground,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: AbsorbPointer(
                  absorbing: !isGlobalEnabled,
                  child: ListView.builder(
                    shrinkWrap: true,
                    physics: const NeverScrollableScrollPhysics(),
                    itemCount: appState.wallets.length,
                    itemBuilder: (context, index) => _buildWalletItem(
                      appState,
                      appState.wallets[index],
                      index,
                      isLastItem: index == appState.wallets.length - 1,
                    ),
                  ),
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildWalletItem(
    AppState state,
    WalletInfo wallet,
    int index, {
    bool isLastItem = false,
  }) {
    final theme = state.currentTheme;
    final BackgroundNotificationState? walletNotify =
        state.state.notificationsWalletStates[BigInt.from(index)];
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);

    return Container(
      padding: EdgeInsets.symmetric(horizontal: adaptivePadding, vertical: 12),
      decoration: BoxDecoration(
        border: !isLastItem
            ? Border(
                bottom: BorderSide(
                  color: theme.textSecondary.withValues(alpha: 0.1),
                  width: 1,
                ),
              )
            : null,
      ),
      child: Row(
        children: [
          SizedBox(
            width: 40,
            height: 40,
            child: Padding(
              padding: const EdgeInsets.all(4),
              child: Blockies(
                seed: wallet.walletAddress,
                color: theme.secondaryPurple,
                bgColor: theme.primaryPurple,
                spotColor: theme.background,
                size: 8,
              ),
            ),
          ),
          SizedBox(width: 12),
          Expanded(
            child: Text(
              wallet.walletName.isEmpty
                  ? "${AppLocalizations.of(context)!.notificationsSettingsPageWalletPrefix} ${index + 1}"
                  : wallet.walletName,
              style: TextStyle(
                color: theme.textPrimary,
                fontSize: 16,
                fontWeight: FontWeight.w500,
              ),
            ),
          ),
          Switch(
            value: walletNotify != null ? walletNotify.transactions : false,
            onChanged: (value) async {
              await setWalletNotifications(
                walletIndex: BigInt.from(index),
                transactions: value,
                price: false,
                security: false,
                balance: false,
              );
              await state.syncData();
            },
            activeColor: theme.primaryPurple,
            activeTrackColor: theme.primaryPurple.withValues(alpha: 0.5),
          ),
        ],
      ),
    );
  }
}

```

`lib/pages/password_setup.dart`:

```dart
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:zilpay/components/biometric_switch.dart';
import 'package:zilpay/components/custom_app_bar.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/load_button.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/services/auth_guard.dart';
import 'package:zilpay/services/biometric_service.dart';
import 'package:zilpay/services/device.dart';
import 'package:zilpay/src/rust/api/provider.dart';
import 'package:zilpay/src/rust/api/wallet.dart';
import 'package:zilpay/src/rust/models/ftoken.dart';
import 'package:zilpay/src/rust/models/keypair.dart';
import 'package:zilpay/src/rust/models/provider.dart';
import 'package:zilpay/src/rust/models/settings.dart';
import 'package:zilpay/state/app_state.dart' show AppState;
import 'package:zilpay/l10n/app_localizations.dart';

class PasswordSetupPage extends StatefulWidget {
  const PasswordSetupPage({super.key});

  @override
  State<PasswordSetupPage> createState() => _PasswordSetupPageState();
}

class _PasswordSetupPageState extends State<PasswordSetupPage> {
  List<String>? _bip39List;
  NetworkConfigInfo? _chain;
  WalletArgonParamsInfo? _argon2;
  Uint8List? _cipher;
  KeyPairInfo? _keys;

  final AuthService _authService = AuthService();
  late AuthGuard _authGuard;
  late AppState _appState;

  List<AuthMethod> _authMethods = [AuthMethod.none];
  bool _useDeviceAuth = true;
  bool _zilLegacy = false;
  bool _bypassChecksumValidation = false;

  String _errorMessage = '';
  bool _disabled = false;
  bool _walletNameInitialized = false;
  bool _updatedArgs = false;

  final _btnController = RoundedLoadingButtonController();

  final _walletNameController = TextEditingController();
  final _passwordController = TextEditingController();
  final _confirmPasswordController = TextEditingController();
  final _passwordInputKey = GlobalKey<SmartInputState>();
  final _confirmPasswordInputKey = GlobalKey<SmartInputState>();

  bool _obscurePassword = true;
  bool _obscureConfirmPassword = true;

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();

    if (_updatedArgs) return;

    final args =
        ModalRoute.of(context)?.settings.arguments as Map<String, dynamic>?;
    final bip39 = args?['bip39'] as List<String>?;
    final chain = args?['chain'] as NetworkConfigInfo?;
    final keys = args?['keys'] as KeyPairInfo?;
    final cipher = args?['cipher'] as Uint8List?;
    final argon2 = args?['argon2'] as WalletArgonParamsInfo?;
    final bypassChecksumValidation = args?['ignore_checksum'] as bool?;

    if (bip39 == null && chain == null && cipher == null && keys == null) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        Navigator.of(context).pushReplacementNamed('/initial');
      });
    } else {
      setState(() {
        _bip39List = bip39;
        _chain = chain;
        _keys = keys;
        _cipher = cipher;
        _argon2 = argon2;
        _bypassChecksumValidation = bypassChecksumValidation ?? false;

        if (_chain?.slip44 == 313) {
          _zilLegacy = true;
        }

        _updatedArgs = true;
      });
    }

    if (!_walletNameInitialized) {
      _walletNameController.text = _generateWalletName();
      _walletNameInitialized = true;
    }
  }

  @override
  void initState() {
    super.initState();

    _authGuard = Provider.of<AuthGuard>(context, listen: false);
    _appState = Provider.of<AppState>(context, listen: false);
    _walletNameController.text = '';

    _checkAuthMethods();
  }

  @override
  void dispose() {
    _passwordController.dispose();
    _confirmPasswordController.dispose();
    _walletNameController.dispose();
    _btnController.dispose();
    super.dispose();
  }

  String _generateWalletName() {
    String type;
    if (_bip39List != null) {
      type = AppLocalizations.of(context)!.passwordSetupPageSeedType;
    } else if (_keys != null) {
      type = AppLocalizations.of(context)!.passwordSetupPageKeyType;
    } else {
      type = "";
    }

    String networkName = _chain?.name ??
        AppLocalizations.of(context)!.passwordSetupPageUniversalNetwork;
    int walletNumber = _appState.wallets.length + 1;
    return "$networkName #$walletNumber ($type)";
  }

  bool _validatePasswords() {
    if (_walletNameController.text.trim().isEmpty) {
      setState(() {
        _errorMessage =
            AppLocalizations.of(context)!.passwordSetupPageEmptyWalletNameError;
        _disabled = false;
      });
      return false;
    }

    if (_walletNameController.text.length > 32) {
      setState(() {
        _errorMessage =
            AppLocalizations.of(context)!.passwordSetupPageLongWalletNameError;
        _disabled = false;
      });
      return false;
    }

    if (_passwordController.text.length < 6) {
      _passwordInputKey.currentState?.shake();
      setState(() {
        _errorMessage =
            AppLocalizations.of(context)!.passwordSetupPageShortPasswordError;
        _disabled = false;
      });
      return false;
    }

    if (_passwordController.text != _confirmPasswordController.text) {
      _confirmPasswordInputKey.currentState?.shake();
      setState(() {
        _disabled = false;
        _errorMessage = AppLocalizations.of(context)!
            .passwordSetupPageMismatchPasswordError;
      });
      return false;
    }
    return true;
  }

  void _createWallet() async {
    setState(() {
      _errorMessage = '';
      _disabled = true;
    });

    if (!_validatePasswords()) {
      _btnController.reset();
      return;
    }

    try {
      final l10n = AppLocalizations.of(context)!;
      final BigInt? chainHash;
      List<NetworkConfigInfo> chains = await getProviders();
      final matches = chains
          .where((chain) => chain.chainHash == _chain!.chainHash)
          .toList();

      if (matches.isEmpty) {
        chainHash = await addProvider(providerConfig: _chain!);
      } else {
        chainHash = matches.first.chainHash;
      }

      if (_useDeviceAuth) {
        final authenticated = await _authService.authenticate(
          allowPinCode: true,
          reason: AppLocalizations.of(context)!.passwordSetupPageAuthReason,
        );
        setState(() => _useDeviceAuth = authenticated);
        if (!authenticated) {
          setState(() {
            _disabled = true;
          });
          return;
        }
      }

      _btnController.start();

      DeviceInfoService device = DeviceInfoService();
      List<String> identifiers = await device.getDeviceIdentifiers();

      AuthMethod biometricType = AuthMethod.none;
      if (_useDeviceAuth) {
        biometricType = _authMethods[0];
      }

      (String, String) session;

      WalletSettingsInfo settings = WalletSettingsInfo(
        cipherOrders: _cipher!,
        argonParams: _argon2!,
        currencyConvert: "BTC",
        ipfsNode: "dweb.link",
        ensEnabled: true,
        tokensListFetcher: true,
        nodeRankingEnabled: true,
        maxConnections: 5,
        requestTimeoutSecs: 30,
        ratesApiOptions: 1, // CoinGecko
      );

      List<FTokenInfo> ftokens = [];

      if (_bip39List != null) {
        Bip39AddWalletParams params = Bip39AddWalletParams(
          password: _passwordController.text,
          mnemonicStr: _bip39List!.join(' '),
          accounts: [(BigInt.zero, l10n.addAccountPageDefaultName(0))],
          passphrase: "",
          walletName: _walletNameController.text,
          biometricType: biometricType.name,
          identifiers: identifiers,
          chainHash: chainHash,
          mnemonicCheck: !_bypassChecksumValidation,
        );

        session = await addBip39Wallet(
          params: params,
          walletSettings: settings,
          ftokens: ftokens,
        );
      } else if (_keys != null) {
        AddSKWalletParams params = AddSKWalletParams(
          sk: _keys!.sk,
          password: _passwordController.text,
          walletName: _walletNameController.text,
          biometricType: biometricType.name,
          identifiers: identifiers,
          chainHash: chainHash,
        );

        session = await addSkWallet(
          params: params,
          walletSettings: settings,
          ftokens: ftokens,
        );
      } else {
        throw "";
      }

      await _appState.syncData();

      _appState.setSelectedWallet(_appState.wallets.length - 1);

      if (_useDeviceAuth) {
        await _authGuard.setSession(session.$2, session.$1);
      }

      await _appState.syncData();

      if (_zilLegacy && _chain?.slip44 == 313) {
        BigInt walletIndex = BigInt.from(_appState.selectedWallet);
        await zilliqaSwapChain(
          walletIndex: walletIndex,
          accountIndex: _appState.wallet!.selectedAccount,
        );
        await _appState.syncData();
      }

      await _appState.startTrackHistoryWorker();

      _appState.setSelectedWallet(_appState.wallets.length - 1);
      _btnController.success();

      if (!mounted) return;
      Navigator.of(context).pushNamed('/');
    } catch (e) {
      setState(() {
        _disabled = false;
        _errorMessage = e.toString();
      });
      _btnController.error();
      Timer(const Duration(seconds: 1), () {
        _btnController.reset();
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<AppState>(context).currentTheme;
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);
    const inputHeight = 50.0;

    return Scaffold(
      resizeToAvoidBottomInset: true,
      body: SafeArea(
        child: Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 480),
            child: Padding(
              padding: EdgeInsets.symmetric(horizontal: adaptivePadding),
              child: Column(
                children: [
                  CustomAppBar(
                    title: AppLocalizations.of(context)!.passwordSetupPageTitle,
                    onBackPressed: () => Navigator.pop(context),
                  ),
                  Expanded(
                    child: SingleChildScrollView(
                      physics: const BouncingScrollPhysics(),
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          const SizedBox(height: 16),
                          Text(
                            AppLocalizations.of(context)!
                                .passwordSetupPageSubtitle,
                            style: TextStyle(
                              color: theme.textPrimary,
                              fontSize: 24,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          SizedBox(height: adaptivePadding),
                          SmartInput(
                            controller: _walletNameController,
                            hint: AppLocalizations.of(context)!
                                .passwordSetupPageWalletNameHint,
                            fontSize: 18,
                            height: inputHeight,
                            padding: const EdgeInsets.symmetric(horizontal: 20),
                            focusedBorderColor: theme.primaryPurple,
                            disabled: _disabled,
                            onChanged: (value) {
                              if (_errorMessage != '') {
                                setState(() {
                                  _errorMessage = '';
                                });
                              }
                            },
                          ),
                          SizedBox(height: adaptivePadding),
                          SmartInput(
                            key: _passwordInputKey,
                            controller: _passwordController,
                            hint: AppLocalizations.of(context)!
                                .passwordSetupPagePasswordHint,
                            fontSize: 18,
                            height: inputHeight,
                            padding: const EdgeInsets.symmetric(horizontal: 20),
                            focusedBorderColor: theme.primaryPurple,
                            disabled: _disabled,
                            obscureText: _obscurePassword,
                            rightIconPath: _obscurePassword
                                ? "assets/icons/close_eye.svg"
                                : "assets/icons/open_eye.svg",
                            onChanged: (value) {
                              if (_errorMessage != '') {
                                setState(() {
                                  _errorMessage = '';
                                });
                              }
                            },
                            onRightIconTap: () {
                              setState(() {
                                _obscurePassword = !_obscurePassword;
                              });
                            },
                          ),
                          SizedBox(height: adaptivePadding),
                          SmartInput(
                            key: _confirmPasswordInputKey,
                            controller: _confirmPasswordController,
                            hint: AppLocalizations.of(context)!
                                .passwordSetupPageConfirmPasswordHint,
                            height: inputHeight,
                            fontSize: 18,
                            disabled: _disabled,
                            padding: const EdgeInsets.symmetric(horizontal: 20),
                            obscureText: _obscureConfirmPassword,
                            rightIconPath: _obscureConfirmPassword
                                ? "assets/icons/close_eye.svg"
                                : "assets/icons/open_eye.svg",
                            onRightIconTap: () {
                              setState(() {
                                _obscureConfirmPassword =
                                    !_obscureConfirmPassword;
                              });
                            },
                            onChanged: (value) {
                              if (_errorMessage != '') {
                                setState(() {
                                  _errorMessage = '';
                                });
                              }
                            },
                          ),
                          const SizedBox(height: 8),
                          Text(
                            _errorMessage,
                            style: TextStyle(
                              color: theme.danger,
                              fontSize: 14,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                          if (_chain?.slip44 == 313)
                            Padding(
                              padding:
                                  const EdgeInsets.symmetric(horizontal: 4),
                              child: Row(
                                mainAxisAlignment:
                                    MainAxisAlignment.spaceBetween,
                                children: [
                                  Row(
                                    children: [
                                      SvgPicture.asset(
                                        "assets/icons/scilla.svg",
                                        width: 24,
                                        height: 24,
                                        colorFilter: ColorFilter.mode(
                                          theme.textPrimary,
                                          BlendMode.srcIn,
                                        ),
                                      ),
                                      const SizedBox(width: 4),
                                      Text(
                                        AppLocalizations.of(context)!
                                            .passwordSetupPageLegacyLabel,
                                        style: TextStyle(
                                          color: theme.textPrimary,
                                          fontSize: 16,
                                        ),
                                      ),
                                    ],
                                  ),
                                  Switch(
                                    value: _zilLegacy,
                                    onChanged: _disabled
                                        ? null
                                        : (value) {
                                            setState(() {
                                              _zilLegacy = value;
                                            });
                                          },
                                    activeColor: theme.primaryPurple,
                                    activeTrackColor: theme.primaryPurple
                                        .withValues(alpha: 0.4),
                                  ),
                                ],
                              ),
                            ),
                          BiometricSwitch(
                            biometricType: _authMethods.first,
                            value: _useDeviceAuth,
                            disabled: _disabled,
                            onChanged: (value) async {
                              setState(() => _useDeviceAuth = value);
                            },
                          ),
                          SizedBox(height: 80),
                        ],
                      ),
                    ),
                  ),
                  Container(
                    width: double.infinity,
                    padding: EdgeInsets.only(bottom: adaptivePadding),
                    child: RoundedLoadingButton(
                      color: theme.primaryPurple,
                      valueColor: theme.buttonText,
                      controller: _btnController,
                      onPressed: _createWallet,
                      child: Text(
                        AppLocalizations.of(context)!
                            .passwordSetupPageCreateButton,
                        style: TextStyle(
                          color: theme.buttonText,
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  Future<void> _checkAuthMethods() async {
    final methods = await _authService.getAvailableAuthMethods();
    setState(() {
      _authMethods = methods;
      if (_authMethods.length == 0 || _authMethods.first == AuthMethod.none) {
        _useDeviceAuth = false;
      }
    });
  }
}

```

`lib/pages/receive.dart`:

```dart
import 'dart:io';

import 'package:blockies/blockies.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_svg/svg.dart';
import 'package:path_provider/path_provider.dart';
import 'package:provider/provider.dart';
import 'package:share_plus/share_plus.dart';
import 'package:zilpay/components/async_qrcode.dart';
import 'package:zilpay/components/custom_app_bar.dart';
import 'package:zilpay/components/image_cache.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/components/tile_button.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/mixins/preprocess_url.dart';
import 'package:zilpay/mixins/qrcode.dart';
import 'package:zilpay/modals/select_token.dart';
import 'package:zilpay/src/rust/api/qrcode.dart';
import 'package:zilpay/src/rust/api/wallet.dart';
import 'package:zilpay/src/rust/models/ftoken.dart';
import 'package:zilpay/src/rust/models/provider.dart';
import 'package:zilpay/src/rust/models/qrcode.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/theme/app_theme.dart';
import 'package:zilpay/l10n/app_localizations.dart';

class ReceivePage extends StatefulWidget {
  const ReceivePage({super.key});

  @override
  State<ReceivePage> createState() => _ReceivePageState();
}

class _ReceivePageState extends State<ReceivePage> {
  bool isCopied = false;
  bool isPressedToken = false;
  int selectedToken = 0;
  String amount = "0";
  Key _imageKey = UniqueKey();
  String? legacyAddress;
  bool useLegacyAddress = false;

  final TextEditingController _accountNameController = TextEditingController();
  final TextEditingController _amountController = TextEditingController();

  @override
  void initState() {
    super.initState();
    final appState = Provider.of<AppState>(context, listen: false);
    final chain = appState.chain!;

    _amountController.text = amount;
    _accountNameController.text = appState.account?.name ?? "";

    if (chain.slip44 == 313) {
      zilliqaGetNFormat(
        walletIndex: BigInt.from(appState.selectedWallet),
        accountIndex: appState.wallet!.selectedAccount,
      ).then((addr) {
        setState(() {
          legacyAddress = addr;
        });
      });
    }
  }

  @override
  void dispose() {
    _amountController.dispose();
    _accountNameController.dispose();
    super.dispose();
  }

  Future<void> handleCopy(String address) async {
    await Clipboard.setData(ClipboardData(text: address));
    setState(() {
      isCopied = true;
    });
    await Future.delayed(const Duration(seconds: 2));
    setState(() {
      isCopied = false;
    });
  }

  void handlePressedChanged(bool pressed) {
    setState(() {
      isPressedToken = pressed;
    });
  }

  void handleSelectToken() {
    showTokenSelectModal(
      context: context,
      onTokenSelected: (index) {
        setState(() {
          selectedToken = index;
          _imageKey = UniqueKey();
        });
      },
    );
  }

  Future<void> handleShare(
    FTokenInfo token,
    String addr,
    AppTheme theme,
    NetworkConfigInfo chain,
  ) async {
    QrConfigInfo config = QrConfigInfo(
      size: 600,
      gapless: false,
      color: theme.primaryPurple.toARGB32(),
      eyeShape: EyeShape.circle.value,
      dataModuleShape: DataModuleShape.circle.value,
    );
    String data = generateCryptoUrl(
      address: addr,
      chain: chain.shortName,
      token: token.addr,
      amount: amount,
    );

    try {
      final pngBytes = await genPngQrcode(data: data, config: config);
      final tempDir = await getTemporaryDirectory();
      final tempFile = File('${tempDir.path}/qrcode.png');
      await tempFile.writeAsBytes(pngBytes);
      final xFile = XFile(tempFile.path, mimeType: 'image/png');
      await SharePlus.instance.share(
        ShareParams(
          files: [xFile],
          text: '$addr, amount: $amount',
        ),
      );
      await tempFile.delete();
    } catch (e) {
      debugPrint("error share: $e");
    }
  }

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);
    final chain = appState.chain!;
    final token = appState.wallet!.tokens[selectedToken];
    final currentAddress = useLegacyAddress && legacyAddress != null
        ? legacyAddress!
        : appState.account!.addr;
    final l10n = AppLocalizations.of(context)!;

    return Scaffold(
      backgroundColor: theme.background,
      body: SafeArea(
        child: Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 480),
            child: Column(
              children: [
                Padding(
                  padding: EdgeInsets.symmetric(horizontal: adaptivePadding),
                  child: CustomAppBar(
                    title: l10n.receivePageTitle,
                    onBackPressed: () => Navigator.pop(context),
                  ),
                ),
                Expanded(
                  child: SingleChildScrollView(
                    physics: const BouncingScrollPhysics(),
                    child: Padding(
                      padding:
                          EdgeInsets.symmetric(horizontal: adaptivePadding),
                      child: Column(
                        children: [
                          Container(
                            width: double.infinity,
                            constraints: const BoxConstraints(maxWidth: 400),
                            child: Column(
                              children: [
                                Container(
                                  margin: EdgeInsets.symmetric(
                                      vertical: adaptivePadding),
                                  padding: const EdgeInsets.all(16),
                                  decoration: BoxDecoration(
                                    color: theme.warning.withValues(alpha: 0.1),
                                    borderRadius: BorderRadius.circular(16),
                                  ),
                                  child: Row(
                                    crossAxisAlignment:
                                        CrossAxisAlignment.start,
                                    children: [
                                      SvgPicture.asset(
                                        "assets/icons/warning.svg",
                                        width: 24,
                                        height: 24,
                                        colorFilter: ColorFilter.mode(
                                          theme.warning,
                                          BlendMode.srcIn,
                                        ),
                                      ),
                                      const SizedBox(width: 12),
                                      Expanded(
                                        child: Text(
                                          l10n.receivePageWarning(
                                              chain.name, token.symbol),
                                          style: TextStyle(
                                            color: theme.warning,
                                            fontSize: 14,
                                          ),
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                                Container(
                                  width: double.infinity,
                                  padding: EdgeInsets.all(adaptivePadding),
                                  decoration: BoxDecoration(
                                    color: theme.cardBackground,
                                    borderRadius: BorderRadius.circular(16),
                                  ),
                                  child: Column(
                                    mainAxisSize: MainAxisSize.min,
                                    children: [
                                      _buildTokenSelector(appState, token),
                                      const SizedBox(height: 24),
                                      if (appState.account != null)
                                        SizedBox(
                                          width: 220,
                                          height: 220,
                                          child: AsyncQRcode(
                                            data: generateCryptoUrl(
                                              address: currentAddress,
                                              chain: chain.shortName,
                                              token: token.addr,
                                              amount: amount,
                                            ),
                                            color: theme.primaryPurple,
                                            size: 220,
                                            fit: BoxFit.contain,
                                          ),
                                        ),
                                      const SizedBox(height: 16),
                                      Text(
                                        currentAddress,
                                        style: TextStyle(
                                          color: theme.textSecondary,
                                          fontSize: 12,
                                        ),
                                        textAlign: TextAlign.center,
                                      ),
                                    ],
                                  ),
                                ),
                                const SizedBox(height: 16),
                                SmartInput(
                                  controller: _accountNameController,
                                  hint: l10n.receivePageAccountNameHint,
                                  onSubmitted: (_) async {
                                    if (_accountNameController
                                        .text.isNotEmpty) {
                                      await changeAccountName(
                                        walletIndex: BigInt.from(
                                            appState.selectedWallet),
                                        accountIndex:
                                            appState.wallet!.selectedAccount,
                                        newName: _accountNameController.text,
                                      );
                                      await appState.syncData();
                                    }
                                  },
                                  height: 50,
                                  rightIconPath: "assets/icons/edit.svg",
                                  borderColor: theme.cardBackground,
                                  focusedBorderColor: theme.primaryPurple,
                                  fontSize: 14,
                                ),
                                const SizedBox(height: 16),
                                _buildActionButtons(
                                    theme, chain, context, currentAddress),
                              ],
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildTokenSelector(AppState appState, FTokenInfo token) {
    final theme = appState.currentTheme;

    return GestureDetector(
      onTapDown: (_) => handlePressedChanged(true),
      onTapUp: (_) => handlePressedChanged(false),
      onTapCancel: () => handlePressedChanged(false),
      onTap: handleSelectToken,
      child: AnimatedOpacity(
        duration: const Duration(milliseconds: 150),
        opacity: isPressedToken ? 0.6 : 1.0,
        child: Row(
          mainAxisSize: MainAxisSize.min,
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Container(
              width: 32,
              height: 32,
              decoration: const BoxDecoration(shape: BoxShape.circle),
              child: Center(
                child: AsyncImage(
                  key: _imageKey,
                  url: processTokenLogo(
                    token: token,
                    shortName: appState.chain?.shortName ?? "",
                    theme: theme.value,
                  ),
                  width: 32,
                  height: 32,
                  fit: BoxFit.contain,
                  errorWidget: Blockies(
                    seed: token.addr,
                    color: theme.secondaryPurple,
                    bgColor: theme.primaryPurple,
                    spotColor: theme.background,
                    size: 8,
                  ),
                  loadingWidget: const Center(
                    child: CircularProgressIndicator(strokeWidth: 2),
                  ),
                ),
              ),
            ),
            const SizedBox(width: 8),
            Text(
              overflow: TextOverflow.ellipsis,
              maxLines: 1,
              token.name,
              style: TextStyle(
                color: theme.textPrimary,
                fontSize: 12,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(width: 2),
            Text(
              "(${token.symbol})",
              style: TextStyle(
                color: theme.textSecondary,
                fontSize: 18,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildActionButtons(
    AppTheme theme,
    NetworkConfigInfo chain,
    BuildContext context,
    String currentAddress,
  ) {
    final appState = Provider.of<AppState>(context);
    final token = appState.wallet!.tokens[selectedToken];
    final account = appState.account;

    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
      children: [
        TileButton(
          icon: SvgPicture.asset(
            isCopied ? "assets/icons/check.svg" : "assets/icons/copy.svg",
            width: 24,
            height: 24,
            colorFilter: ColorFilter.mode(theme.primaryPurple, BlendMode.srcIn),
          ),
          disabled: false,
          onPressed: () async {
            await handleCopy(currentAddress);
          },
          backgroundColor: theme.cardBackground,
          textColor: theme.primaryPurple,
        ),
        TileButton(
          icon: SvgPicture.asset(
            "assets/icons/hash.svg",
            width: 24,
            height: 24,
            colorFilter: ColorFilter.mode(theme.primaryPurple, BlendMode.srcIn),
          ),
          disabled: false,
          onPressed: _handleAmountDialog,
          backgroundColor: theme.cardBackground,
          textColor: theme.primaryPurple,
        ),
        if (account != null && chain.slip44 == 313)
          TileButton(
            icon: SvgPicture.asset(
              useLegacyAddress
                  ? "assets/icons/scilla.svg"
                  : "assets/icons/solidity.svg",
              width: 24,
              height: 24,
              colorFilter:
                  ColorFilter.mode(theme.primaryPurple, BlendMode.srcIn),
            ),
            disabled: legacyAddress == null || account.addrType == 0,
            onPressed: () {
              if (legacyAddress != null) {
                setState(() {
                  useLegacyAddress = !useLegacyAddress;
                });
              }
            },
            backgroundColor: theme.cardBackground,
            textColor: theme.primaryPurple,
          ),
        TileButton(
          icon: SvgPicture.asset(
            "assets/icons/share.svg",
            width: 24,
            height: 24,
            colorFilter: ColorFilter.mode(theme.primaryPurple, BlendMode.srcIn),
          ),
          disabled: false,
          onPressed: () async {
            await handleShare(token, currentAddress, theme, chain);
          },
          backgroundColor: theme.cardBackground,
          textColor: theme.primaryPurple,
        ),
      ],
    );
  }

  Future<void> _handleAmountDialog() async {
    _amountController.text = amount;
    final l10n = AppLocalizations.of(context)!;

    final result = await showDialog<String>(
      context: context,
      builder: (BuildContext context) {
        final theme = Provider.of<AppState>(context).currentTheme;

        return AlertDialog(
          backgroundColor: theme.cardBackground,
          title: Text(
            l10n.receivePageAmountDialogTitle,
            style: TextStyle(
              color: theme.textPrimary,
              fontWeight: FontWeight.bold,
            ),
          ),
          content: TextField(
            controller: _amountController,
            keyboardType: const TextInputType.numberWithOptions(decimal: true),
            inputFormatters: [
              FilteringTextInputFormatter.allow(RegExp(r'[0-9\,\.]')),
              TextInputFormatter.withFunction((oldValue, newValue) {
                return TextEditingValue(
                  text: newValue.text.replaceAll(',', '.'),
                  selection: newValue.selection,
                );
              }),
              TextInputFormatter.withFunction((oldValue, newValue) {
                if (newValue.text.isEmpty) return newValue;
                if (newValue.text.split('.').length > 2) return oldValue;
                return newValue;
              }),
            ],
            decoration: InputDecoration(
              hintText: l10n.receivePageAmountDialogHint,
              hintStyle: TextStyle(color: theme.textSecondary),
              enabledBorder: UnderlineInputBorder(
                borderSide: BorderSide(color: theme.primaryPurple),
              ),
              focusedBorder: UnderlineInputBorder(
                borderSide: BorderSide(color: theme.primaryPurple, width: 2),
              ),
            ),
            style: TextStyle(
              color: theme.textPrimary,
              fontSize: 16,
            ),
            autofocus: true,
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: Text(
                l10n.receivePageAmountDialogCancel,
                style: TextStyle(color: theme.textSecondary),
              ),
            ),
            TextButton(
              onPressed: () {
                if (_amountController.text.isEmpty) {
                  _amountController.text = '0';
                }
                Navigator.pop(context, _amountController.text);
              },
              child: Text(
                l10n.receivePageAmountDialogConfirm,
                style: TextStyle(
                  color: theme.primaryPurple,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ],
        );
      },
    );

    if (result != null) {
      setState(() {
        amount = result;
      });
    }
  }
}

```

`lib/pages/restore_bip39.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'dart:math' as math;
import 'package:zilpay/components/button.dart';
import 'package:zilpay/components/custom_app_bar.dart';
import 'package:zilpay/components/mnemonic_word_input.dart';
import 'package:zilpay/components/wor_count_selector.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/src/rust/api/methods.dart';
import 'package:zilpay/src/rust/api/utils.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/l10n/app_localizations.dart';

class RestoreSecretPhrasePage extends StatefulWidget {
  const RestoreSecretPhrasePage({super.key});

  @override
  State<RestoreSecretPhrasePage> createState() =>
      _RestoreSecretPhrasePageState();
}

class _RestoreSecretPhrasePageState extends State<RestoreSecretPhrasePage> {
  late List<String> _words;
  List<int> _wordsErrorIndexes = [];
  int _count = 12;
  final List<int> _allowedCounts = const [12, 15, 18, 21, 24];
  bool _isChecksumValid = true;
  bool _bypassChecksumValidation = false;
  bool _showChecksumWarning = false;
  bool _allWordsEntered = false;

  @override
  void initState() {
    super.initState();
    _words = List.filled(_count, '');
  }

  Future<void> _handleCheckWords() async {
    try {
      final nonEmptyWords = _words.where((word) => word.isNotEmpty).toList();
      if (nonEmptyWords.isEmpty) return;

      List<int> errorIndexes = (await checkNotExistsBip39Words(
        words: nonEmptyWords,
        lang: 'english',
      ))
          .map((e) => e.toInt())
          .toList();

      final List<int> adjustedIndexes = [];
      var currentIndex = 0;

      for (int i = 0; i < _words.length; i++) {
        if (_words[i].isNotEmpty) {
          if (errorIndexes.contains(currentIndex)) {
            adjustedIndexes.add(i);
          }
          currentIndex++;
        }
      }

      if (mounted) {
        setState(() {
          _wordsErrorIndexes = adjustedIndexes;
          _validateForm();
        });
      }
    } catch (e) {
      debugPrint('Error checking words: $e');
    }
  }

  Future<void> _validateForm() async {
    bool areAllWordsValid =
        _words.every((word) => word.isNotEmpty) && _wordsErrorIndexes.isEmpty;

    setState(() {
      _allWordsEntered = areAllWordsValid;
    });

    if (areAllWordsValid) {
      if (!_showChecksumWarning) {
        String phrase = _words.join(' ');
        bool checksumValid = await bip39ChecksumValid(words: phrase);

        if (mounted) {
          setState(() {
            _isChecksumValid = checksumValid;
            _showChecksumWarning = !checksumValid;
          });
        }
      }
    } else {
      if (mounted) {
        setState(() {
          _showChecksumWarning = false;
          _bypassChecksumValidation = false;
        });
      }
    }
  }

  void _handleWordChange(int index, String word) {
    if (word.trim().contains(' ')) {
      _handlePhrasePaste(word);
      return;
    }

    final trimmedWord =
        word.trim().toLowerCase().replaceAll(RegExp(r'[^a-z]'), '');
    final currentIndex = index - 1;

    _words[currentIndex] = trimmedWord;
    if (_wordsErrorIndexes.contains(currentIndex)) {
      _wordsErrorIndexes.remove(currentIndex);
    }

    if (_showChecksumWarning) {
      setState(() {
        _showChecksumWarning = false;
        _bypassChecksumValidation = false;
      });
    }

    _validateForm();

    if (trimmedWord.isNotEmpty) {
      Future.microtask(() => _handleCheckWords());
    }
  }

  void _handlePhrasePaste(String phrase) {
    final words = phrase
        .trim()
        .split(RegExp(r'\s+'))
        .where((word) => word.isNotEmpty)
        .toList();

    int targetCount = _allowedCounts.firstWhere(
      (count) => count >= words.length,
      orElse: () => _allowedCounts.last,
    );

    if (targetCount != _count) {
      _handleCountChanged(targetCount, autoAdjust: true);
    }

    for (var i = 0; i < words.length && i < targetCount; i++) {
      _words[i] = words[i].toLowerCase();
    }

    setState(() {
      _showChecksumWarning = false;
      _bypassChecksumValidation = false;
    });

    _validateForm();

    if (words.isNotEmpty) {
      Future.microtask(() => _handleCheckWords());
    }
  }

  void _handleCountChanged(int newCount, {bool autoAdjust = false}) {
    if (mounted) {
      setState(() {
        _count = newCount;
        final newWords = List<String>.filled(newCount, '');
        for (var i = 0; i < math.min(_words.length, newCount); i++) {
          newWords[i] = _words[i];
        }
        _words = newWords;
        _wordsErrorIndexes = [];
        _showChecksumWarning = false;
        _bypassChecksumValidation = false;
        _allWordsEntered = false;
      });

      _validateForm();
    }
  }

  Widget _buildChecksumWarning() {
    if (!_showChecksumWarning) return const SizedBox.shrink();

    final theme = Provider.of<AppState>(context).currentTheme;

    return Container(
      padding: const EdgeInsets.all(8),
      margin: const EdgeInsets.only(bottom: 8),
      decoration: BoxDecoration(
        color: theme.danger.withValues(alpha: 0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: theme.danger),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            AppLocalizations.of(context)!.checksumValidationFailed,
            style: TextStyle(color: theme.danger, fontWeight: FontWeight.bold),
          ),
          Row(
            children: [
              Checkbox(
                value: _bypassChecksumValidation,
                onChanged: (value) {
                  setState(() {
                    _bypassChecksumValidation = value ?? false;
                  });
                },
                activeColor: theme.primaryPurple,
              ),
              Expanded(
                child: Text(
                  AppLocalizations.of(context)!.proceedDespiteInvalidChecksum,
                  style: TextStyle(color: theme.textPrimary),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  bool get _isButtonEnabled {
    if (!_allWordsEntered) return false;
    if (_isChecksumValid) return true;
    return _bypassChecksumValidation;
  }

  @override
  Widget build(BuildContext context) {
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);
    final theme = Provider.of<AppState>(context).currentTheme;

    return Scaffold(
      body: SafeArea(
        child: Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 480),
            child: Column(
              children: [
                CustomAppBar(
                  title: AppLocalizations.of(context)!
                      .restoreSecretPhrasePageTitle,
                  onBackPressed: () => Navigator.pop(context),
                ),
                Expanded(
                  child: Padding(
                    padding: EdgeInsets.symmetric(horizontal: adaptivePadding),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const SizedBox(height: 16),
                        WordCountSelector(
                          wordCounts: _allowedCounts,
                          selectedCount: _count,
                          onCountChanged: (count) => _handleCountChanged(count),
                        ),
                        const SizedBox(height: 16),
                        Expanded(
                          child: ListView.builder(
                            physics: const BouncingScrollPhysics(),
                            itemCount: _count,
                            itemBuilder: (context, index) {
                              return Padding(
                                padding:
                                    const EdgeInsets.symmetric(vertical: 8.0),
                                child: MnemonicWordInput(
                                  key: ValueKey('word_$index'),
                                  index: index + 1,
                                  word: _words[index],
                                  isEditable: true,
                                  onChanged: _handleWordChange,
                                  borderColor: theme.buttonText,
                                  hasError: _wordsErrorIndexes.contains(index),
                                  errorBorderColor: theme.danger,
                                ),
                              );
                            },
                          ),
                        ),
                        const SizedBox(height: 16),
                        _buildChecksumWarning(),
                        Padding(
                          padding: const EdgeInsets.only(bottom: 16),
                          child: CustomButton(
                            textColor: theme.buttonText,
                            backgroundColor: theme.primaryPurple,
                            text: AppLocalizations.of(context)!
                                .restoreSecretPhrasePageRestoreButton,
                            onPressed: () {
                              Navigator.of(context)
                                  .pushNamed('/net_setup', arguments: {
                                'bip39': _words,
                                'ignore_checksum': _bypassChecksumValidation,
                              });
                            },
                            borderRadius: 30.0,
                            height: 56.0,
                            disabled: !_isButtonEnabled,
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

```

`lib/pages/restore_rkstorage.dart`:

```dart
import 'dart:convert';
import 'package:blockies/blockies.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/mixins/amount.dart';
import 'package:zilpay/src/rust/api/backend.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/components/custom_app_bar.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/components/button.dart';
import 'package:zilpay/l10n/app_localizations.dart';

class Account {
  final String name;
  final String address;
  final String? balance;
  final int type;
  final int index;

  Account({
    required this.name,
    required this.address,
    required this.type,
    required this.index,
    this.balance,
  });
}

class RestoreRKStorage extends StatefulWidget {
  const RestoreRKStorage({super.key});

  @override
  State<RestoreRKStorage> createState() => _RestoreRKStorageState();
}

class _RestoreRKStorageState extends State<RestoreRKStorage> {
  List<Account> accounts = [];
  final TextEditingController _passwordController = TextEditingController();
  bool _isLoading = false;
  String? _errorMessage;
  bool _obscurePassword = true;
  String? _vaultJson;

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    final appState = Provider.of<AppState>(context);

    final args =
        ModalRoute.of(context)?.settings.arguments as Map<String, String?>?;
    if (args == null || args['vaultJson'] == null) {
      Navigator.pop(context);
      return;
    }
    _vaultJson = args['vaultJson'];
    try {
      final accountsJson = jsonDecode(args['accountsJson'] ?? '{}');
      final identities = (accountsJson['identities'] as List<dynamic>?) ?? [];

      setState(() {
        accounts = identities.map((identity) {
          final balanceMap = identity['balance'] as Map<String, dynamic>?;
          final mainnetBalance =
              balanceMap?['mainnet'] as Map<String, dynamic>?;
          final (balance, _) = formatingAmount(
            amount: mainnetBalance?['ZIL'] ?? "0",
            symbol: "ZIL",
            decimals: 12,
            rate: 0,
            appState: appState,
          );

          return Account(
            name: identity['name'] as String? ?? 'Unnamed',
            address: identity['bech32'] as String? ?? '',
            type: identity['type'] as int? ?? 0,
            index: identity['index'] as int? ?? 0,
            balance: balance,
          );
        }).toList();
      });
    } catch (e) {
      debugPrint("Error parsing accounts JSON: $e");
      setState(() {
        accounts = [];
      });
    }
  }

  @override
  void dispose() {
    _passwordController.dispose();
    super.dispose();
  }

  void _handleRestore() async {
    if (_passwordController.text.isEmpty) {
      setState(() => _errorMessage =
          AppLocalizations.of(context)!.restoreRKStorageEnterPassword);
      return;
    }
    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });
    try {
      String words = await tryRestoreRkstorage(
        vaultJson: _vaultJson!,
        password: _passwordController.text,
      );
      if (mounted) {
        Navigator.of(context).pushNamed('/net_setup', arguments: {
          'bip39': words.split(" "),
          'zilLegacy': true,
          'ignore_checksum': true,
        });
      }
    } catch (e) {
      setState(() => _errorMessage =
          '${AppLocalizations.of(context)!.restoreRKStorageErrorPrefix} ${e.toString()}');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<AppState>(context).currentTheme;
    final l10n = AppLocalizations.of(context)!;
    return Scaffold(
      backgroundColor: theme.background,
      body: SafeArea(
        child: Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 480),
            child: CustomScrollView(
              slivers: [
                SliverToBoxAdapter(
                  child: CustomAppBar(
                    title: l10n.restoreRKStorageTitle,
                    onBackPressed: () => Navigator.pop(context),
                  ),
                ),
                SliverToBoxAdapter(
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        if (accounts.isNotEmpty) ...[
                          Text(l10n.restoreRKStorageAccountsPrompt,
                              style: TextStyle(
                                  color: theme.textSecondary, fontSize: 14)),
                          const SizedBox(height: 16),
                          Container(
                            padding: const EdgeInsets.all(16.0),
                            decoration: BoxDecoration(
                              color: theme.cardBackground,
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(
                                  color: theme.secondaryPurple
                                      .withValues(alpha: 0.2)),
                            ),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: accounts
                                  .map((account) =>
                                      AccountItem(account: account))
                                  .toList(),
                            ),
                          ),
                          const SizedBox(height: 16),
                        ],
                        SmartInput(
                          controller: _passwordController,
                          hint: l10n.restoreRKStoragePasswordHint,
                          obscureText: _obscurePassword,
                          rightIconPath: _obscurePassword
                              ? 'assets/icons/close_eye.svg'
                              : 'assets/icons/open_eye.svg',
                          onRightIconTap: () => setState(
                              () => _obscurePassword = !_obscurePassword),
                          disabled: _isLoading,
                          focusedBorderColor: theme.primaryPurple,
                          height: 56,
                          padding: const EdgeInsets.symmetric(horizontal: 20),
                        ),
                        if (_errorMessage != null)
                          Padding(
                            padding: const EdgeInsets.only(top: 8.0),
                            child: Text(_errorMessage!,
                                style: TextStyle(
                                    color: theme.danger, fontSize: 14)),
                          ),
                        const SizedBox(height: 16),
                        SizedBox(
                          width: double.infinity,
                          child: CustomButton(
                            textColor: theme.buttonText,
                            backgroundColor: theme.primaryPurple,
                            text: l10n.restoreRKStorageRestoreButton,
                            disabled: _isLoading,
                            onPressed: _handleRestore,
                            borderRadius: 30.0,
                            height: 56.0,
                          ),
                        ),
                        const SizedBox(height: 8),
                        Center(
                          child: SizedBox(
                            width: 100,
                            child: TextButton(
                              onPressed: () => Navigator.of(context)
                                  .pushNamed('/new_wallet_options'),
                              child: Text(l10n.restoreRKStorageSkipButton,
                                  style: TextStyle(
                                      color: theme.textSecondary,
                                      fontSize: 14)),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class AccountItem extends StatelessWidget {
  final Account account;

  const AccountItem({super.key, required this.account});

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<AppState>(context).currentTheme;
    final l10n = AppLocalizations.of(context)!;
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          SizedBox(
            width: 40,
            height: 40,
            child: ClipRRect(
              borderRadius: BorderRadius.circular(20),
              child: Blockies(
                seed: account.address.toLowerCase(),
                size: 8,
                color: theme.secondaryPurple,
                bgColor: theme.primaryPurple,
                spotColor: theme.background,
              ),
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(account.name,
                    style: TextStyle(
                        color: theme.textPrimary,
                        fontWeight: FontWeight.bold,
                        fontSize: 16)),
                Text(account.address,
                    style: TextStyle(color: theme.textSecondary, fontSize: 14),
                    overflow: TextOverflow.ellipsis),
                Text(
                    '${l10n.accountItemBalanceLabel} ${account.balance ?? '0'} ZIL',
                    style: TextStyle(color: theme.textSecondary, fontSize: 14)),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

```

`lib/pages/restore_sk.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/button.dart';
import 'package:zilpay/components/custom_app_bar.dart';
import 'package:zilpay/components/hex_key.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/modals/backup_confirmation_modal.dart';
import 'package:zilpay/src/rust/models/keypair.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/l10n/app_localizations.dart';

class SecretKeyRestorePage extends StatefulWidget {
  const SecretKeyRestorePage({super.key});

  @override
  State<SecretKeyRestorePage> createState() => _SecretKeyRestorePageState();
}

class _SecretKeyRestorePageState extends State<SecretKeyRestorePage> {
  final TextEditingController _privateKeyController = TextEditingController();
  String? _errorMessage;
  bool _hasBackup = false;
  bool _isValidating = false;
  KeyPairInfo _keyPair = KeyPairInfo(sk: "", pk: "");

  @override
  void dispose() {
    _privateKeyController.dispose();
    super.dispose();
  }

  void _validatePrivateKey(String input) async {
    final l10n = AppLocalizations.of(context)!;
    setState(() {
      _isValidating = true;
      _errorMessage = null;
      _keyPair = KeyPairInfo(sk: "", pk: "");
    });

    if (input.isEmpty) {
      setState(() => _isValidating = false);
      return;
    }

    try {
      if (input.length != 64 || !RegExp(r'^[a-fA-F0-9]+$').hasMatch(input)) {
        throw Exception('Invalid format');
      }
      setState(() {
        _keyPair = KeyPairInfo(sk: input, pk: "");
        _errorMessage = null;
      });
    } catch (e) {
      setState(() {
        _errorMessage = l10n.secretKeyRestorePageInvalidFormat;
        _keyPair = KeyPairInfo(sk: "", pk: "");
      });
    } finally {
      setState(() => _isValidating = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);
    final theme = Provider.of<AppState>(context).currentTheme;
    final l10n = AppLocalizations.of(context)!;

    return Scaffold(
      body: SafeArea(
        child: Column(
          children: [
            CustomAppBar(
              title: l10n.secretKeyRestorePageTitle,
              onBackPressed: () => Navigator.pop(context),
              actionIcon: SvgPicture.asset(
                'assets/icons/paste.svg',
                width: 30,
                height: 30,
                colorFilter: ColorFilter.mode(
                  theme.textPrimary,
                  BlendMode.srcIn,
                ),
              ),
            ),
            Expanded(
              child: Padding(
                padding: EdgeInsets.symmetric(horizontal: adaptivePadding),
                child: Column(
                  children: [
                    Expanded(
                      flex: 4,
                      child: SingleChildScrollView(
                        child: Column(
                          children: [
                            SmartInput(
                              controller: _privateKeyController,
                              hint: l10n.secretKeyRestorePageHint,
                              onChanged: _validatePrivateKey,
                              keyboardType: TextInputType.text,
                              leftIconPath: 'assets/icons/key.svg',
                              rightIconPath: _isValidating
                                  ? 'assets/icons/loading.svg'
                                  : null,
                              secondaryColor: theme.textSecondary,
                              backgroundColor: theme.cardBackground,
                              textColor: theme.textPrimary,
                              focusedBorderColor: theme.primaryPurple,
                              height: 64,
                              fontSize: 16,
                              padding:
                                  const EdgeInsets.symmetric(horizontal: 16),
                              iconPadding:
                                  const EdgeInsets.symmetric(horizontal: 12),
                            ),
                            if (_errorMessage != null)
                              Padding(
                                padding: const EdgeInsets.only(top: 8),
                                child: Text(
                                  _errorMessage!,
                                  style: TextStyle(
                                    color: theme.danger,
                                    fontSize: 14,
                                  ),
                                ),
                              ),
                            Padding(
                              padding: const EdgeInsets.only(top: 16),
                              child: HexKeyDisplay(
                                hexKey: _keyPair.sk.isNotEmpty
                                    ? _keyPair.sk
                                    : '0000000000000000000000000000000000000000000000000000000000000000',
                                title: l10n.secretKeyRestorePageKeyTitle,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Column(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            Theme(
                              data: Theme.of(context).copyWith(
                                splashFactory: NoSplash.splashFactory,
                                highlightColor: Colors.transparent,
                              ),
                              child: CheckboxListTile(
                                title: Text(
                                  l10n.secretKeyRestorePageBackupLabel,
                                  style: TextStyle(color: theme.textSecondary),
                                ),
                                value: _hasBackup,
                                onChanged: (value) {
                                  if (!_hasBackup) {
                                    showBackupConfirmationModal(
                                      context: context,
                                      onConfirmed: (confirmed) {
                                        setState(() {
                                          _hasBackup = confirmed;
                                        });
                                      },
                                    );
                                  }
                                },
                                controlAffinity:
                                    ListTileControlAffinity.leading,
                                activeColor: theme.primaryPurple,
                              ),
                            ),
                            CustomButton(
                              textColor: theme.buttonText,
                              backgroundColor: theme.primaryPurple,
                              text: l10n.secretKeyRestorePageNextButton,
                              onPressed: _keyPair.sk.isNotEmpty && _hasBackup
                                  ? () {
                                      Navigator.of(context).pushNamed(
                                        '/net_setup',
                                        arguments: {'keys': _keyPair},
                                      );
                                    }
                                  : null,
                              borderRadius: 30.0,
                              height: 56.0,
                              disabled: !(_keyPair.sk.isNotEmpty && _hasBackup),
                            ),
                          ],
                        ),
                      ],
                    ),
                    const SizedBox(
                      height: 16,
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

```

`lib/pages/reveal_bip39.dart`:

```dart
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_svg/svg.dart';
import 'package:provider/provider.dart';
import 'package:screen_protector/screen_protector.dart';
import 'package:zilpay/components/async_qrcode.dart';
import 'package:zilpay/components/button.dart';
import 'package:zilpay/components/custom_app_bar.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/components/tile_button.dart';
import 'package:zilpay/components/load_button.dart';
import 'package:zilpay/services/device.dart';
import 'package:zilpay/src/rust/api/auth.dart';
import 'package:zilpay/src/rust/api/wallet.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/mixins/qrcode.dart';
import 'package:zilpay/theme/app_theme.dart';
import 'package:zilpay/l10n/app_localizations.dart';

class RevealSecretPhrase extends StatefulWidget {
  const RevealSecretPhrase({super.key});

  @override
  State<RevealSecretPhrase> createState() => _RevealSecretPhraseState();
}

class _RevealSecretPhraseState extends State<RevealSecretPhrase> {
  bool isCopied = false;
  bool isAuthenticated = false;
  bool hasError = false;
  bool isTimerActive = false;
  bool canShowPhrase = false;
  String? errorMessage;
  bool _obscurePassword = true;
  String? seedPhrase;
  Timer? _countdownTimer;
  int _remainingTime = 3600;

  final _passwordController = TextEditingController();
  final _passwordInputKey = GlobalKey<SmartInputState>();
  final _btnController = RoundedLoadingButtonController();

  @override
  void initState() {
    _secureScreen();
    super.initState();
  }

  @override
  void dispose() {
    _countdownTimer?.cancel();
    ScreenProtector.preventScreenshotOff();
    ScreenProtector.protectDataLeakageOff();
    ScreenProtector.protectDataLeakageWithBlurOff();
    super.dispose();
  }

  Future<void> _secureScreen() async {
    await ScreenProtector.preventScreenshotOn();
    await ScreenProtector.protectDataLeakageOn();
    await ScreenProtector.protectDataLeakageWithBlur();
  }

  void _startCountdown() {
    setState(() {
      isTimerActive = true;
      _remainingTime = 3600;
    });

    _countdownTimer = Timer.periodic(const Duration(seconds: 1), (timer) {
      setState(() {
        if (_remainingTime > 0) {
          _remainingTime--;
        } else {
          canShowPhrase = true;
          isTimerActive = false;
          timer.cancel();
        }
      });
    });
  }

  String _formatTime(int seconds) {
    final hours = seconds ~/ 3600;
    final minutes = (seconds % 3600) ~/ 60;
    final secs = seconds % 60;
    return '${hours.toString().padLeft(2, '0')}:${minutes.toString().padLeft(2, '0')}:${secs.toString().padLeft(2, '0')}';
  }

  void _onPasswordSubmit(BigInt walletIndex) async {
    _btnController.start();
    try {
      final device = DeviceInfoService();
      final identifiers = await device.getDeviceIdentifiers();

      await tryUnlockWithPassword(
        password: _passwordController.text,
        walletIndex: walletIndex,
        identifiers: identifiers,
      );

      String phrase = await revealBip39Phrase(
        walletIndex: walletIndex,
        identifiers: identifiers,
        password: _passwordController.text,
      );

      setState(() {
        seedPhrase = phrase;
        isAuthenticated = true;
        hasError = false;
        errorMessage = null;
      });

      _btnController.success();
      _startCountdown();
    } catch (e) {
      setState(() {
        isAuthenticated = false;
        hasError = true;
        errorMessage =
            "${AppLocalizations.of(context)!.revealSecretPhraseInvalidPassword} $e";
      });
      _btnController.error();
      await Future.delayed(const Duration(seconds: 1));
      _btnController.reset();
    }
  }

  @override
  Widget build(BuildContext context) {
    final state = Provider.of<AppState>(context);
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);
    final theme = state.currentTheme;

    return Scaffold(
      body: SafeArea(
        child: Column(
          children: [
            CustomAppBar(
              title: AppLocalizations.of(context)!.revealSecretPhraseTitle,
              onBackPressed: () => Navigator.pop(context),
            ),
            Expanded(
              child: SingleChildScrollView(
                padding: EdgeInsets.symmetric(horizontal: adaptivePadding),
                child: Column(
                  children: [
                    _buildScamAlert(theme),
                    if (!isAuthenticated) ...[
                      SmartInput(
                        key: _passwordInputKey,
                        controller: _passwordController,
                        hint: AppLocalizations.of(context)!
                            .revealSecretPhrasePasswordHint,
                        fontSize: 18,
                        height: 50,
                        padding: const EdgeInsets.symmetric(horizontal: 20),
                        focusedBorderColor: theme.primaryPurple,
                        obscureText: _obscurePassword,
                        onSubmitted: (_) => _onPasswordSubmit(
                          BigInt.from(state.selectedWallet),
                        ),
                        rightIconPath: _obscurePassword
                            ? "assets/icons/close_eye.svg"
                            : "assets/icons/open_eye.svg",
                        onRightIconTap: () => setState(
                            () => _obscurePassword = !_obscurePassword),
                      ),
                      if (hasError && errorMessage != null)
                        Container(
                          margin: const EdgeInsets.only(top: 8),
                          child: Text(
                            errorMessage!,
                            style: TextStyle(
                              color: theme.danger,
                              fontSize: 14,
                            ),
                          ),
                        ),
                      const SizedBox(height: 16),
                      Container(
                        constraints: const BoxConstraints(maxWidth: 480),
                        child: RoundedLoadingButton(
                          color: theme.primaryPurple,
                          valueColor: theme.buttonText,
                          controller: _btnController,
                          onPressed: () => _onPasswordSubmit(
                            BigInt.from(state.selectedWallet),
                          ),
                          child: Text(
                            AppLocalizations.of(context)!
                                .revealSecretPhraseSubmitButton,
                            style: TextStyle(
                              color: theme.buttonText,
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      ),
                    ],
                    if (isAuthenticated && isTimerActive && !canShowPhrase) ...[
                      _buildTimerDisplay(theme),
                    ],
                    if (isAuthenticated &&
                        canShowPhrase &&
                        seedPhrase != null) ...[
                      _buildQrCode(theme),
                      _buildPhraseDisplay(theme),
                      SizedBox(height: adaptivePadding),
                      TileButton(
                        icon: SvgPicture.asset(
                          isCopied
                              ? "assets/icons/check.svg"
                              : "assets/icons/copy.svg",
                          width: 24,
                          height: 24,
                          colorFilter: ColorFilter.mode(
                            theme.primaryPurple,
                            BlendMode.srcIn,
                          ),
                        ),
                        onPressed: () => _handleCopy(seedPhrase ?? ""),
                        backgroundColor: theme.cardBackground,
                        textColor: theme.primaryPurple,
                      ),
                      SizedBox(height: adaptivePadding),
                      Container(
                        constraints: const BoxConstraints(maxWidth: 480),
                        padding: EdgeInsets.only(bottom: adaptivePadding),
                        child: CustomButton(
                          textColor: theme.buttonText,
                          backgroundColor: theme.primaryPurple,
                          text: AppLocalizations.of(context)!
                              .revealSecretPhraseDoneButton,
                          onPressed: () => Navigator.pop(context),
                          borderRadius: 30.0,
                          height: 56.0,
                        ),
                      ),
                    ],
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTimerDisplay(AppTheme theme) {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 32),
      padding: const EdgeInsets.all(24),
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: theme.secondaryPurple),
      ),
      child: Column(
        children: [
          SvgPicture.asset(
            "assets/icons/time.svg",
            width: 48,
            height: 48,
            colorFilter: ColorFilter.mode(
              theme.primaryPurple,
              BlendMode.srcIn,
            ),
          ),
          const SizedBox(height: 16),
          Text(
            "Security Timer",
            style: TextStyle(
              color: theme.textPrimary,
              fontSize: 20,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            AppLocalizations.of(context)!.revealSecretPhraseRevealAfter,
            style: TextStyle(
              color: theme.textSecondary,
              fontSize: 14,
            ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 16),
          Text(
            _formatTime(_remainingTime),
            style: TextStyle(
              color: theme.primaryPurple,
              fontSize: 32,
              fontWeight: FontWeight.bold,
              fontFamily: 'monospace',
            ),
          ),
          const SizedBox(height: 16),
          LinearProgressIndicator(
            value: 1 - (_remainingTime / 3600),
            backgroundColor: theme.background,
            valueColor: AlwaysStoppedAnimation(theme.primaryPurple),
            borderRadius: BorderRadius.circular(4),
          ),
        ],
      ),
    );
  }

  Widget _buildScamAlert(AppTheme theme) {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 16),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: theme.danger.withValues(alpha: 0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: theme.danger),
      ),
      child: Column(
        children: [
          Row(
            children: [
              SvgPicture.asset(
                "assets/icons/warning.svg",
                width: 24,
                height: 24,
                colorFilter: ColorFilter.mode(
                  theme.danger,
                  BlendMode.srcIn,
                ),
              ),
              const SizedBox(width: 8),
              Text(
                AppLocalizations.of(context)!.revealSecretPhraseScamAlertTitle,
                style: TextStyle(
                  color: theme.danger,
                  fontWeight: FontWeight.bold,
                  fontSize: 16,
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Text(
            AppLocalizations.of(context)!
                .revealSecretPhraseScamAlertDescription,
            style: TextStyle(
              color: theme.danger,
              fontSize: 14,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildPhraseDisplay(AppTheme theme) {
    final List<String> words = seedPhrase?.split(' ') ?? [];
    final int itemsPerRow = 3;
    final int rowCount = (words.length / itemsPerRow).ceil();

    return Container(
      margin: const EdgeInsets.symmetric(vertical: 16),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: theme.secondaryPurple),
      ),
      child: Column(
        children: List.generate(rowCount, (rowIndex) {
          final startIndex = rowIndex * itemsPerRow;
          final endIndex = (startIndex + itemsPerRow).clamp(0, words.length);

          return Padding(
            padding: const EdgeInsets.only(bottom: 8),
            child: Row(
              children: List.generate(
                endIndex - startIndex,
                (index) => Expanded(
                  child: Container(
                    margin: EdgeInsets.only(
                      right: index != itemsPerRow - 1 ? 8 : 0,
                    ),
                    padding: const EdgeInsets.symmetric(
                      horizontal: 12,
                      vertical: 8,
                    ),
                    decoration: BoxDecoration(
                      color: theme.background,
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Text(
                      '${startIndex + index + 1}. ${words[startIndex + index]}',
                      style: TextStyle(
                        color: theme.textPrimary,
                        fontSize: 10,
                      ),
                    ),
                  ),
                ),
              ),
            ),
          );
        }),
      ),
    );
  }

  Widget _buildQrCode(AppTheme theme) {
    final state = Provider.of<AppState>(context);
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);
    final chain = state.chain!;

    return Container(
      margin: EdgeInsets.symmetric(vertical: adaptivePadding),
      child: Center(
        child: AsyncQRcode(
          data: generateQRSecretData(
            chain: chain.shortName,
            seedPhrase: seedPhrase,
          ),
          size: 160,
          color: theme.danger,
          eyeShape: EyeShape.circle,
          dataModuleShape: DataModuleShape.circle,
          loadingWidget: CircularProgressIndicator(
            color: theme.danger,
          ),
        ),
      ),
    );
  }

  Future<void> _handleCopy(String phrase) async {
    await Clipboard.setData(ClipboardData(text: phrase));
    setState(() {
      isCopied = true;
    });

    await Future<void>.delayed(const Duration(seconds: 1));

    setState(() {
      isCopied = false;
    });
  }
}

```

`lib/pages/reveal_sk.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_svg/svg.dart';
import 'package:provider/provider.dart';
import 'package:screen_protector/screen_protector.dart';
import 'package:zilpay/components/async_qrcode.dart';
import 'package:zilpay/components/button.dart';
import 'package:zilpay/components/custom_app_bar.dart';
import 'package:zilpay/components/hex_key.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/components/tile_button.dart';
import 'package:zilpay/components/load_button.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/mixins/qrcode.dart';
import 'package:zilpay/services/device.dart';
import 'package:zilpay/src/rust/api/auth.dart';
import 'package:zilpay/src/rust/api/wallet.dart';
import 'package:zilpay/src/rust/models/keypair.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/theme/app_theme.dart';
import 'package:zilpay/l10n/app_localizations.dart';

class RevealSecretKey extends StatefulWidget {
  const RevealSecretKey({super.key});

  @override
  State<RevealSecretKey> createState() => _RevealSecretKeyState();
}

class _RevealSecretKeyState extends State<RevealSecretKey> {
  bool isCopied = false;
  bool isAuthenticated = false;
  bool hasError = false;
  String? errorMessage;
  bool _obscurePassword = true;
  KeyPairInfo? keys;

  final _passwordController = TextEditingController();
  final _passwordInputKey = GlobalKey<SmartInputState>();
  final _btnController = RoundedLoadingButtonController();

  @override
  void initState() {
    _secureScreen();
    super.initState();
  }

  @override
  void dispose() {
    ScreenProtector.preventScreenshotOff();
    ScreenProtector.protectDataLeakageOff();
    ScreenProtector.protectDataLeakageWithBlurOff();
    super.dispose();
  }

  Future<void> _secureScreen() async {
    await ScreenProtector.preventScreenshotOn();
    await ScreenProtector.protectDataLeakageOn();
    await ScreenProtector.protectDataLeakageWithBlur();
  }

  void _onPasswordSubmit(BigInt walletIndex, BigInt accountIndex) async {
    final l10n = AppLocalizations.of(context)!;

    _btnController.start();
    try {
      final device = DeviceInfoService();
      final identifiers = await device.getDeviceIdentifiers();

      await tryUnlockWithPassword(
        password: _passwordController.text,
        walletIndex: walletIndex,
        identifiers: identifiers,
      );
      KeyPairInfo keypair = await revealKeypair(
        walletIndex: walletIndex,
        accountIndex: accountIndex,
        identifiers: identifiers,
        password: _passwordController.text,
      );

      setState(() {
        keys = keypair;
        isAuthenticated = true;
        hasError = false;
        errorMessage = null;
      });
      _btnController.success();
    } catch (e) {
      setState(() {
        isAuthenticated = false;
        hasError = true;
        errorMessage = "${l10n.revealSecretKeyInvalidPassword} $e";
      });
      _btnController.error();
      await Future.delayed(const Duration(seconds: 1));
      _btnController.reset();
    }
  }

  @override
  Widget build(BuildContext context) {
    final state = Provider.of<AppState>(context);
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);
    final theme = state.currentTheme;
    final l10n = AppLocalizations.of(context)!;

    return Scaffold(
      body: SafeArea(
        child: Column(
          children: [
            CustomAppBar(
              title: l10n.revealSecretKeyTitle,
              onBackPressed: () => Navigator.pop(context),
            ),
            Expanded(
              child: SingleChildScrollView(
                padding: EdgeInsets.symmetric(horizontal: adaptivePadding),
                child: Column(
                  children: [
                    _buildScamAlert(theme),
                    if (!isAuthenticated) ...[
                      SmartInput(
                        key: _passwordInputKey,
                        controller: _passwordController,
                        hint: l10n.revealSecretKeyPasswordHint,
                        fontSize: 18,
                        height: 50,
                        padding: const EdgeInsets.symmetric(horizontal: 20),
                        focusedBorderColor: theme.primaryPurple,
                        obscureText: _obscurePassword,
                        onSubmitted: (_) => _onPasswordSubmit(
                          BigInt.from(state.selectedWallet),
                          state.wallet!.selectedAccount,
                        ),
                        rightIconPath: _obscurePassword
                            ? "assets/icons/close_eye.svg"
                            : "assets/icons/open_eye.svg",
                        onRightIconTap: () => setState(
                            () => _obscurePassword = !_obscurePassword),
                      ),
                      if (hasError && errorMessage != null)
                        Container(
                          margin: const EdgeInsets.only(top: 8),
                          child: Text(
                            errorMessage!,
                            style: TextStyle(
                              color: theme.danger,
                              fontSize: 14,
                            ),
                          ),
                        ),
                      const SizedBox(height: 16),
                      Container(
                        constraints: const BoxConstraints(maxWidth: 480),
                        child: RoundedLoadingButton(
                          color: theme.primaryPurple,
                          valueColor: theme.buttonText,
                          controller: _btnController,
                          onPressed: () => _onPasswordSubmit(
                            BigInt.from(state.selectedWallet),
                            state.wallet!.selectedAccount,
                          ),
                          child: Text(
                            l10n.revealSecretKeySubmitButton,
                            style: TextStyle(
                              color: theme.buttonText,
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      ),
                    ],
                    if (isAuthenticated) ...[
                      if (keys != null) ...[
                        _buildQrCode(theme),
                        HexKeyDisplay(
                          hexKey: keys!.sk,
                          title: "",
                        )
                      ],
                      SizedBox(height: adaptivePadding),
                      TileButton(
                        icon: SvgPicture.asset(
                          isCopied
                              ? "assets/icons/check.svg"
                              : "assets/icons/copy.svg",
                          width: 24,
                          height: 24,
                          colorFilter: ColorFilter.mode(
                            theme.primaryPurple,
                            BlendMode.srcIn,
                          ),
                        ),
                        onPressed: () => _handleCopy(keys?.sk ?? ""),
                        backgroundColor: theme.cardBackground,
                        textColor: theme.primaryPurple,
                      ),
                      SizedBox(height: adaptivePadding),
                      Container(
                        constraints: const BoxConstraints(maxWidth: 480),
                        padding: EdgeInsets.only(bottom: adaptivePadding),
                        child: CustomButton(
                          textColor: theme.buttonText,
                          backgroundColor: theme.primaryPurple,
                          text: l10n.revealSecretKeyDoneButton,
                          onPressed: () => Navigator.pop(context),
                          borderRadius: 30.0,
                          height: 56.0,
                        ),
                      ),
                    ],
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildScamAlert(AppTheme theme) {
    final l10n = AppLocalizations.of(context)!;

    return Container(
      margin: const EdgeInsets.symmetric(vertical: 16),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: theme.danger.withValues(alpha: 0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: theme.danger),
      ),
      child: Column(
        children: [
          Row(
            children: [
              Icon(
                Icons.warning_amber_rounded,
                color: theme.danger,
                size: 24,
              ),
              const SizedBox(width: 8),
              Text(
                l10n.revealSecretKeyScamAlertTitle,
                style: TextStyle(
                  color: theme.danger,
                  fontWeight: FontWeight.bold,
                  fontSize: 16,
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Text(
            l10n.revealSecretKeyScamAlertMessage,
            style: TextStyle(
              color: theme.danger,
              fontSize: 14,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildQrCode(AppTheme theme) {
    final state = Provider.of<AppState>(context);
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);
    final chain = state.chain!;

    return Container(
      margin: EdgeInsets.symmetric(vertical: adaptivePadding),
      child: Center(
        child: AsyncQRcode(
          data: generateQRSecretData(
            chain: chain.shortName,
            privateKey: keys?.sk,
          ),
          size: 160,
          color: theme.danger,
          eyeShape: EyeShape.circle,
          dataModuleShape: DataModuleShape.circle,
          loadingWidget: CircularProgressIndicator(
            color: theme.danger,
          ),
        ),
      ),
    );
  }

  Future<void> _handleCopy(String key) async {
    await Clipboard.setData(ClipboardData(text: key));
    setState(() {
      isCopied = true;
    });

    await Future<void>.delayed(const Duration(seconds: 1));

    setState(() {
      isCopied = false;
    });
  }
}

```

`lib/pages/security.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/mixins/wallet_type.dart';
import 'package:zilpay/src/rust/api/settings.dart';
import 'package:zilpay/state/app_state.dart';
import '../components/custom_app_bar.dart';
import 'package:zilpay/l10n/app_localizations.dart';

class SecurityPage extends StatefulWidget {
  const SecurityPage({super.key});

  @override
  State<SecurityPage> createState() => _SecurityPageState();
}

class _SecurityPageState extends State<SecurityPage> {
  final TextEditingController _ipfsController = TextEditingController(text: '');

  @override
  void dispose() {
    _ipfsController.dispose();
    super.dispose();
  }

  @override
  void initState() {
    super.initState();

    WidgetsBinding.instance.addPostFrameCallback((_) {
      final state = Provider.of<AppState>(context, listen: false);

      if (state.wallet != null && state.wallet!.settings.ipfsNode != null) {
        _ipfsController.text = state.wallet!.settings.ipfsNode!;
      } else {
        _ipfsController.text = "dweb.link";
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);
    final l10n = AppLocalizations.of(context)!;

    return Scaffold(
      backgroundColor: theme.background,
      body: SafeArea(
        child: Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 480),
            child: Column(
              children: [
                Padding(
                  padding: EdgeInsets.symmetric(horizontal: adaptivePadding),
                  child: CustomAppBar(
                    title: l10n.securityPageTitle,
                    onBackPressed: () => Navigator.pop(context),
                  ),
                ),
                Expanded(
                  child: CustomScrollView(
                    physics: const BouncingScrollPhysics(),
                    slivers: [
                      SliverPadding(
                        padding:
                            EdgeInsets.symmetric(horizontal: adaptivePadding),
                        sliver: SliverList(
                          delegate: SliverChildListDelegate([
                            _buildNetworkSection(appState),
                            const SizedBox(height: 32),
                            if (!appState.wallet!.walletType
                                .contains(WalletType.ledger.name)) ...[
                              // const SizedBox(height: 32)
                            ],
                            _buildEncryptionSection(appState),
                            const SizedBox(height: 32),
                          ]),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildNetworkSection(AppState state) {
    final theme = state.currentTheme;
    final l10n = AppLocalizations.of(context)!;

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.only(left: 16, bottom: 16),
          child: Text(
            l10n.securityPageNetworkPrivacy,
            style: TextStyle(
              color: theme.textSecondary,
              fontSize: 16,
            ),
          ),
        ),
        Container(
          decoration: BoxDecoration(
            color: theme.cardBackground,
            borderRadius: BorderRadius.circular(16),
          ),
          child: Column(
            children: [
              _buildPreferenceItem(
                state,
                l10n.securityPageTokensFetcherTitle,
                'assets/icons/globe.svg',
                l10n.securityPageTokensFetcherDescription,
                true,
                state.wallet!.settings.tokensListFetcher,
                (value) async {
                  await setTokensListFetcher(
                    walletIndex: BigInt.from(state.selectedWallet),
                    enabled: value,
                  );
                  await state.syncData();
                },
              ),
              Divider(
                  height: 1, color: theme.textSecondary.withValues(alpha: 0.1)),
              _buildPreferenceItem(
                state,
                l10n.securityPageEnsDomains,
                'assets/icons/graph.svg',
                l10n.securityPageEnsDescription,
                true,
                state.wallet!.settings.ensEnabled,
                (value) async {
                  await setWalletEns(
                    walletIndex: BigInt.from(state.selectedWallet),
                    ensEnabled: value,
                  );
                  await state.syncData();
                },
              ),
              Divider(
                  height: 1, color: theme.textSecondary.withValues(alpha: 0.1)),
              _buildPreferenceItem(
                state,
                l10n.securityPageIpfsGateway,
                'assets/icons/ipfs.svg',
                l10n.securityPageIpfsDescription,
                true,
                state.wallet!.settings.ipfsNode != null,
                (value) async {
                  await setWalletIpfsNode(
                    walletIndex: BigInt.from(state.selectedWallet),
                    node: value ? _ipfsController.text : null,
                  );
                  await state.syncData();
                },
                showInput: true,
                controller: _ipfsController,
              ),
              Divider(
                  height: 1, color: theme.textSecondary.withValues(alpha: 0.1)),
              _buildPreferenceItem(
                state,
                l10n.securityPageNodeRanking,
                'assets/icons/server.svg',
                l10n.securityPageNodeDescription,
                true,
                state.wallet!.settings.nodeRankingEnabled,
                (value) async {
                  await setWalletNodeRanking(
                    walletIndex: BigInt.from(state.selectedWallet),
                    enabled: value,
                  );
                  await state.syncData();
                },
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildPreferenceItem(
    AppState state,
    String title,
    String iconPath,
    String description,
    bool hasSwitch,
    bool value,
    Function(bool)? onChanged, {
    VoidCallback? onTap,
    bool showInput = false,
    TextEditingController? controller,
  }) {
    final theme = state.currentTheme;

    return GestureDetector(
      onTap: onTap,
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                SvgPicture.asset(
                  iconPath,
                  width: 24,
                  height: 24,
                  colorFilter: ColorFilter.mode(
                    theme.textPrimary,
                    BlendMode.srcIn,
                  ),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Text(
                    title,
                    style: TextStyle(
                      color: theme.textPrimary,
                      fontSize: 16,
                    ),
                  ),
                ),
                if (hasSwitch)
                  Switch(
                    value: value,
                    onChanged: onChanged,
                    activeColor: theme.primaryPurple,
                  )
              ],
            ),
            if (description.isNotEmpty) ...[
              const SizedBox(height: 4),
              Padding(
                padding: const EdgeInsets.only(left: 40),
                child: Text(
                  description,
                  style: TextStyle(
                    color: theme.textSecondary,
                    fontSize: 14,
                  ),
                ),
              ),
            ],
            if (showInput) ...[
              const SizedBox(height: 12),
              Padding(
                padding: const EdgeInsets.only(left: 40),
                child: TextField(
                  controller: controller,
                  readOnly: !value,
                  style: TextStyle(
                    color: value
                        ? theme.textPrimary
                        : theme.textSecondary.withValues(alpha: 0.5),
                    fontSize: 14,
                  ),
                  decoration: InputDecoration(
                    contentPadding: const EdgeInsets.symmetric(
                      horizontal: 12,
                      vertical: 8,
                    ),
                    enabledBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(8),
                      borderSide: BorderSide(
                        color: theme.textSecondary.withValues(alpha: 0.2),
                      ),
                    ),
                    focusedBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(8),
                      borderSide: BorderSide(
                        color: theme.primaryPurple,
                      ),
                    ),
                  ),
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildEncryptionSection(AppState state) {
    final theme = state.currentTheme;
    final algorithms = generateAlgorithms(state.wallet!.settings.cipherOrders);
    final l10n = AppLocalizations.of(context)!;

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.only(left: 16, bottom: 16),
          child: Text(
            l10n.securityPageEncryptionLevel,
            style: TextStyle(
              color: theme.textSecondary,
              fontSize: 16,
            ),
          ),
        ),
        SingleChildScrollView(
          scrollDirection: Axis.horizontal,
          physics: const BouncingScrollPhysics(),
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            child: Row(
              children: [
                for (int i = 0; i < algorithms.length; i++) ...[
                  if (i > 0)
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 8),
                      child: SvgPicture.asset(
                        'assets/icons/chevron_right.svg',
                        width: 16,
                        height: 16,
                        colorFilter: ColorFilter.mode(
                          theme.textSecondary,
                          BlendMode.srcIn,
                        ),
                      ),
                    ),
                  SizedBox(
                    width: 250,
                    child: _buildEncryptionCard(
                      state,
                      algorithms[i],
                    ),
                  ),
                ],
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildEncryptionCard(
    AppState state,
    Algorithm algorithm,
  ) {
    final theme = state.currentTheme;
    final cardWidth = MediaQuery.of(context).size.width > 480
        ? 320.0
        : MediaQuery.of(context).size.width * 0.7;
    final l10n = AppLocalizations.of(context)!;

    return Container(
      width: cardWidth,
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: theme.background,
                  borderRadius: BorderRadius.circular(8),
                ),
                child: SvgPicture.asset(
                  algorithm.icon,
                  width: 24,
                  height: 24,
                  colorFilter: ColorFilter.mode(
                    theme.textPrimary,
                    BlendMode.srcIn,
                  ),
                ),
              ),
              const SizedBox(width: 12),
              Text(
                algorithm.name,
                style: TextStyle(
                  color: theme.textPrimary,
                  fontSize: 16,
                  fontWeight: FontWeight.w500,
                ),
              ),
              const Spacer(),
            ],
          ),
          const SizedBox(height: 16),
          _buildProgressBar(
            state,
            l10n.securityPageProtection,
            algorithm.protection,
            theme.primaryPurple,
          ),
          const SizedBox(height: 12),
          _buildProgressBar(
            state,
            l10n.securityPageCpuLoad,
            algorithm.cpuLoad,
            theme.warning,
          ),
        ],
      ),
    );
  }

  Widget _buildProgressBar(
    AppState state,
    String label,
    double value,
    Color color,
  ) {
    final theme = state.currentTheme;

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(
              label,
              style: TextStyle(
                color: theme.textSecondary,
                fontSize: 12,
              ),
            ),
            Text(
              '${(value * 100).toInt()}%',
              style: TextStyle(
                color: theme.textSecondary,
                fontSize: 12,
              ),
            ),
          ],
        ),
        const SizedBox(height: 4),
        Container(
          height: 4,
          decoration: BoxDecoration(
            color: theme.background,
            borderRadius: BorderRadius.circular(2),
          ),
          child: FractionallySizedBox(
            widthFactor: value,
            child: Container(
              decoration: BoxDecoration(
                color: color,
                borderRadius: BorderRadius.circular(2),
              ),
            ),
          ),
        ),
      ],
    );
  }

  List<Algorithm> generateAlgorithms(List<int> algorithms) {
    final l10n = AppLocalizations.of(context)!;
    final Map<int, Algorithm> algorithmData = {
      0: Algorithm(
        name: l10n.securityPageAes256,
        protection: 0.60,
        cpuLoad: 0.3,
        icon: 'assets/icons/lock.svg',
      ),
      1: Algorithm(
        name: l10n.securityPageKuznechikGost,
        protection: 0.70,
        cpuLoad: 0.2,
        icon: 'assets/icons/grasshopper.svg',
      ),
      2: Algorithm(
        name: l10n.securityPageNtruPrime,
        protection: 0.92,
        cpuLoad: 0.9,
        icon: 'assets/icons/atom.svg',
      ),
      3: Algorithm(
        name: l10n.securityPageCyber,
        protection: 0.70,
        cpuLoad: 0.5,
        icon: 'assets/icons/atom.svg',
      ),
    };

    return algorithms.map((algo) {
      return algorithmData[algo] ??
          Algorithm(
            name: l10n.securityPageUnknown,
            protection: 0.0,
            cpuLoad: 0.0,
            icon: 'assets/icons/lock.svg',
          );
    }).toList();
  }
}

class Algorithm {
  final String name;
  final double protection;
  final double cpuLoad;
  final String icon;

  const Algorithm({
    required this.name,
    required this.protection,
    required this.cpuLoad,
    required this.icon,
  });
}

```

`lib/pages/send.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/button.dart';
import 'package:zilpay/components/custom_app_bar.dart';
import 'package:zilpay/components/input_amount.dart';
import 'package:zilpay/components/number_keyboard.dart';
import 'package:zilpay/components/wallet_selector_card.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/mixins/amount.dart';
import 'package:zilpay/mixins/preprocess_url.dart';
import 'package:zilpay/modals/transfer.dart';
import 'package:zilpay/src/rust/api/transaction.dart';
import 'package:zilpay/src/rust/api/utils.dart';
import 'package:zilpay/src/rust/models/ftoken.dart';
import 'package:zilpay/src/rust/models/qrcode.dart';
import 'package:zilpay/src/rust/models/transactions/request.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/l10n/app_localizations.dart';

class SendTokenPage extends StatefulWidget {
  const SendTokenPage({super.key});

  @override
  State<SendTokenPage> createState() => _SendTokenPageState();
}

class _SendTokenPageState extends State<SendTokenPage> {
  bool _initialized = false;
  int _tokenIndex = 0;
  String _amount = "0";
  bool _hasDecimalPoint = false;
  String? _address;
  String? _walletName;

  late final AppState _appState;

  bool get _isFormValid => _isValidAmount && _isValidAddress;

  bool get _isValidAddress {
    if (_address == null || _address!.isEmpty) {
      return false;
    }

    return true;
  }

  bool get _isValidAmount {
    if (_amount.endsWith('.')) {
      return false;
    }

    try {
      final numAmount = double.parse(_amount);
      final token = _appState.wallet!.tokens[_tokenIndex];
      final bigBalance = BigInt.parse(
          token.balances[_appState.wallet!.selectedAccount] ?? '0');
      final balance =
          fromWei(value: bigBalance.toString(), decimals: token.decimals);

      return numAmount >= 0 && numAmount <= double.parse(balance);
    } catch (e) {
      debugPrint("amount is not valid $e");
      return false;
    }
  }

  void _updateValue(String value) {
    setState(() {
      _amount = value;
    });
  }

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);
    final l10n = AppLocalizations.of(context)!;

    return Scaffold(
      backgroundColor: theme.background,
      body: SafeArea(
        child: Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 480),
            child: Column(
              children: [
                Padding(
                  padding: EdgeInsets.symmetric(horizontal: adaptivePadding),
                  child: CustomAppBar(
                    title: l10n.sendTokenPageTitle,
                    onBackPressed: () => Navigator.pop(context),
                  ),
                ),
                Expanded(
                  child: ScrollConfiguration(
                    behavior: const ScrollBehavior().copyWith(
                      physics: const BouncingScrollPhysics(),
                      overscroll: true,
                    ),
                    child: SingleChildScrollView(
                      physics: const AlwaysScrollableScrollPhysics(),
                      child: Padding(
                        padding:
                            EdgeInsets.symmetric(horizontal: adaptivePadding),
                        child: Column(
                          children: [
                            const SizedBox(height: 16),
                            TokenAmountCard(
                              amount: _amount,
                              tokenIndex: _tokenIndex,
                              onMaxTap: _updateValue,
                              onTokenSelected: (int value) {
                                setState(() {
                                  _tokenIndex = value;
                                  _amount = '0';
                                });
                              },
                            ),
                            SvgPicture.asset(
                              "assets/icons/down_arrow.svg",
                              width: 20,
                              height: 20,
                              colorFilter: ColorFilter.mode(
                                theme.textSecondary.withValues(alpha: 0.1),
                                BlendMode.srcIn,
                              ),
                            ),
                            WalletSelectionCard(
                              address: _address,
                              walletName: _walletName,
                              onChange: updateAddress,
                            ),
                            NumberKeyboard(
                              onKeyPressed: (value) {
                                handleKeyPress(value.toString());
                              },
                              onBackspace: handleBackspace,
                              onDotPress: () => handleKeyPress("."),
                            ),
                            CustomButton(
                              textColor: theme.buttonText,
                              backgroundColor: theme.primaryPurple,
                              text: l10n.sendTokenPageSubmitButton,
                              onPressed: () => handleSubmit(appState),
                              disabled: !_isFormValid,
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();

    if (!_initialized) {
      final args =
          ModalRoute.of(context)?.settings.arguments as Map<String, dynamic>?;
      final int? argTokenIndex = args?['token_index'];

      if (argTokenIndex != null) {
        setState(() {
          _tokenIndex = argTokenIndex;
        });
      }
      _initialized = true;
    }
  }

  void handleBackspace() {
    setState(() {
      if (_amount.length > 1) {
        if (_amount[_amount.length - 1] == '.') {
          _hasDecimalPoint = false;
        }
        _amount = _amount.substring(0, _amount.length - 1);
      } else {
        _amount = "0";
        _hasDecimalPoint = false;
      }
    });
  }

  void handleKeyPress(String value) {
    if (value == ".") {
      if (!_hasDecimalPoint) {
        setState(() {
          _hasDecimalPoint = true;
          if (_amount == "0") {
            _amount = "0.";
          } else {
            _amount += value;
          }
        });
      }
      return;
    }

    setState(() {
      if (_hasDecimalPoint) {
        _amount += value;
      } else {
        if (_amount == "0") {
          _amount = value;
        } else {
          _amount += value;
        }
      }
    });
  }

  void handleSubmit(AppState appState) async {
    if (!_isFormValid) {
      return;
    }

    try {
      BigInt accountIndex = appState.wallet!.selectedAccount;
      FTokenInfo token = appState.wallet!.tokens[_tokenIndex];
      TokenTransferParamsInfo params = TokenTransferParamsInfo(
        walletIndex: BigInt.from(appState.selectedWallet),
        accountIndex: accountIndex,
        token: token,
        amount: toDecimalsWei(_amount, token.decimals).toString(),
        recipient: _address ?? "",
        icon: processTokenLogo(
          token: token,
          shortName: appState.chain?.shortName ?? '',
          theme: appState.currentTheme.value,
        ),
      );

      TransactionRequestInfo tx = await createTokenTransfer(params: params);
      if (!mounted) return;
      showConfirmTransactionModal(
        context: context,
        tx: tx,
        to: _address!,
        token: token,
        amount: _amount,
        onConfirm: (_) {
          Navigator.of(context).pushNamed('/', arguments: {
            'selectedIndex': 1,
          });
        },
      );
    } catch (e) {
      if (!mounted) return;

      String errorMessage = e.toString();

      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          backgroundColor: appState.currentTheme.cardBackground,
          title: Text(
            "Error",
            style: TextStyle(color: appState.currentTheme.textPrimary),
          ),
          content: Text(
            errorMessage,
            style: TextStyle(color: appState.currentTheme.danger),
          ),
          actions: [],
        ),
      );
    }
  }

  @override
  void initState() {
    super.initState();
    _appState = Provider.of<AppState>(context, listen: false);
  }

  void updateAddress(QRcodeScanResultInfo params, String name) {
    setState(() {
      if (params.recipient.isNotEmpty) {
        _address = params.recipient;
      }

      if (params.amount != null && params.amount!.isNotEmpty) {
        _amount = params.amount!;
      }

      _walletName = name;
    });

    Navigator.pop(context);
  }

  void updateAmount(String value) {
    setState(() {
      if (_amount == "0" && value != ".") {
        _amount = value;
      } else {
        _amount += value;
      }
    });
  }
}

```

`lib/pages/settings_page.dart`:

```dart
import 'package:blockies/blockies.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/image_cache.dart';
import 'package:zilpay/components/settings_item.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/components/custom_app_bar.dart';
import 'package:zilpay/mixins/preprocess_url.dart';
import 'package:zilpay/mixins/wallet_type.dart';
import 'package:zilpay/services/social_media.dart';
import 'package:zilpay/src/rust/api/token.dart';
import 'package:zilpay/src/rust/api/wallet.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/l10n/app_localizations.dart';
import '../theme/app_theme.dart';

class SettingsPage extends StatefulWidget {
  const SettingsPage({super.key});

  @override
  State<SettingsPage> createState() => _SettingsPageState();
}

class _SettingsPageState extends State<SettingsPage> {
  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final SocialMediaService socialMediaService = SocialMediaService();
    final theme = appState.currentTheme;
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);

    final Color effectiveBgColor = Theme.of(context).scaffoldBackgroundColor;
    final Brightness backgroundBrightness =
        ThemeData.estimateBrightnessForColor(effectiveBgColor);
    final Brightness statusBarIconBrightness =
        backgroundBrightness == Brightness.light
            ? Brightness.dark
            : Brightness.light;
    final Brightness statusBarBrightness = backgroundBrightness;

    final SystemUiOverlayStyle overlayStyle = SystemUiOverlayStyle(
      statusBarColor: Colors.transparent,
      statusBarIconBrightness: statusBarIconBrightness,
      statusBarBrightness: statusBarBrightness,
    );

    return Scaffold(
      backgroundColor: theme.background,
      appBar: AppBar(
        elevation: 0,
        backgroundColor: Colors.transparent,
        automaticallyImplyLeading: false,
        toolbarHeight: 0,
        systemOverlayStyle: overlayStyle,
      ),
      body: SafeArea(
        child: Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 480),
            child: Column(
              children: [
                Padding(
                  padding: EdgeInsets.symmetric(horizontal: adaptivePadding),
                  child: CustomAppBar(
                    title: AppLocalizations.of(context)!.settingsPageTitle,
                    onBackPressed: () => Navigator.pop(context),
                  ),
                ),
                Expanded(
                  child: ScrollConfiguration(
                    behavior: const ScrollBehavior().copyWith(
                      physics: const BouncingScrollPhysics(),
                      overscroll: true,
                    ),
                    child: SingleChildScrollView(
                      physics: const AlwaysScrollableScrollPhysics(),
                      child: Padding(
                        padding:
                            EdgeInsets.symmetric(horizontal: adaptivePadding),
                        child: Column(
                          children: [
                            _buildWalletSection(theme, appState),
                            const SizedBox(height: 24),
                            _buildSettingsGroup(theme, [
                              if (appState.chain?.slip44 == 313 &&
                                  appState.wallet != null &&
                                  !appState.wallet!.walletType.contains(WalletType
                                      .ledger
                                      .name)) // 313 this is officially  zilliqa slip44 number.
                                Container(
                                  padding: const EdgeInsets.symmetric(
                                      horizontal: 16, vertical: 4),
                                  child: Row(
                                    children: [
                                      SvgPicture.asset(
                                        'assets/icons/scilla.svg',
                                        width: 24,
                                        height: 24,
                                        colorFilter: ColorFilter.mode(
                                          theme.textPrimary,
                                          BlendMode.srcIn,
                                        ),
                                      ),
                                      const SizedBox(width: 12),
                                      Expanded(
                                        child: Text(
                                          AppLocalizations.of(context)!
                                              .settingsPageZilliqaLegacy,
                                          style: TextStyle(
                                            color: theme.textPrimary,
                                            fontSize: 16,
                                          ),
                                        ),
                                      ),
                                      Switch(
                                        padding: EdgeInsets.all(0),
                                        value: appState.account?.addrType == 0,
                                        onChanged: (bool value) async {
                                          BigInt walletIndex = BigInt.from(
                                              appState.selectedWallet);
                                          await zilliqaSwapChain(
                                            walletIndex: walletIndex,
                                            accountIndex: appState
                                                .wallet!.selectedAccount,
                                          );
                                          await appState.syncData();

                                          try {
                                            await syncBalances(
                                              walletIndex: walletIndex,
                                            );
                                            await appState.syncData();
                                          } catch (_) {}
                                        },
                                        activeColor: theme.primaryPurple,
                                        activeTrackColor: theme.primaryPurple
                                            .withValues(alpha: 0.5),
                                      ),
                                    ],
                                  ),
                                ),
                              SettingsItem(
                                title: AppLocalizations.of(context)!
                                    .settingsPageCurrency,
                                trailingSvgPath: 'assets/icons/currency.svg',
                                onTap: () =>
                                    Navigator.pushNamed(context, '/currency'),
                              ),
                              SettingsItem(
                                title: AppLocalizations.of(context)!
                                    .settingsPageAppearance,
                                trailingSvgPath: 'assets/icons/appearance.svg',
                                onTap: () =>
                                    Navigator.pushNamed(context, '/appearance'),
                              ),
                              SettingsItem(
                                title: AppLocalizations.of(context)!
                                    .settingsPageNotifications,
                                trailingSvgPath: 'assets/icons/bell.svg',
                                onTap: () => Navigator.pushNamed(
                                    context, '/notifications'),
                              ),
                              SettingsItem(
                                isFirst: false,
                                isLast: true,
                                title: AppLocalizations.of(context)!
                                    .settingsPageAddressBook,
                                trailingSvgPath: 'assets/icons/book.svg',
                                onTap: () => Navigator.pushNamed(
                                    context, '/address-book'),
                              ),
                            ]),
                            const SizedBox(height: 24),
                            _buildSettingsGroup(theme, [
                              SettingsItem(
                                isFirst: true,
                                isLast: false,
                                title: AppLocalizations.of(context)!
                                    .settingsPageSecurityPrivacy,
                                trailingSvgPath: 'assets/icons/shield.svg',
                                onTap: () =>
                                    Navigator.pushNamed(context, '/security'),
                              ),
                              SettingsItem(
                                title: AppLocalizations.of(context)!
                                    .settingsPageNetworks,
                                trailingSvgPath: 'assets/icons/globe.svg',
                                onTap: () =>
                                    Navigator.pushNamed(context, '/networks'),
                              ),
                              SettingsItem(
                                isFirst: false,
                                isLast: false,
                                title: AppLocalizations.of(context)!
                                    .settingsPageLanguage,
                                trailingSvgPath: 'assets/icons/language.svg',
                                onTap: () =>
                                    Navigator.pushNamed(context, '/language'),
                              ),
                              SettingsItem(
                                title: AppLocalizations.of(context)!
                                    .settingsPageBrowser,
                                trailingSvgPath: 'assets/icons/browser.svg',
                                onTap: () => Navigator.pushNamed(
                                    context, '/browser_settings'),
                              ),
                            ]),
                            const SizedBox(height: 24),
                            _buildSettingsGroup(theme, [
                              SettingsItem(
                                isFirst: true,
                                isLast: false,
                                title: AppLocalizations.of(context)!
                                    .settingsPageTelegram,
                                trailingSvgPath: 'assets/icons/telegram.svg',
                                onTap: () => socialMediaService.openTelegram(
                                    username: 'zilpaychat'),
                              ),
                              SettingsItem(
                                title: AppLocalizations.of(context)!
                                    .settingsPageTwitter,
                                trailingSvgPath: 'assets/icons/x.svg',
                                onTap: () => socialMediaService.openX(
                                    username: 'pay_zil'),
                              ),
                              SettingsItem(
                                title: AppLocalizations.of(context)!
                                    .settingsPageGitHub,
                                trailingSvgPath: 'assets/icons/github.svg',
                                onTap: () => socialMediaService.openGitHub(
                                  username: 'zilpay',
                                  repository: 'zilpay-mobile',
                                ),
                              ),
                              SettingsItem(
                                isFirst: false,
                                isLast: true,
                                title: AppLocalizations.of(context)!
                                    .settingsPageAbout,
                                trailingSvgPath: 'assets/icons/info.svg',
                                onTap: () =>
                                    Navigator.pushNamed(context, '/about'),
                              ),
                            ]),
                            SizedBox(height: adaptivePadding),
                          ],
                        ),
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildWalletSection(AppTheme theme, AppState appState) {
    final chain = appState.chain!;

    return GestureDetector(
      behavior: HitTestBehavior.opaque,
      onTap: () => Navigator.pushNamed(context, '/wallet'),
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: theme.cardBackground,
          borderRadius: BorderRadius.circular(16),
        ),
        child: Row(
          children: [
            Container(
              width: 40,
              height: 40,
              decoration: BoxDecoration(
                color: theme.background,
                borderRadius: BorderRadius.circular(20),
              ),
              child: AsyncImage(
                url: viewChain(network: chain, theme: theme.value),
                width: 32,
                height: 32,
                fit: BoxFit.contain,
                errorWidget: Blockies(
                  seed: appState.wallet!.walletAddress,
                  color: theme.secondaryPurple,
                  bgColor: theme.primaryPurple,
                  spotColor: theme.background,
                  size: 8,
                ),
                loadingWidget: const Center(
                  child: CircularProgressIndicator(
                    strokeWidth: 2,
                  ),
                ),
              ),
            ),
            const SizedBox(width: 16),
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(appState.wallet!.walletName,
                    style: theme.caption.copyWith(
                      color: theme.textSecondary,
                    )),
                Text(
                  appState.chain?.name ?? "",
                  style: theme.headline2.copyWith(
                    color: theme.textPrimary,
                    fontSize: 21,
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSettingsGroup(AppTheme theme, List<Widget> items) {
    return Container(
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: BorderRadius.circular(16),
      ),
      child: Column(
        children: List.generate(items.length, (index) {
          final item = items[index];
          final isLast = index == items.length - 1;
          return Column(
            children: [
              item,
              if (!isLast)
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: Divider(
                    height: 1,
                    color: theme.textSecondary.withValues(alpha: 0.1),
                  ),
                ),
            ],
          );
        }),
      ),
    );
  }
}

```

`lib/pages/setup_cipher.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:zilpay/components/button.dart';
import 'package:zilpay/components/custom_app_bar.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/option_list.dart';
import 'package:zilpay/config/argon.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/modals/argon2.dart';
import 'package:zilpay/src/rust/models/keypair.dart';
import 'package:zilpay/src/rust/models/provider.dart';
import 'package:zilpay/src/rust/models/settings.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/l10n/app_localizations.dart';

class CipherSettingsPage extends StatefulWidget {
  const CipherSettingsPage({super.key});

  @override
  State<CipherSettingsPage> createState() => _CipherSettingsPageState();
}

class _CipherSettingsPageState extends State<CipherSettingsPage> {
  List<String>? _bip39List;
  NetworkConfigInfo? _chain;
  KeyPairInfo? _keys;
  bool _bypassChecksumValidation = false;
  WalletArgonParamsInfo _argonParams = Argon2DefaultParams.owaspDefault();
  int selectedCipherIndex = 2;

  final List<Map<String, String>> cipherDescriptions = [
    {
      'title': '',
      'subtitle': '',
      'description': '',
    },
    {
      'title': '',
      'subtitle': '',
      'description': '',
    },
    {
      'title': '',
      'subtitle': '',
      'description': '',
    },
  ];

  void _onAdvancedPressed() {
    showArgonSettingsModal(
      context: context,
      onParamsSelected: (params) => setState(() => _argonParams = params),
      argonParams: _argonParams,
    );
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    final args =
        ModalRoute.of(context)?.settings.arguments as Map<String, dynamic>?;
    if (args == null) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        Navigator.of(context).pushReplacementNamed('/initial');
      });
      return;
    }
    setState(() {
      _bip39List = args['bip39'] as List<String>?;
      _chain = args['chain'] as NetworkConfigInfo?;
      _keys = args['keys'] as KeyPairInfo?;
      _bypassChecksumValidation = args['ignore_checksum'] as bool? ?? false;
    });

    cipherDescriptions[0]['title'] =
        AppLocalizations.of(context)!.cipherSettingsPageStandardTitle;
    cipherDescriptions[0]['subtitle'] =
        AppLocalizations.of(context)!.cipherSettingsPageStandardSubtitle;
    cipherDescriptions[0]['description'] =
        AppLocalizations.of(context)!.cipherSettingsPageStandardDescription;
    cipherDescriptions[1]['title'] =
        AppLocalizations.of(context)!.cipherSettingsPageHybridTitle;
    cipherDescriptions[1]['subtitle'] =
        AppLocalizations.of(context)!.cipherSettingsPageHybridSubtitle;
    cipherDescriptions[1]['description'] =
        AppLocalizations.of(context)!.cipherSettingsPageHybridDescription;
    cipherDescriptions[2]['title'] =
        AppLocalizations.of(context)!.cipherSettingsPageQuantumTitle;
    cipherDescriptions[2]['subtitle'] =
        AppLocalizations.of(context)!.cipherSettingsPageQuantumSubtitle;
    cipherDescriptions[2]['description'] =
        AppLocalizations.of(context)!.cipherSettingsPageQuantumDescription;
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<AppState>(context).currentTheme;
    final padding = AdaptiveSize.getAdaptivePadding(context, 16);

    return Scaffold(
      body: SafeArea(
        child: Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 480),
            child: Column(
              children: [
                CustomAppBar(
                  title: AppLocalizations.of(context)!.cipherSettingsPageTitle,
                  onBackPressed: () => Navigator.pop(context),
                ),
                Expanded(
                  child: SingleChildScrollView(
                    physics: const BouncingScrollPhysics(),
                    padding: EdgeInsets.symmetric(horizontal: padding),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.end,
                      children: [
                        TextButton(
                          onPressed: _onAdvancedPressed,
                          style: ButtonStyle(
                            overlayColor: const WidgetStatePropertyAll(
                                Colors.transparent),
                            foregroundColor: WidgetStateProperty.resolveWith(
                              (states) => states.contains(WidgetState.pressed)
                                  ? theme.primaryPurple.withValues(alpha: 0.7)
                                  : theme.primaryPurple,
                            ),
                          ),
                          child: Text(
                            AppLocalizations.of(context)!
                                .cipherSettingsPageAdvancedButton,
                            style: const TextStyle(
                                fontSize: 16, fontWeight: FontWeight.w500),
                          ),
                        ),
                        OptionsList(
                          options: List.generate(
                            cipherDescriptions.length,
                            (index) => OptionItem(
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    cipherDescriptions[index]['title']!,
                                    style: TextStyle(
                                      color: theme.textPrimary,
                                      fontSize: 16,
                                      fontWeight: FontWeight.w600,
                                    ),
                                  ),
                                  Text(
                                    cipherDescriptions[index]['subtitle']!,
                                    style: TextStyle(
                                      color: theme.primaryPurple,
                                      fontSize: 14,
                                      fontWeight: FontWeight.w500,
                                    ),
                                  ),
                                  Text(
                                    cipherDescriptions[index]['description']!,
                                    style: TextStyle(
                                      color: theme.textSecondary,
                                      fontSize: 14,
                                    ),
                                  ),
                                ],
                              ),
                              isSelected: selectedCipherIndex == index,
                              onSelect: () =>
                                  setState(() => selectedCipherIndex = index),
                            ),
                          ),
                          unselectedOpacity: 0.5,
                        ),
                      ],
                    ),
                  ),
                ),
                Padding(
                  padding: EdgeInsets.all(padding),
                  child: Column(
                    children: [
                      if (selectedCipherIndex == 2)
                        Text(
                          AppLocalizations.of(context)!
                              .cipherSettingsPageQuantumWarning,
                          style: TextStyle(
                            color: theme.textSecondary,
                            fontSize: 14,
                            fontStyle: FontStyle.italic,
                          ),
                          textAlign: TextAlign.center,
                        ),
                      CustomButton(
                        textColor: theme.buttonText,
                        backgroundColor: theme.primaryPurple,
                        text: AppLocalizations.of(context)!
                            .cipherSettingsPageConfirmButton,
                        onPressed: () => Navigator.of(context).pushNamed(
                          '/pass_setup',
                          arguments: {
                            'bip39': _bip39List,
                            'chain': _chain,
                            'keys': _keys,
                            'cipher': _getCipherOrders(),
                            'argon2': _argonParams,
                            'ignore_checksum': _bypassChecksumValidation,
                          },
                        ),
                        borderRadius: 30.0,
                        height: 50.0,
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Uint8List _getCipherOrders() {
    switch (selectedCipherIndex) {
      case 0:
        return Uint8List.fromList([0, 1]); // AES-256 + KUZNECHIK-GOST
      case 1:
        return Uint8List.fromList([1, 3]); // CYBER + KUZNECHIK-GOST
      case 2:
        return Uint8List.fromList([3, 2, 1]); // CYBER + KUZNECHIK + NTRUP1277
      default:
        return Uint8List.fromList([3, 2, 1]); // CYBER + KUZNECHIK + NTRUP1277
    }
  }
}

```

`lib/pages/setup_net.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:ledger_flutter_plus/ledger_flutter_plus.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/button.dart';
import 'package:zilpay/components/custom_app_bar.dart';
import 'package:zilpay/components/option_list.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/mixins/preprocess_url.dart';
import 'package:zilpay/components/image_cache.dart';
import 'package:zilpay/src/rust/api/provider.dart';
import 'package:zilpay/src/rust/models/keypair.dart';
import 'package:zilpay/src/rust/models/provider.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/theme/app_theme.dart';
import 'package:zilpay/l10n/app_localizations.dart';

class SetupNetworkSettingsPage extends StatefulWidget {
  const SetupNetworkSettingsPage({super.key});

  @override
  State<SetupNetworkSettingsPage> createState() =>
      _SetupNetworkSettingsPageState();
}

class _SetupNetworkSettingsPageState extends State<SetupNetworkSettingsPage> {
  List<String>? _bip39List;
  KeyPairInfo? _keys;
  LedgerDevice? _ledger;
  String? _errorMessage;
  String? _shortName;
  bool _bypassChecksumValidation = false;
  bool _isTestnet = false;

  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';

  int selectedNetworkIndex = 0;
  bool optionsDisabled = false;
  List<NetworkConfigInfo> mainnetNetworks = [];
  List<NetworkConfigInfo> testnetNetworks = [];

  @override
  void initState() {
    super.initState();
    _loadChains();
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    final args =
        ModalRoute.of(context)?.settings.arguments as Map<String, dynamic>?;
    final bip39 = args?['bip39'] as List<String>?;
    final keys = args?['keys'] as KeyPairInfo?;
    final shortName = args?['shortName'] as String?;
    final ledger = args?['ledger'] as LedgerDevice?;
    final bypassChecksumValidation = args?['ignore_checksum'] as bool?;

    if (bip39 == null && keys == null && ledger == null) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        Navigator.of(context).pushReplacementNamed('/initial');
      });
    } else {
      setState(() {
        _bip39List = bip39;
        _ledger = ledger;
        _keys = keys;
        _shortName = shortName;
        _bypassChecksumValidation = bypassChecksumValidation ?? false;
      });
    }
  }

  List<NetworkConfigInfo> get filteredNetworks {
    final networks = _isTestnet ? testnetNetworks : mainnetNetworks;
    if (_searchQuery.isEmpty) {
      return networks;
    }
    return networks.where((network) {
      final searchLower = _searchQuery.toLowerCase();
      return network.name.toLowerCase().contains(searchLower) ||
          network.chain.toLowerCase().contains(searchLower) ||
          network.chainId.toString().contains(searchLower);
    }).toList();
  }

  Future<void> _loadChains() async {
    try {
      final appState = Provider.of<AppState>(context, listen: false);
      final storedProviders = appState.state.providers;

      final String mainnetJsonData =
          await rootBundle.loadString('assets/chains/mainnet-chains.json');
      final String testnetJsonData =
          await rootBundle.loadString('assets/chains/testnet-chains.json');
      final List<NetworkConfigInfo> mainnetChains =
          await getChainsProvidersFromJson(jsonStr: mainnetJsonData);
      final List<NetworkConfigInfo> testnetChains =
          await getChainsProvidersFromJson(jsonStr: testnetJsonData);

      setState(() {
        mainnetNetworks = mainnetChains;
        mainnetNetworks =
            _appendUniqueMainnetNetworks(storedProviders, mainnetNetworks);
        testnetNetworks = testnetChains;

        if (_shortName != null) {
          final networks = _isTestnet ? testnetNetworks : mainnetNetworks;
          int foundIndex =
              networks.indexWhere((network) => network.shortName == _shortName);
          if (foundIndex > 0) {
            selectedNetworkIndex = foundIndex;
          }
        }
      });
    } catch (e) {
      setState(() {
        _errorMessage = '$e';
      });
      debugPrint('Error loading chains: $e');
    }
  }

  List<NetworkConfigInfo> _appendUniqueMainnetNetworks(
      List<NetworkConfigInfo> storedProviders,
      List<NetworkConfigInfo> jsonChains) {
    final Set<String> jsonNetworkIds =
        jsonChains.map(_createNetworkIdentifier).toSet();
    final List<NetworkConfigInfo> uniqueStoredNetworks = [];

    for (final provider in storedProviders) {
      if (!(provider.testnet ?? false)) {
        final identifier = _createNetworkIdentifier(provider);
        if (!jsonNetworkIds.contains(identifier)) {
          uniqueStoredNetworks.add(provider);
        }
      }
    }

    return [...jsonChains, ...uniqueStoredNetworks];
  }

  String _createNetworkIdentifier(NetworkConfigInfo network) {
    return '${network.slip44}|${network.chainId}';
  }

  OptionItem _buildNetworkItem(
      NetworkConfigInfo chain, AppTheme theme, int index) {
    final l10n = AppLocalizations.of(context)!;

    return OptionItem(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              SizedBox(
                width: 40,
                height: 40,
                child: AsyncImage(
                  url: viewChain(network: chain, theme: theme.value),
                  fit: BoxFit.contain,
                  errorWidget: const Icon(Icons.error),
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Expanded(
                          child: Text(
                            chain.name,
                            style: TextStyle(
                              color: theme.textPrimary,
                              fontSize: 16,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                        ),
                        Container(
                          padding: const EdgeInsets.symmetric(
                              horizontal: 8, vertical: 4),
                          decoration: BoxDecoration(
                            color: _isTestnet
                                ? theme.warning.withValues(alpha: 0.2)
                                : theme.success.withValues(alpha: 0.2),
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Text(
                            _isTestnet
                                ? l10n.setupNetworkSettingsPageTestnetLabel
                                : l10n.setupNetworkSettingsPageMainnetLabel,
                            style: TextStyle(
                              color: _isTestnet ? theme.warning : theme.success,
                              fontSize: 12,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 4),
                    Text(
                      '${l10n.setupNetworkSettingsPageChainIdLabel} ${chain.chainIds.where((id) => id != BigInt.zero).toList().join(",")}',
                      style: TextStyle(
                        color: theme.primaryPurple,
                        fontSize: 14,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      '${l10n.setupNetworkSettingsPageTokenLabel} ${chain.chain}',
                      style: TextStyle(
                        color: theme.textSecondary,
                        fontSize: 14,
                      ),
                    ),
                    if (chain.explorers.isNotEmpty) ...[
                      const SizedBox(height: 4),
                      Text(
                        '${l10n.setupNetworkSettingsPageExplorerLabel} ${chain.explorers.first.name}',
                        style: TextStyle(
                          color: theme.textSecondary,
                          fontSize: 12,
                        ),
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                      ),
                    ],
                  ],
                ),
              ),
            ],
          ),
        ],
      ),
      isSelected: selectedNetworkIndex == index,
      onSelect: () => setState(() => selectedNetworkIndex = index),
    );
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<AppState>(context).currentTheme;
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);
    final l10n = AppLocalizations.of(context)!;

    return Scaffold(
      body: SafeArea(
        child: Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 480),
            child: Column(
              children: [
                CustomAppBar(
                  actionWidget: Row(
                    children: [
                      Text(
                        l10n.setupNetworkSettingsPageTestnetSwitch,
                        style: TextStyle(
                          color: theme.textSecondary,
                          fontSize: 14,
                        ),
                      ),
                      const SizedBox(width: 8),
                      Switch(
                        value: _isTestnet,
                        onChanged: (value) {
                          setState(() {
                            _isTestnet = value;
                            selectedNetworkIndex = 0;
                          });
                        },
                        activeColor: theme.primaryPurple,
                      ),
                    ],
                  ),
                  onBackPressed: () => Navigator.pop(context),
                ),
                Padding(
                  padding: EdgeInsets.all(adaptivePadding),
                  child: SmartInput(
                    controller: _searchController,
                    hint: l10n.setupNetworkSettingsPageSearchHint,
                    leftIconPath: 'assets/icons/search.svg',
                    onChanged: (value) => setState(() => _searchQuery = value),
                    borderColor: theme.textPrimary,
                    focusedBorderColor: theme.primaryPurple,
                    height: 48,
                    fontSize: 16,
                    padding: const EdgeInsets.symmetric(horizontal: 16),
                  ),
                ),
                if (_errorMessage != null)
                  Padding(
                    padding: EdgeInsets.all(adaptivePadding),
                    child: Text(
                      _errorMessage!,
                      style: TextStyle(
                        color: theme.danger,
                        fontSize: 14,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  )
                else if (filteredNetworks.isEmpty)
                  Expanded(
                    child: Center(
                      child: Text(
                        mainnetNetworks.isEmpty && testnetNetworks.isEmpty
                            ? l10n.setupNetworkSettingsPageNoNetworks
                            : l10n.setupNetworkSettingsPageNoResults(
                                _searchQuery),
                        style: TextStyle(
                          color: theme.textSecondary,
                          fontSize: 16,
                        ),
                      ),
                    ),
                  )
                else
                  Expanded(
                    child: SingleChildScrollView(
                      physics: const BouncingScrollPhysics(),
                      child: Padding(
                        padding:
                            EdgeInsets.symmetric(horizontal: adaptivePadding),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            OptionsList(
                              disabled: optionsDisabled,
                              options: List.generate(
                                filteredNetworks.length,
                                (index) => _buildNetworkItem(
                                    filteredNetworks[index], theme, index),
                              ),
                              unselectedOpacity: 0.5,
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                Padding(
                  padding: EdgeInsets.all(adaptivePadding),
                  child: CustomButton(
                    textColor: theme.buttonText,
                    backgroundColor: theme.primaryPurple,
                    text: l10n.setupNetworkSettingsPageNextButton,
                    onPressed: filteredNetworks.isEmpty
                        ? () {}
                        : () {
                            final chain = _isTestnet
                                ? testnetNetworks[selectedNetworkIndex]
                                : mainnetNetworks[selectedNetworkIndex];

                            if (_ledger != null) {
                              Navigator.of(context).pushNamed(
                                '/add_ledger_account',
                                arguments: {
                                  'chain': chain,
                                  'isTestnet': _isTestnet,
                                  'ledger': _ledger,
                                },
                              );
                              return;
                            } else {
                              Navigator.of(context).pushNamed(
                                '/cipher_setup',
                                arguments: {
                                  'bip39': _bip39List,
                                  'keys': _keys,
                                  'chain': chain,
                                  'isTestnet': _isTestnet,
                                  'ignore_checksum': _bypassChecksumValidation,
                                },
                              );
                            }
                          },
                    borderRadius: 30.0,
                    height: 56.0,
                  ),
                )
              ],
            ),
          ),
        ),
      ),
    );
  }
}

```

`lib/pages/sk_gen.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_svg/svg.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/button.dart';
import 'package:zilpay/components/custom_app_bar.dart';
import 'package:zilpay/components/hex_key.dart';
import 'package:zilpay/components/tile_button.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/modals/backup_confirmation_modal.dart';
import 'package:zilpay/src/rust/api/methods.dart';
import 'package:zilpay/src/rust/models/keypair.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/l10n/app_localizations.dart';

class SecretKeyGeneratorPage extends StatefulWidget {
  const SecretKeyGeneratorPage({super.key});

  @override
  State<SecretKeyGeneratorPage> createState() => _CreateAccountPageState();
}

class _CreateAccountPageState extends State<SecretKeyGeneratorPage> {
  KeyPairInfo _keyPair = KeyPairInfo(sk: "", pk: "");
  bool _hasBackupWords = false;
  bool isCopied = false;

  @override
  void initState() {
    super.initState();
    _regenerateKeys();
  }

  Future<void> _regenerateKeys() async {
    KeyPairInfo keyPair = await genKeypair();
    setState(() {
      _hasBackupWords = false;
      _keyPair = keyPair;
    });
  }

  @override
  Widget build(BuildContext context) {
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);
    final theme = Provider.of<AppState>(context).currentTheme;
    final l10n = AppLocalizations.of(context)!;

    return Scaffold(
      body: SafeArea(
        child: Column(
          children: [
            CustomAppBar(
              title: l10n.secretKeyGeneratorPageTitle,
              onBackPressed: () => Navigator.pop(context),
              actionIcon: SvgPicture.asset(
                'assets/icons/reload.svg',
                width: 30,
                height: 30,
                colorFilter: ColorFilter.mode(
                  theme.textPrimary,
                  BlendMode.srcIn,
                ),
              ),
              onActionPressed: _regenerateKeys,
            ),
            Expanded(
              child: Padding(
                padding: EdgeInsets.symmetric(horizontal: adaptivePadding),
                child: Column(
                  children: [
                    Expanded(
                      flex: 4,
                      child: SingleChildScrollView(
                        child: Column(
                          children: [
                            HexKeyDisplay(
                              hexKey: _keyPair.sk,
                              title: l10n.secretKeyGeneratorPagePrivateKey,
                            ),
                            const SizedBox(height: 16),
                            HexKeyDisplay(
                              hexKey: _keyPair.pk,
                              title: l10n.secretKeyGeneratorPagePublicKey,
                            ),
                          ],
                        ),
                      ),
                    ),
                    SizedBox(
                      height: MediaQuery.of(context).size.height * 0.3,
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Container(
                            constraints: const BoxConstraints(maxWidth: 480),
                            child: Column(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                Row(
                                  children: [
                                    Expanded(
                                      child: Theme(
                                        data: Theme.of(context).copyWith(
                                          splashFactory: NoSplash.splashFactory,
                                          highlightColor: Colors.transparent,
                                        ),
                                        child: CheckboxListTile(
                                          title: Text(
                                            l10n.secretKeyGeneratorPageBackupCheckbox,
                                            style: TextStyle(
                                              color: theme.textSecondary,
                                            ),
                                          ),
                                          value: _hasBackupWords,
                                          onChanged: (_) {
                                            if (!_hasBackupWords) {
                                              showBackupConfirmationModal(
                                                context: context,
                                                onConfirmed: (confirmed) {
                                                  setState(() {
                                                    _hasBackupWords = confirmed;
                                                  });
                                                },
                                              );
                                            }
                                          },
                                          controlAffinity:
                                              ListTileControlAffinity.leading,
                                          activeColor: theme.primaryPurple,
                                        ),
                                      ),
                                    ),
                                    TileButton(
                                      icon: SvgPicture.asset(
                                        isCopied
                                            ? "assets/icons/check.svg"
                                            : "assets/icons/copy.svg",
                                        width: 24,
                                        height: 24,
                                        colorFilter: ColorFilter.mode(
                                          theme.primaryPurple,
                                          BlendMode.srcIn,
                                        ),
                                      ),
                                      disabled: false,
                                      onPressed: () async {
                                        await _handleCopy(_keyPair.sk);
                                      },
                                      backgroundColor: theme.cardBackground,
                                      textColor: theme.primaryPurple,
                                    ),
                                  ],
                                ),
                                const SizedBox(
                                  height: 16,
                                ),
                                CustomButton(
                                  textColor: theme.buttonText,
                                  backgroundColor: theme.primaryPurple,
                                  text: l10n.secretKeyGeneratorPageNextButton,
                                  onPressed: () {
                                    Navigator.of(context).pushNamed(
                                      '/net_setup',
                                      arguments: {'keys': _keyPair},
                                    );
                                  },
                                  borderRadius: 30.0,
                                  height: 56.0,
                                  disabled: !_hasBackupWords,
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _handleCopy(String address) async {
    await Clipboard.setData(ClipboardData(text: address));
    setState(() {
      isCopied = true;
    });
    await Future<void>.delayed(const Duration(seconds: 2));
    setState(() {
      isCopied = false;
    });
  }
}

```

`lib/pages/verify_bip39.dart`:

```dart
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:zilpay/components/button.dart';
import 'package:zilpay/components/custom_app_bar.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/mnemonic_word_input.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/l10n/app_localizations.dart';

List<int> getRandomNumbers(int min, int max, int count) {
  final random = Random();
  Set<int> numbers = {};

  while (numbers.length < count) {
    int randomNumber = min + random.nextInt(max - min);
    numbers.add(randomNumber);
  }

  return numbers.toList();
}

const maxNumbers = 4;

class SecretPhraseVerifyPage extends StatefulWidget {
  const SecretPhraseVerifyPage({
    super.key,
  });

  @override
  State<SecretPhraseVerifyPage> createState() => _VerifyBip39PageState();
}

class _VerifyBip39PageState extends State<SecretPhraseVerifyPage> {
  List<String>? _bip39List;
  List<int> _indexes = [];
  final List<String> _verifyWords =
      List<String>.filled(maxNumbers, '', growable: false);

  void _generateIndexes() {
    if (_bip39List != null && _bip39List!.isNotEmpty) {
      setState(() {
        _indexes = getRandomNumbers(0, _bip39List!.length, maxNumbers);
      });
    }
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    final args = ModalRoute.of(context)?.settings.arguments
        as Map<String, List<String>>?;

    if (args == null || args['bip39'] == null || args['bip39']!.isEmpty) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        Navigator.of(context).pushReplacementNamed('/initial');
      });
    } else {
      setState(() {
        _bip39List = args['bip39'];
        _generateIndexes();
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<AppState>(context).currentTheme;

    return Scaffold(
      body: SafeArea(
        child: Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 480),
            child: Column(
              children: [
                CustomAppBar(
                  title:
                      AppLocalizations.of(context)!.secretPhraseVerifyPageTitle,
                  onBackPressed: () => Navigator.pop(context),
                  // actionWidget: TextButton(
                  //   onPressed: () {
                  //     Navigator.of(context).pushNamed('/net_setup',
                  //         arguments: {'bip39': _bip39List});
                  //   },
                  //   child: Text(
                  //     AppLocalizations.of(context)!
                  //         .secretPhraseVerifyPageSkipButton,
                  //     style: TextStyle(
                  //       color: theme.textPrimary,
                  //       fontSize: 16,
                  //       fontWeight: FontWeight.w500,
                  //     ),
                  //   ),
                  // ),
                ),
                Expanded(
                  child: _bip39List == null
                      ? const Center(child: CircularProgressIndicator())
                      : Padding(
                          padding: const EdgeInsets.symmetric(horizontal: 16.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                AppLocalizations.of(context)!
                                    .secretPhraseVerifyPageSubtitle,
                                style: TextStyle(
                                  fontSize: 24,
                                  fontWeight: FontWeight.bold,
                                  color: theme.textPrimary,
                                ),
                              ),
                              const SizedBox(height: 16),
                              Expanded(
                                child: ListView.builder(
                                  physics: const BouncingScrollPhysics(),
                                  itemCount: maxNumbers,
                                  itemBuilder: (context, index) {
                                    final wordIndex = _indexes[index];
                                    final displayIndex = wordIndex + 1;

                                    return Padding(
                                      padding: const EdgeInsets.symmetric(
                                          vertical: 8.0),
                                      child: MnemonicWordInput(
                                        index: displayIndex,
                                        word: _verifyWords[index],
                                        isEditable: true,
                                        borderColor: _verifyWords[index] == ''
                                            ? theme.textSecondary
                                            : _bip39List![wordIndex] ==
                                                    _verifyWords[index]
                                                ? Colors.green
                                                : Colors.red,
                                        onChanged: (_, newWord) {
                                          setState(() {
                                            _verifyWords[index] = newWord;
                                          });
                                        },
                                      ),
                                    );
                                  },
                                ),
                              ),
                              Padding(
                                padding:
                                    const EdgeInsets.symmetric(vertical: 16.0),
                                child: CustomButton(
                                  textColor: theme.buttonText,
                                  backgroundColor: theme.primaryPurple,
                                  text: AppLocalizations.of(context)!
                                      .secretPhraseVerifyPageNextButton,
                                  onPressed: () {
                                    Navigator.of(context).pushNamed(
                                        '/net_setup',
                                        arguments: {'bip39': _bip39List});
                                  },
                                  borderRadius: 30.0,
                                  height: 56.0,
                                  disabled: !isVerified,
                                ),
                              ),
                            ],
                          ),
                        ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  bool get isVerified {
    if (_bip39List == null ||
        _indexes.length != maxNumbers ||
        _verifyWords.length != maxNumbers) {
      return false;
    }

    for (int i = 0; i < maxNumbers; i++) {
      int bip39Index = _indexes[i];

      if (bip39Index < 0 || bip39Index >= _bip39List!.length) {
        return false;
      }

      if (_bip39List![bip39Index].trim().toLowerCase() !=
          _verifyWords[i].trim().toLowerCase()) {
        return false;
      }
    }

    return true;
  }
}

```

`lib/pages/wallet.dart`:

```dart
import 'package:blockies/blockies.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/image_cache.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/components/custom_app_bar.dart';
import 'package:zilpay/components/biometric_switch.dart';
import 'package:zilpay/mixins/preprocess_url.dart';
import 'package:zilpay/mixins/wallet_type.dart';
import 'package:zilpay/modals/confirm_password.dart';
import 'package:zilpay/modals/delete_wallet.dart';
import 'package:zilpay/modals/manage_connections.dart';
import 'package:zilpay/modals/secret_recovery_modal.dart';
import 'package:zilpay/services/auth_guard.dart';
import 'package:zilpay/services/biometric_service.dart';
import 'package:zilpay/services/device.dart';
import 'package:zilpay/src/rust/api/connections.dart';
import 'package:zilpay/src/rust/api/wallet.dart';
import 'package:zilpay/state/app_state.dart';
import '../theme/app_theme.dart';
import 'package:zilpay/l10n/app_localizations.dart';

class WalletPreferenceItem {
  final String title;
  final String iconPath;
  final bool hasSwitch;
  final bool switchValue;
  final bool switchEnabled;
  final Function(bool)? onChanged;
  final VoidCallback? onTap;

  WalletPreferenceItem({
    required this.title,
    required this.iconPath,
    this.hasSwitch = false,
    this.switchValue = false,
    this.switchEnabled = true,
    this.onChanged,
    this.onTap,
  });
}

class WalletPage extends StatefulWidget {
  const WalletPage({super.key});

  @override
  State<WalletPage> createState() => _WalletPageState();
}

class _WalletPageState extends State<WalletPage> {
  late final AuthGuard _authGuard;
  final AuthService _authService = AuthService();
  final TextEditingController _walletNameController = TextEditingController();
  static const double _avatarSize = 80.0;
  static const double _borderRadius = 12.0;
  static const double _iconSize = 24.0;
  static const double _fontSize = 16.0;

  List<AuthMethod> _authMethods = [AuthMethod.none];
  bool _biometricsAvailable = false;
  bool _isBiometricLoading = false;

  @override
  void initState() {
    super.initState();
    _authGuard = Provider.of<AuthGuard>(context, listen: false);
    final appState = Provider.of<AppState>(context, listen: false);
    _walletNameController.text = appState.wallet!.walletName;
    appState.syncConnections();
    _checkAuthMethods();
  }

  @override
  void dispose() {
    _walletNameController.dispose();
    super.dispose();
  }

  Future<void> _checkAuthMethods() async {
    try {
      final methods = await _authService.getAvailableAuthMethods();

      setState(() {
        _authMethods = methods;
        _biometricsAvailable =
            methods.isNotEmpty && methods.first != AuthMethod.none;
      });
    } catch (e) {
      debugPrint("Error checking auth methods: $e");
      setState(() {
        _authMethods = [AuthMethod.none];
        _biometricsAvailable = false;
      });
    }
  }

  void _handleDappDisconnect(String url) async {
    AppState appState = Provider.of<AppState>(context, listen: false);
    await removeConnections(
      walletIndex: BigInt.from(appState.selectedWallet),
      domain: url,
    );
    await appState.syncConnections();
  }

  Future<void> _handleToggleBiometric(bool enable, AppState appState) async {
    if (_isBiometricLoading) return;

    setState(() {
      _isBiometricLoading = true;
    });

    try {
      final wallet = appState.wallet;
      if (wallet == null) {
        setState(() {
          _isBiometricLoading = false;
        });
        return;
      }

      final device = DeviceInfoService();
      final identifiers = await device.getDeviceIdentifiers();

      if (enable && mounted) {
        showConfirmPasswordModal(
          context: context,
          theme: appState.currentTheme,
          onDismiss: () {
            if (mounted) {
              setState(() {
                _isBiometricLoading = false;
              });
            }
          },
          onConfirm: (password) async {
            try {
              final authenticated = await _authService.authenticate(
                allowPinCode: true,
                reason: AppLocalizations.of(context)!.walletPageBiometricReason,
              );

              if (!authenticated) {
                return "Authorization declined for biometrics";
              }

              final biometricType = _authMethods.first.name;

              final session = await setBiometric(
                walletIndex: BigInt.from(appState.selectedWallet),
                identifiers: identifiers,
                password: password,
                newBiometricType: biometricType,
              );

              if (session != null) {
                await _authGuard.setSession(wallet.walletAddress, session);
              }

              await appState.syncData();

              if (mounted) {
                setState(() {
                  _isBiometricLoading = false;
                });
              }

              return null;
            } catch (e) {
              return e.toString();
            }
          },
        );
      } else {
        String? sessionCipher;

        try {
          sessionCipher = await _authGuard.getSession(
            sessionKey: wallet.walletAddress,
            requireAuth: false,
          );
        } catch (e) {
          debugPrint("No session available for disabling biometrics: $e");
        }

        await setBiometric(
          walletIndex: BigInt.from(appState.selectedWallet),
          identifiers: identifiers,
          password: "",
          sessionCipher: sessionCipher,
          newBiometricType: AuthMethod.none.name,
        );
        await _authGuard.setSession(wallet.walletAddress, "");

        if (mounted) {
          setState(() {
            _isBiometricLoading = false;
          });
        }
      }
    } catch (e) {
      debugPrint("Error changing biometric: $e");
      if (mounted) {
        setState(() {
          _isBiometricLoading = false;
        });
      }
    } finally {
      await appState.syncData();
    }
  }

  List<WalletPreferenceItem> _getPreferenceItems(AppState appState) {
    final l10n = AppLocalizations.of(context)!;
    final List<WalletPreferenceItem> items = [];

    items.add(
      WalletPreferenceItem(
        title: l10n.walletPageManageConnections,
        iconPath: 'assets/icons/globe.svg',
        onTap: () {
          if (appState.connections.isNotEmpty) {
            showConnectedDappsModal(
              context: context,
              onDappDisconnect: _handleDappDisconnect,
            );
          }
        },
      ),
    );

    if (!appState.wallet!.walletType.contains(WalletType.ledger.name)) {
      items.add(
        WalletPreferenceItem(
          title: l10n.walletPageBackup,
          iconPath: 'assets/icons/key.svg',
          onTap: () {
            if (!appState.wallet!.walletType.contains(WalletType.ledger.name)) {
              _handleBackup(appState.currentTheme);
            }
          },
        ),
      );
    }

    return items;
  }

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);

    final Color effectiveBgColor = Theme.of(context).scaffoldBackgroundColor;
    final Brightness backgroundBrightness =
        ThemeData.estimateBrightnessForColor(effectiveBgColor);
    final Brightness statusBarIconBrightness =
        backgroundBrightness == Brightness.light
            ? Brightness.dark
            : Brightness.light;
    final Brightness statusBarBrightness = backgroundBrightness;

    final SystemUiOverlayStyle overlayStyle = SystemUiOverlayStyle(
      statusBarColor: Colors.transparent,
      statusBarIconBrightness: statusBarIconBrightness,
      statusBarBrightness: statusBarBrightness,
    );

    return Scaffold(
      backgroundColor: theme.background,
      appBar: AppBar(
        elevation: 0,
        backgroundColor: Colors.transparent,
        automaticallyImplyLeading: false,
        toolbarHeight: 0,
        systemOverlayStyle: overlayStyle,
      ),
      body: SafeArea(
        child: Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 480),
            child: CustomScrollView(
              slivers: [
                SliverToBoxAdapter(
                  child: Padding(
                    padding: EdgeInsets.symmetric(horizontal: adaptivePadding),
                    child: CustomAppBar(
                      title: "",
                      onBackPressed: () => Navigator.pop(context),
                    ),
                  ),
                ),
                SliverPadding(
                  padding: EdgeInsets.symmetric(horizontal: adaptivePadding),
                  sliver: SliverList(
                    delegate: SliverChildListDelegate([
                      Center(child: _buildWalletHeader(theme, appState)),
                      const SizedBox(height: 16),
                      _buildWalletNameInput(theme, appState),
                      const SizedBox(height: 32),
                      _buildPreferencesSection(appState),
                    ]),
                  ),
                ),
                SliverFillRemaining(
                  hasScrollBody: false,
                  fillOverscroll: true,
                  child: Padding(
                    padding: EdgeInsets.only(
                      left: adaptivePadding,
                      right: adaptivePadding,
                      bottom: 24 + MediaQuery.of(context).viewInsets.bottom,
                    ),
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: [
                        _buildRemoveWalletButton(appState),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
      resizeToAvoidBottomInset: true,
    );
  }

  Widget _buildWalletHeader(AppTheme theme, AppState appState) {
    return SizedBox(
      width: _avatarSize,
      height: _avatarSize,
      child: Container(
        decoration: BoxDecoration(
          color: theme.background,
          borderRadius: BorderRadius.circular(_avatarSize / 2),
        ),
        child: ClipRRect(
          borderRadius: BorderRadius.circular(_avatarSize / 2),
          child: Transform.scale(
            scale: 1.0,
            child: AsyncImage(
              url: viewChain(network: appState.chain!, theme: theme.value),
              width: 32,
              height: 32,
              fit: BoxFit.contain,
              errorWidget: Blockies(
                seed: appState.wallet!.walletAddress,
                color: theme.secondaryPurple,
                bgColor: theme.primaryPurple,
                spotColor: theme.background,
                size: 8,
              ),
              loadingWidget: const Center(
                child: CircularProgressIndicator(
                  strokeWidth: 2,
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildWalletNameInput(AppTheme theme, AppState state) {
    return SmartInput(
      controller: _walletNameController,
      hint: AppLocalizations.of(context)!.walletPageWalletNameHint,
      onSubmitted: (_) async {
        if (_walletNameController.text.isNotEmpty) {
          await changeWalletName(
            walletIndex: BigInt.from(state.selectedWallet),
            newName: _walletNameController.text,
          );
          await state.syncData();
        }
      },
      height: 50,
      rightIconPath: "assets/icons/edit.svg",
      borderColor: theme.cardBackground,
      focusedBorderColor: theme.primaryPurple,
      fontSize: _fontSize,
    );
  }

  Widget _buildPreferencesSection(AppState appState) {
    final theme = appState.currentTheme;

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.only(left: 16, bottom: 16),
          child: Text(
            AppLocalizations.of(context)!.walletPagePreferencesTitle,
            style: TextStyle(
              color: theme.textSecondary,
              fontSize: _fontSize,
            ),
          ),
        ),
        Container(
          decoration: BoxDecoration(
            color: theme.cardBackground,
            borderRadius: BorderRadius.circular(_borderRadius),
          ),
          child: Column(
            children: _buildPreferenceItems(appState),
          ),
        ),
      ],
    );
  }

  List<Widget> _buildPreferenceItems(AppState appState) {
    final theme = appState.currentTheme;
    final items = _getPreferenceItems(appState);
    final List<Widget> widgets = [];

    if (_biometricsAvailable && _authMethods.first != AuthMethod.none) {
      widgets.add(
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
          child: BiometricSwitch(
            biometricType: _authMethods.first,
            value: AuthMethod.none.name != appState.wallet?.authType,
            disabled: false,
            isLoading: _isBiometricLoading,
            onChanged: (value) => _handleToggleBiometric(value, appState),
          ),
        ),
      );

      if (items.isNotEmpty) {
        widgets.add(Divider(
          height: 1,
          color: theme.textSecondary.withValues(alpha: 0.1),
        ));
      }
    }

    for (var i = 0; i < items.length; i++) {
      widgets.add(_buildPreferenceItem(theme, items[i], appState));
      if (i < items.length - 1) {
        widgets.add(Divider(
          height: 1,
          color: theme.textSecondary.withValues(alpha: 0.1),
        ));
      }
    }

    return widgets;
  }

  Widget _buildPreferenceItem(
      AppTheme theme, WalletPreferenceItem item, AppState appState) {
    return GestureDetector(
      onTap: item.onTap,
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        child: Row(
          children: [
            SvgPicture.asset(
              item.iconPath,
              width: _iconSize,
              height: _iconSize,
              colorFilter: ColorFilter.mode(
                theme.textPrimary,
                BlendMode.srcIn,
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Text(
                item.title,
                style: TextStyle(
                  color: theme.textPrimary,
                  fontSize: _fontSize,
                ),
              ),
            ),
            if (item.hasSwitch)
              Switch(
                value: item.switchValue,
                onChanged: item.switchEnabled ? item.onChanged : null,
                activeColor: theme.primaryPurple,
              )
            else if (item.title ==
                AppLocalizations.of(context)!.walletPageManageConnections)
              Text(
                '${appState.connections.length}',
                style: TextStyle(
                  color: theme.textSecondary,
                  fontSize: _fontSize,
                ),
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildRemoveWalletButton(AppState appState) {
    return GestureDetector(
      behavior: HitTestBehavior.opaque,
      onTap: () async {
        showDeleteWalletModal(context: context, state: appState);
      },
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        decoration: BoxDecoration(
          color: Colors.red.withValues(alpha: 0.1),
          borderRadius: BorderRadius.circular(_borderRadius),
        ),
        child: Row(
          children: [
            const SizedBox(width: 16),
            Expanded(
              child: Text(
                AppLocalizations.of(context)!.walletPageDeleteWallet,
                style: const TextStyle(
                  color: Colors.red,
                  fontSize: _fontSize,
                ),
              ),
            ),
            SvgPicture.asset(
              'assets/icons/logout.svg',
              colorFilter: const ColorFilter.mode(
                Colors.red,
                BlendMode.srcIn,
              ),
              width: _iconSize,
              height: _iconSize,
            ),
          ],
        ),
      ),
    );
  }

  void _handleBackup(AppTheme theme) {
    showSecretRecoveryModal(context: context, theme: theme);
  }
}

```

`lib/pages/wallet_restore_options.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:provider/provider.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:zilpay/l10n/app_localizations.dart';
import 'package:zilpay/mixins/qrcode.dart';
import 'package:zilpay/modals/qr_scanner_modal.dart';
import 'package:zilpay/src/rust/api/methods.dart';
import 'package:zilpay/src/rust/api/provider.dart';
import 'package:zilpay/src/rust/models/keypair.dart';
import 'package:zilpay/state/app_state.dart';
import '../components/view_item.dart';

class RestoreWalletOptionsPage extends StatelessWidget {
  const RestoreWalletOptionsPage({super.key});

  void _handleBip39Restore(BuildContext context) {
    Navigator.of(context).pushNamed('/restore_bip39');
  }

  void _handlePrivateKeyRestore(BuildContext context) {
    Navigator.of(context).pushNamed('/restore_sk');
  }

  void _handleKeystoreResotre(BuildContext context) {
    Navigator.of(context).pushNamed('/keystore_file_restore');
  }

  void _handleQRCodeScanning(BuildContext context) {
    showQRScannerModal(
      context: context,
      onScanned: (String qrData) async {
        try {
          final values = parseQRSecretData(qrData);
          final String? shortName = values['chain'];
          final String? seed = values['seed'];
          final String? key = values['key'];

          if (shortName != null && context.mounted) {
            final mainnetJsonData = await rootBundle
                .loadString('assets/chains/mainnet-chains.json');
            final mainnetChains =
                await getChainsProvidersFromJson(jsonStr: mainnetJsonData);

            if (mainnetChains.any((chain) => chain.shortName == shortName) &&
                context.mounted) {
              if (seed != null && context.mounted) {
                await _processSeedFromQR(context, seed, shortName);
                return;
              } else if (key != null && context.mounted) {
                await _processKeyFromQR(context, key, shortName);
                return;
              }
            }
          }

          final words =
              qrData.split(' ').where((word) => word.isNotEmpty).toList();
          final wordCount = words.length;

          if ([12, 15, 18, 21, 24].contains(wordCount) && context.mounted) {
            final errorIndexes =
                (await checkNotExistsBip39Words(words: words, lang: 'english'))
                    .map((e) => e.toInt())
                    .toList();

            if (errorIndexes.isEmpty && context.mounted) {
              Navigator.of(context).pushNamed('/net_setup',
                  arguments: {'bip39': words, 'shortName': null});
              return;
            }
          }

          if (context.mounted) {
            Navigator.pop(context);
          }
        } catch (e) {
          debugPrint("QR scanning error: $e");
          if (context.mounted) Navigator.pop(context);
        }
      },
    );
  }

  Future<void> _processSeedFromQR(
      BuildContext context, String seed, String shortName) async {
    final nonEmptyWords =
        seed.split(" ").where((word) => word.isNotEmpty).toList();

    if (nonEmptyWords.isEmpty) {
      if (context.mounted) Navigator.pop(context);
      return;
    }

    final List<int> errorIndexes = (await checkNotExistsBip39Words(
      words: nonEmptyWords,
      lang: 'english',
    ))
        .map((e) => e.toInt())
        .toList();

    if (!context.mounted) return;

    if (errorIndexes.isEmpty) {
      Navigator.of(context).pushNamed(
        '/net_setup',
        arguments: {'bip39': nonEmptyWords, 'shortName': shortName},
      );
    } else {
      Navigator.pop<void>(context);
    }
  }

  Future<void> _processKeyFromQR(
      BuildContext context, String key, String shortName) async {
    try {
      final KeyPairInfo keys = await keypairFromSk(sk: key);

      if (!context.mounted) return;

      Navigator.of(context).pushNamed(
        '/net_setup',
        arguments: {'keys': keys, 'shortName': shortName},
      );
    } catch (e) {
      debugPrint("Private key processing error: $e");
      if (context.mounted) Navigator.pop(context);
    }
  }

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;

    final backIcon = SvgPicture.asset(
      'assets/icons/back.svg',
      width: 24,
      height: 24,
      colorFilter: ColorFilter.mode(
        theme.secondaryPurple,
        BlendMode.srcIn,
      ),
    );

    final documentIcon = SvgPicture.asset(
      'assets/icons/document.svg',
      width: 35,
      height: 35,
      colorFilter: ColorFilter.mode(
        theme.primaryPurple,
        BlendMode.srcIn,
      ),
    );

    final puzzleIcon = SvgPicture.asset(
      'assets/icons/puzzle.svg',
      width: 35,
      height: 35,
      colorFilter: ColorFilter.mode(
        theme.primaryPurple,
        BlendMode.srcIn,
      ),
    );

    final bincodeIcon = SvgPicture.asset(
      'assets/icons/bincode.svg',
      width: 35,
      height: 35,
      colorFilter: ColorFilter.mode(
        theme.primaryPurple,
        BlendMode.srcIn,
      ),
    );

    final fileIcon = SvgPicture.asset(
      'assets/icons/file.svg',
      width: 35,
      height: 35,
      colorFilter: ColorFilter.mode(
        theme.primaryPurple,
        BlendMode.srcIn,
      ),
    );

    final qrcodeIcon = SvgPicture.asset(
      'assets/icons/qrcode.svg',
      width: 35,
      height: 35,
      colorFilter: ColorFilter.mode(
        theme.primaryPurple,
        BlendMode.srcIn,
      ),
    );

    return Scaffold(
      backgroundColor: theme.background,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: backIcon,
          onPressed: () => Navigator.of(context).pop(),
        ),
        title: Text(
          AppLocalizations.of(context)!.restoreWalletOptionsTitle,
          style: TextStyle(color: theme.textPrimary),
        ),
      ),
      body: SafeArea(
        child: ListView(
          padding: const EdgeInsets.all(16.0),
          children: [
            WalletListItem(
              title:
                  AppLocalizations.of(context)!.restoreWalletOptionsBIP39Title,
              subtitle: AppLocalizations.of(context)!
                  .restoreWalletOptionsBIP39Subtitle,
              icon: documentIcon,
              onTap: () => _handleBip39Restore(context),
            ),
            WalletListItem(
              disabled: true,
              title: AppLocalizations.of(context)!
                  .restoreWalletOptionsSLIP0039Title,
              subtitle: AppLocalizations.of(context)!
                  .restoreWalletOptionsSLIP0039Subtitle,
              icon: puzzleIcon,
              onTap: null,
            ),
            WalletListItem(
              title: AppLocalizations.of(context)!
                  .restoreWalletOptionsPrivateKeyTitle,
              subtitle: AppLocalizations.of(context)!
                  .restoreWalletOptionsPrivateKeySubtitle,
              icon: bincodeIcon,
              onTap: () => _handlePrivateKeyRestore(context),
            ),
            WalletListItem(
              title: AppLocalizations.of(context)!
                  .restoreWalletOptionsKeyStoreTitle,
              subtitle: AppLocalizations.of(context)!
                  .restoreWalletOptionsKeyStoreSubtitle,
              icon: fileIcon,
              onTap: () => _handleKeystoreResotre(context),
            ),
            WalletListItem(
              title:
                  AppLocalizations.of(context)!.restoreWalletOptionsQRCodeTitle,
              subtitle: AppLocalizations.of(context)!
                  .restoreWalletOptionsQRCodeSubtitle,
              icon: qrcodeIcon,
              onTap: () => _handleQRCodeScanning(context),
            ),
          ],
        ),
      ),
    );
  }
}

```

`lib/pages/web_view.dart`:

```dart
import 'dart:io';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:provider/provider.dart';
import 'package:flutter_inappwebview/flutter_inappwebview.dart';
import 'package:share_plus/share_plus.dart';
import 'package:zilpay/components/browser_action_menu.dart';
import 'package:zilpay/src/rust/api/backend.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/components/hoverd_svg.dart';
import 'package:zilpay/web3/eip_1193.dart';
import 'package:zilpay/web3/message.dart';
import 'package:zilpay/web3/zilpay_legacy.dart';
import 'package:zilpay/l10n/app_localizations.dart';

class WebViewPage extends StatefulWidget {
  final String initialUrl;
  const WebViewPage({super.key, required this.initialUrl});
  @override
  State<WebViewPage> createState() => _WebViewPageState();
}

class _WebViewPageState extends State<WebViewPage> with WidgetsBindingObserver {
  InAppWebViewController? _webViewController;
  ZilPayLegacyHandler? _legacyHandler;
  Web3EIP1193Handler? _eip1193Handler;
  CookieManager? _cookieManager;
  bool _isLoading = false;
  bool _hasError = false;
  String _errorMessage = '';
  String _currentUrl = '';
  double _progress = 0;

  String get _baseUserAgent => Platform.isIOS
      ? 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1'
      : 'Mozilla/5.0 (Linux; Android 11; SM-G998U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Mobile Safari/537.36';

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    _cookieManager = CookieManager.instance();
    _currentUrl = widget.initialUrl;
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    _legacyHandler = null;
    _eip1193Handler = null;

    if (_legacyHandler != null) {
      _legacyHandler!.dispose();
    }

    // if (_eip1193Handler != null) {
    //   _eip1193Handler!.dispose();
    // }

    if (_webViewController != null) {
      _webViewController!.dispose();
    }

    super.dispose();
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    if (state == AppLifecycleState.resumed &&
        _hasError &&
        _webViewController != null) {
      _refreshPage();
    }
  }

  void _setupJavaScriptHandlers() {
    if (_webViewController == null) return;

    _webViewController?.addJavaScriptHandler(
      handlerName: 'ZilPayLegacy',
      callback: (args) {
        if (!mounted) return;

        try {
          final jsonData = jsonDecode(args[0]) as Map<String, dynamic>;
          final zilPayMessage = ZilPayWeb3Message.fromJson(jsonData);
          _legacyHandler ??= ZilPayLegacyHandler(
            webViewController: _webViewController!,
          );
          _legacyHandler!.handleLegacyZilPayMessage(zilPayMessage, context);
        } catch (e) {
          debugPrint("$e");
        }
        return null;
      },
    );

    _webViewController?.addJavaScriptHandler(
      handlerName: 'EIP1193Channel',
      callback: (args) {
        if (!mounted) return;

        try {
          final jsonData = jsonDecode(args[0]) as Map<String, dynamic>;
          final zilPayMessage = ZilPayWeb3Message.fromJson(jsonData);
          _eip1193Handler ??= Web3EIP1193Handler(
            webViewController: _webViewController!,
            initialUrl: _currentUrl,
          );
          _eip1193Handler!.handleWeb3EIP1193Message(zilPayMessage, context);
        } catch (e) {
          debugPrint("$e");
        }
        return null;
      },
    );
  }

  Future<void> _applyTextScalingFactor(AppState appState) async {
    try {
      await _webViewController?.evaluateJavascript(
          source:
              'document.documentElement.style.fontSize = \'${(appState.state.browserSettings.textScalingFactor * 100).toInt()}%\';');
    } catch (e) {
      debugPrint("$e");
    }
  }

  Future<void> _applyEnhancedContentBlocking(AppState appState) async {
    final level = appState.state.browserSettings.contentBlocking;
    String jsCode = '';

    if (level >= 1) {
      jsCode = '''
        (function() {
          const adSelectors = [
            'iframe[src*="doubleclick.net"]',
            'iframe[src*="googleadservices"]',
            'div[id*="google_ads_"]',
            'div[class*="ad-container"]',
            'div[class*="advertisement"]',
            'div[class*="banner"]',
            'div[id*="banner-ad"]'
          ];
          adSelectors.forEach(selector => {
            document.querySelectorAll(selector).forEach(el => el.style.display = 'none');
          });
          
          const blockAutoplay = function() {
            const videoElements = document.querySelectorAll('video');
            const audioElements = document.querySelectorAll('audio');
            
            for (const element of [...videoElements, ...audioElements]) {
              element.autoplay = false;
              element.pause();
              
              element.addEventListener('play', function(e) {
                if (!e.isTrusted) {
                  this.pause();
                }
              }, true);
            }
          };
          
          blockAutoplay();
          setInterval(blockAutoplay, 2000);
        })();
      ''';
    }

    if (level >= 2) {
      jsCode = '''
        (function() {
          const blockSelectors = [
            'iframe[src*="doubleclick.net"]',
            'iframe[src*="googleadservices"]',
            'iframe[src*="facebook"]',
            'iframe[src*="twitter"]',
            'iframe[src*="instagram"]',
            'div[id*="google_ads_"]',
            'div[class*="ad-"]',
            'div[id*="ad-"]',
            'div[class*="social-"]',
            'div[class*="tracking"]',
            'script[src*="analytics"]',
            'script[src*="tracker"]',
            'script[src*="pixel"]',
            'div[class*="popup"]',
            'div[id*="popup"]',
            'div[class*="overlay"][class*="ad"]'
          ];
          
          blockSelectors.forEach(selector => {
            document.querySelectorAll(selector).forEach(el => {
              el.style.display = 'none';
              if (el.parentNode) {
                el.parentNode.removeChild(el);
              }
            });
          });
          
          const blockAutoplay = function() {
            const mediaElements = [...document.querySelectorAll('video'), ...document.querySelectorAll('audio')];
            for (const element of mediaElements) {
              element.autoplay = false;
              element.pause();
              
              element.addEventListener('play', function(e) {
                if (!e.isTrusted) {
                  this.pause();
                }
              }, true);
            }
            
            const oldPlay = HTMLMediaElement.prototype.play;
            HTMLMediaElement.prototype.play = function() {
              if (document.userActivated) {
                return oldPlay.apply(this, arguments);
              }
              return Promise.reject('Autoplay blocked by ZilPay Browser');
            };
          };
          
          window.open = function() { return null; };
          window.showModalDialog = function() { return null; };
          
          window.ga = function() {};
          window.fbq = function() {};
          window._gaq = { push: function() {} };
          
          if (window.Notification) {
            window.Notification.requestPermission = function() {
              return Promise.resolve('denied');
            };
            Object.defineProperty(window.Notification, 'permission', {
              get: function() { return 'denied'; }
            });
          }
          
          blockAutoplay();
          setInterval(function() {
            blockSelectors.forEach(selector => {
              document.querySelectorAll(selector).forEach(el => {
                el.style.display = 'none';
                if (el.parentNode) {
                  el.parentNode.removeChild(el);
                }
              });
            });
            blockAutoplay();
          }, 2000);
          
          const observer = new MutationObserver(function(mutations) {
            let needsRecheck = false;
            for (const mutation of mutations) {
              if (mutation.addedNodes.length) {
                needsRecheck = true;
                break;
              }
            }
            
            if (needsRecheck) {
              blockSelectors.forEach(selector => {
                document.querySelectorAll(selector).forEach(el => {
                  el.style.display = 'none';
                  if (el.parentNode) {
                    el.parentNode.removeChild(el);
                  }
                });
              });
              blockAutoplay();
            }
          });
          
          observer.observe(document.body, { 
            childList: true, 
            subtree: true 
          });
        })();
      ''';
    }

    if (jsCode.isNotEmpty) {
      try {
        await _webViewController?.evaluateJavascript(source: jsCode);
      } catch (e) {
        debugPrint("$e");
      }
    }
  }

  Future<void> _disableAutoplay(AppState appState) async {
    if (!appState.state.browserSettings.allowAutoPlay) {
      try {
        await _webViewController?.evaluateJavascript(source: '''
          (function() {
            const disableAutoplay = function() {
              const videoElements = document.querySelectorAll('video');
              const audioElements = document.querySelectorAll('audio');
              
              for (const element of [...videoElements, ...audioElements]) {
                element.autoplay = false;
                element.pause();
                
                element.addEventListener('play', function(e) {
                  if (!e.isTrusted) {
                    this.pause();
                  }
                }, true);
              }
              
              if (!window.oldPlayDefined) {
                window.oldPlayDefined = true;
                const oldPlay = HTMLMediaElement.prototype.play;
                HTMLMediaElement.prototype.play = function() {
                  if (document.userActivated) {
                    return oldPlay.apply(this, arguments);
                  }
                  return Promise.reject('Autoplay blocked by browser settings');
                };
              }
            };
            
            const frames = document.querySelectorAll('iframe');
            frames.forEach(frame => {
              try {
                if (frame.contentDocument) {
                  const videos = frame.contentDocument.querySelectorAll('video');
                  videos.forEach(video => {
                    video.autoplay = false;
                    video.pause();
                  });
                }
              } catch (e) {}
            });
            
            disableAutoplay();
            setInterval(disableAutoplay, 2000);
          })();
        ''');
      } catch (e) {
        debugPrint("$e");
      }
    }
  }

  Future<void> _initializeZilPayInjection(AppState appState) async {
    try {
      if (appState.chain?.slip44 == 60 || appState.chain?.slip44 == 313) {
        await _webViewController?.injectJavascriptFileFromAsset(
          assetFilePath: 'assets/evm_inject.js',
        );
      }
    } catch (e) {
      debugPrint("$e");
    }

    try {
      if (appState.chain?.slip44 == 313) {
        String scilla =
            await rootBundle.loadString('assets/zilpay_legacy_inject.js');
        await _webViewController?.evaluateJavascript(source: scilla);
        await _legacyHandler!.sendData(appState);
      }
    } catch (e) {
      debugPrint("$e");
    }
  }

  void _refreshPage() {
    _webViewController?.reload();
  }

  Map<String, String> _splitDomain(String url) {
    try {
      final uri = Uri.parse(url);
      final host = uri.host;
      final parts = host.split('.');
      if (parts.length <= 2) {
        return {'subdomain': '', 'domain': host};
      }
      final subdomain = parts[0];
      final domain = parts.sublist(1).join('.');
      return {'subdomain': subdomain, 'domain': domain};
    } catch (e) {
      return {'subdomain': '', 'domain': url};
    }
  }

  void _applyPrivacySettings(
      AppState appState, InAppWebViewController controller) {
    if (!appState.state.browserSettings.cookiesEnabled) {
      _cookieManager?.deleteAllCookies();
    }

    if (appState.state.browserSettings.incognitoMode) {
      InAppWebViewController.clearAllCache();
      controller.clearHistory();
      controller.clearFormData();
      controller.closeAllMediaPresentations();

      if (!appState.state.browserSettings.cookiesEnabled) {
        _cookieManager?.deleteAllCookies();
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;
    final domainParts =
        _splitDomain(_currentUrl.isEmpty ? widget.initialUrl : _currentUrl);
    final l10n = AppLocalizations.of(context)!;

    return Scaffold(
      backgroundColor: theme.background,
      appBar: PreferredSize(
        preferredSize: const Size.fromHeight(50.0),
        child: AppBar(
          backgroundColor: theme.cardBackground,
          elevation: 0,
          leading: IconButton(
            icon: _isLoading
                ? SizedBox(
                    width: 24,
                    height: 24,
                    child: CircularProgressIndicator(
                      color: theme.primaryPurple,
                      strokeWidth: 2,
                    ),
                  )
                : HoverSvgIcon(
                    assetName: 'assets/icons/reload.svg',
                    width: 24,
                    height: 24,
                    onTap: _refreshPage,
                    color: theme.textPrimary,
                  ),
            onPressed: _refreshPage,
          ),
          title: Stack(
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                mainAxisSize: MainAxisSize.min,
                children: [
                  HoverSvgIcon(
                    assetName: 'assets/icons/lock.svg',
                    width: 16,
                    height: 16,
                    onTap: () {},
                    color: _currentUrl.startsWith('https://')
                        ? theme.primaryPurple
                        : theme.textSecondary,
                  ),
                  const SizedBox(width: 4),
                  Expanded(
                    child: RichText(
                      text: TextSpan(
                        children: [
                          if (domainParts['subdomain']!.isNotEmpty)
                            TextSpan(
                              text: '${domainParts['subdomain']}.',
                              style: TextStyle(
                                color:
                                    theme.textSecondary.withValues(alpha: 0.7),
                                fontSize: 12,
                              ),
                            ),
                          TextSpan(
                            text: domainParts['domain'],
                            style: TextStyle(
                              color: theme.textPrimary,
                              fontSize: 12,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ],
                      ),
                      overflow: TextOverflow.ellipsis,
                      maxLines: 1,
                    ),
                  ),
                  if (appState.state.browserSettings.doNotTrack)
                    Container(
                      padding: const EdgeInsets.symmetric(
                          horizontal: 4, vertical: 2),
                      margin: const EdgeInsets.only(left: 4),
                      decoration: BoxDecoration(
                        color: theme.primaryPurple.withValues(alpha: 0.2),
                        borderRadius: BorderRadius.circular(4),
                      ),
                      child: Text(
                        l10n.webViewPageDntLabel,
                        style: TextStyle(
                          color: theme.primaryPurple,
                          fontSize: 10,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  if (appState.state.browserSettings.incognitoMode)
                    Container(
                      padding: const EdgeInsets.symmetric(
                          horizontal: 4, vertical: 2),
                      margin: const EdgeInsets.only(left: 4),
                      decoration: BoxDecoration(
                        color: theme.textSecondary.withValues(alpha: 0.2),
                        borderRadius: BorderRadius.circular(4),
                      ),
                      child: Text(
                        l10n.webViewPageIncognitoLabel,
                        style: TextStyle(
                          color: theme.textSecondary,
                          fontSize: 10,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                ],
              ),
            ],
          ),
          actions: [
            BrowserActionMenu(
              parentContext: context,
              onShare: () {
                SharePlus.instance.share(
                  ShareParams(
                    text: _currentUrl,
                  ),
                );
              },
              onCopyLink: () {
                Clipboard.setData(ClipboardData(text: _currentUrl));
              },
              onClose: () {
                stopBlockWorker();
                Navigator.pop(context);
              },
              onBack: () {
                _webViewController?.goBack();
              },
              onForward: () {
                _webViewController?.goForward();
              },
            ),
          ],
        ),
      ),
      body: _hasError
          ? Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  HoverSvgIcon(
                    assetName: 'assets/icons/warning.svg',
                    width: 100,
                    height: 100,
                    onTap: () {},
                    color: theme.textSecondary,
                  ),
                  const SizedBox(height: 20),
                  Text(
                    l10n.webViewPageLoadError,
                    style: TextStyle(
                      color: theme.textPrimary,
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 10),
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 20),
                    child: Text(
                      _errorMessage,
                      textAlign: TextAlign.center,
                      style: TextStyle(
                        color: theme.textSecondary,
                        fontSize: 16,
                      ),
                    ),
                  ),
                  const SizedBox(height: 20),
                  ElevatedButton(
                    onPressed: _refreshPage,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: theme.primaryPurple,
                    ),
                    child: Text(
                      l10n.webViewPageTryAgain,
                      style: TextStyle(color: theme.background),
                    ),
                  ),
                ],
              ),
            )
          : Stack(
              children: [
                InAppWebView(
                  initialUrlRequest: URLRequest(url: WebUri(widget.initialUrl)),
                  initialSettings: InAppWebViewSettings(
                    javaScriptEnabled: true,
                    safeBrowsingEnabled: false,
                    userAgent: _baseUserAgent +
                        (appState.state.browserSettings.doNotTrack
                            ? ' DNT:1'
                            : ' ZilPay/1.0'),
                    useHybridComposition: true,
                    supportZoom: true,
                    useOnLoadResource: true,
                    verticalScrollBarEnabled: false,
                    horizontalScrollBarEnabled: false,
                    disableVerticalScroll: false,
                    disableHorizontalScroll: false,
                    transparentBackground: false,
                    javaScriptCanOpenWindowsAutomatically: false,
                    supportMultipleWindows: false,
                    cacheEnabled: appState.state.browserSettings.cacheEnabled,
                    clearCache: !appState.state.browserSettings.cacheEnabled,
                    mediaPlaybackRequiresUserGesture:
                        !appState.state.browserSettings.allowAutoPlay,
                    allowsInlineMediaPlayback:
                        appState.state.browserSettings.allowAutoPlay,
                    forceDark: appState.currentTheme.value == "Dark"
                        ? ForceDark.ON
                        : ForceDark.OFF,
                  ),
                  onWebViewCreated: (controller) {
                    _webViewController = controller;
                    _setupJavaScriptHandlers();

                    if (!appState.state.browserSettings.cookiesEnabled) {
                      _cookieManager?.deleteAllCookies();
                    }
                  },
                  onLoadStart: (controller, url) {
                    setState(() {
                      _isLoading = true;
                      _hasError = false;
                      _currentUrl = url.toString();
                    });

                    _applyPrivacySettings(appState, controller);
                  },
                  onLoadStop: (controller, url) async {
                    await _initializeZilPayInjection(appState);

                    setState(() {
                      _isLoading = false;
                      _currentUrl = url.toString();
                    });

                    await _applyEnhancedContentBlocking(appState);

                    if (!appState.state.browserSettings.allowAutoPlay) {
                      await _disableAutoplay(appState);
                    }

                    if (_legacyHandler != null) {
                      _legacyHandler!.handleStartBlockWorker(appState);
                    }

                    if (appState.state.browserSettings.textScalingFactor !=
                        1.0) {
                      await _applyTextScalingFactor(appState);
                    }
                  },
                  onProgressChanged: (controller, progress) async {
                    if (progress > 20) {
                      await _initializeZilPayInjection(appState);
                    }

                    setState(() {
                      _progress = progress / 100;
                    });
                  },
                  onConsoleMessage: (_, value) {
                    // print(value);
                  },
                  onReceivedError: (_, __, error) {
                    print("browser error: $error");
                  },
                  shouldOverrideUrlLoading:
                      (controller, navigationAction) async {
                    final url =
                        navigationAction.request.url.toString().toLowerCase();

                    if (appState.state.browserSettings.contentBlocking > 0) {
                      final adDomains = [
                        'doubleclick.net',
                        'googleadservices',
                        'googlesyndication',
                        'adform.net',
                        'adnxs.com',
                        'ad.doubleclick.net',
                        'analytics',
                        'facebook.com/tr',
                      ];

                      for (final domain in adDomains) {
                        if (url.contains(domain)) {
                          return NavigationActionPolicy.CANCEL;
                        }
                      }
                    }

                    return NavigationActionPolicy.ALLOW;
                  },
                ),
                if (_isLoading && _progress < 1.0)
                  LinearProgressIndicator(
                    value: _progress,
                    backgroundColor: Colors.transparent,
                    color: theme.primaryPurple,
                  ),
              ],
            ),
    );
  }
}

```

`lib/pages/zil_stake.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/button.dart';
import 'package:zilpay/components/custom_app_bar.dart';
import 'package:zilpay/components/image_cache.dart';
import 'package:zilpay/state/app_state.dart';

enum SortType { apr, vp, commission }

class StakingPool {
  final String name;
  final String token;
  final String iconUrl;
  final double vp;
  final double commission;
  final double apr;
  final bool isLiquid;

  StakingPool({
    required this.name,
    required this.token,
    required this.iconUrl,
    required this.vp,
    required this.commission,
    required this.apr,
    required this.isLiquid,
  });
}

class ZilStakePage extends StatelessWidget {
  const ZilStakePage({super.key});

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;

    return DefaultTabController(
      length: 3,
      child: Scaffold(
        backgroundColor: theme.background,
        body: SafeArea(
          child: Column(
            children: [
              CustomAppBar(
                title: 'Zil Stake',
                onBackPressed: () => Navigator.pop(context),
              ),
              TabBar(
                labelColor: theme.textPrimary,
                unselectedLabelColor: theme.textSecondary,
                indicatorColor: theme.primaryPurple,
                tabs: const [
                  Tab(text: 'Stake'),
                  Tab(text: 'Unstake'),
                  Tab(text: 'Migrate'),
                ],
              ),
              Expanded(
                child: TabBarView(
                  children: [
                    StakeTab(),
                    Center(
                      child: Text(
                        'Unstake coming soon',
                        style: TextStyle(color: theme.textPrimary),
                      ),
                    ),
                    Center(
                      child: Text(
                        'Migrate coming soon',
                        style: TextStyle(color: theme.textPrimary),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class StakeTab extends StatefulWidget {
  @override
  _StakeTabState createState() => _StakeTabState();
}

class _StakeTabState extends State<StakeTab> {
  bool isLiquidSelected = true;
  SortType currentSort = SortType.apr;

  final List<StakingPool> pools = [
    StakingPool(
      name: 'Luganodes',
      token: 'LNZIL',
      iconUrl: 'https://example.com/luganodes.png',
      vp: 2.07,
      commission: 10,
      apr: 75.57,
      isLiquid: true,
    ),
    StakingPool(
      name: 'PlunderSwap',
      token: 'pZIL',
      iconUrl: 'https://example.com/plunderswap.png',
      vp: 2.04,
      commission: 8,
      apr: 77.25,
      isLiquid: true,
    ),
    StakingPool(
      name: 'stZIL',
      token: 'stZIL',
      iconUrl: 'https://example.com/stzil.png',
      vp: 1.89,
      commission: 8,
      apr: 77.24,
      isLiquid: true,
    ),
    StakingPool(
      name: 'ZilPool',
      token: 'ZILP',
      iconUrl: 'https://example.com/zilpool.png',
      vp: 1.95,
      commission: 12,
      apr: 70.00,
      isLiquid: true,
    ),
  ];

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;

    List<StakingPool> filteredPools =
        pools.where((pool) => pool.isLiquid == isLiquidSelected).toList();
    filteredPools.sort((a, b) {
      if (currentSort == SortType.apr) {
        return b.apr.compareTo(a.apr);
      } else if (currentSort == SortType.vp) {
        return b.vp.compareTo(a.vp);
      } else {
        return a.commission.compareTo(b.commission);
      }
    });

    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              const SizedBox.shrink(),
              Row(
                children: [
                  Text(
                    'Liquid',
                    style: TextStyle(color: theme.textSecondary),
                  ),
                  Switch(
                    value: isLiquidSelected,
                    onChanged: (value) {
                      setState(() {
                        isLiquidSelected = value;
                      });
                    },
                    activeColor: theme.primaryPurple,
                    inactiveTrackColor: theme.textSecondary.withOpacity(0.2),
                  ),
                ],
              ),
            ],
          ),
          const SizedBox(height: 16),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              FilterChip(
                label: Text(
                  'APR',
                  style: TextStyle(
                    color: currentSort == SortType.apr
                        ? theme.textPrimary
                        : theme.textSecondary,
                    fontSize: 12,
                  ),
                ),
                selected: currentSort == SortType.apr,
                onSelected: (selected) {
                  if (selected) {
                    setState(() {
                      currentSort = SortType.apr;
                    });
                  }
                },
                showCheckmark: false,
                selectedColor: theme.primaryPurple,
                backgroundColor: theme.cardBackground,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(6),
                ),
                pressElevation: 0,
                labelPadding:
                    const EdgeInsets.symmetric(horizontal: 8, vertical: 0),
              ),
              FilterChip(
                label: Text(
                  'VP',
                  style: TextStyle(
                    color: currentSort == SortType.vp
                        ? theme.textPrimary
                        : theme.textSecondary,
                    fontSize: 12,
                  ),
                ),
                selected: currentSort == SortType.vp,
                onSelected: (selected) {
                  if (selected) {
                    setState(() {
                      currentSort = SortType.vp;
                    });
                  }
                },
                showCheckmark: false,
                selectedColor: theme.primaryPurple,
                backgroundColor: theme.cardBackground,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(6),
                ),
                pressElevation: 0,
                labelPadding:
                    const EdgeInsets.symmetric(horizontal: 8, vertical: 0),
              ),
              FilterChip(
                label: Text(
                  'Commission',
                  style: TextStyle(
                    color: currentSort == SortType.commission
                        ? theme.textPrimary
                        : theme.textSecondary,
                    fontSize: 12,
                  ),
                ),
                selected: currentSort == SortType.commission,
                onSelected: (selected) {
                  if (selected) {
                    setState(() {
                      currentSort = SortType.commission;
                    });
                  }
                },
                showCheckmark: false,
                selectedColor: theme.primaryPurple,
                backgroundColor: theme.cardBackground,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(6),
                ),
                pressElevation: 0,
                labelPadding:
                    const EdgeInsets.symmetric(horizontal: 8, vertical: 0),
              ),
            ],
          ),
          const SizedBox(height: 16),
          Expanded(
            child: filteredPools.isEmpty
                ? Center(
                    child: Text(
                      'No pools available',
                      style: TextStyle(color: theme.textPrimary),
                    ),
                  )
                : ListView.builder(
                    itemCount: filteredPools.length,
                    itemBuilder: (context, index) {
                      final pool = filteredPools[index];
                      return StakingPoolCard(pool: pool);
                    },
                  ),
          ),
        ],
      ),
    );
  }
}

class StakingPoolCard extends StatelessWidget {
  final StakingPool pool;

  const StakingPoolCard({required this.pool});

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;

    return Card(
      color: theme.cardBackground,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      margin: const EdgeInsets.symmetric(vertical: 4),
      child: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Row(
          children: [
            AsyncImage(
              url: pool.iconUrl,
              width: 32.0,
              height: 32.0,
              fit: BoxFit.contain,
              errorWidget: SvgPicture.asset(
                "assets/icons/warning.svg",
                width: 32.0,
                height: 32.0,
                colorFilter: ColorFilter.mode(
                  theme.warning,
                  BlendMode.srcIn,
                ),
              ),
              loadingWidget: const Center(
                child: CircularProgressIndicator(strokeWidth: 2),
              ),
            ),
            const SizedBox(width: 8),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    pool.name,
                    style: TextStyle(
                      color: theme.textPrimary,
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  Text(
                    pool.token,
                    style: TextStyle(
                      color: theme.textSecondary,
                      fontSize: 12,
                    ),
                  ),
                ],
              ),
            ),
            Column(
              crossAxisAlignment: CrossAxisAlignment.end,
              children: [
                Text(
                  'APR ${pool.apr}%',
                  style: TextStyle(
                    color: theme.textSecondary,
                    fontSize: 12,
                  ),
                ),
                Text(
                  'VP ${pool.vp}%',
                  style: TextStyle(
                    color: theme.textSecondary,
                    fontSize: 12,
                  ),
                ),
                Text(
                  'Comm ${pool.commission}%',
                  style: TextStyle(
                    color: theme.textSecondary,
                    fontSize: 12,
                  ),
                ),
              ],
            ),
            const SizedBox(width: 8),
            CustomButton(
              text: 'Stake',
              onPressed: () {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text(
                      'Staking ${pool.name} coming soon',
                      style: TextStyle(color: theme.textPrimary),
                    ),
                  ),
                );
              },
              textColor: theme.textPrimary,
              backgroundColor: theme.primaryPurple,
              borderRadius: 6.0,
              height: 32.0,
              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
              disabled: false,
            ),
          ],
        ),
      ),
    );
  }
}

```

`lib/router.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/pages/about.dart';
import 'package:zilpay/pages/add_account.dart';
import 'package:zilpay/pages/add_ledger_account.dart';
import 'package:zilpay/pages/address_book.dart';
import 'package:zilpay/pages/appearance.dart';
import 'package:zilpay/pages/browser_settings.dart';
import 'package:zilpay/pages/currency_conversion.dart';
import 'package:zilpay/pages/keystore_backup.dart';
import 'package:zilpay/pages/keystore_file_restore.dart';
import 'package:zilpay/pages/ledger_connect.dart';
import 'package:zilpay/pages/locale.dart';
import 'package:zilpay/pages/manage_tokens.dart';
import 'package:zilpay/pages/network.dart';
import 'package:zilpay/pages/notification.dart';
import 'package:zilpay/pages/password_setup.dart';
import 'package:zilpay/pages/receive.dart';
import 'package:zilpay/pages/restore_bip39.dart';
import 'package:zilpay/pages/restore_rkstorage.dart';
import 'package:zilpay/pages/restore_sk.dart';
import 'package:zilpay/pages/reveal_bip39.dart';
import 'package:zilpay/pages/reveal_sk.dart';
import 'package:zilpay/pages/security.dart';
import 'package:zilpay/pages/send.dart';
import 'package:zilpay/pages/setup_cipher.dart';
import 'package:zilpay/pages/setup_net.dart';
import 'package:zilpay/pages/sk_gen.dart';
import 'package:zilpay/pages/verify_bip39.dart';
import 'package:zilpay/pages/wallet.dart';
import 'package:zilpay/pages/web_view.dart';
import 'package:zilpay/pages/zil_stake.dart';

import 'services/auth_guard.dart';
import 'state/app_state.dart';

import 'pages/main_page.dart';
import 'pages/login_page.dart';
import 'pages/initial_page.dart';
import 'pages/browser_page.dart';
import 'pages/settings_page.dart';
import 'pages/new_wallet_options.dart';
import 'pages/gen_wallet_options.dart';
import 'pages/wallet_restore_options.dart';
import './pages/gen_bip39.dart';

class AppRouter {
  final AuthGuard authGuard;
  final AppState appState;

  AppRouter({required this.authGuard, required this.appState});

  Route<dynamic> onGenerateRoute(RouteSettings settings) {
    return MaterialPageRoute(
      settings: settings,
      builder: (context) => _buildRoute(context, settings),
    );
  }

  Widget _buildRoute(BuildContext context, RouteSettings settings) {
    Widget wrapWithProviders(Widget child) {
      return MultiProvider(
        providers: [
          ChangeNotifierProvider.value(value: authGuard),
          ChangeNotifierProvider.value(value: appState),
        ],
        child: child,
      );
    }

    final List<String> setupRoutes = [
      '/pass_setup',
      '/cipher_setup',
      '/net_setup',
      '/gen_bip39',
      '/gen_sk',
      '/verify_bip39',
      '/restore_options',
      '/gen_options',
      '/new_wallet_options',
      '/initial',
      '/ledger_connect',
      '/wallet',
      '/appearance',
      '/restore_bip39',
      '/currency',
      '/notifications',
      '/language',
      '/address-book',
      '/security',
      '/networks',
      '/send',
      '/receive',
      '/add_token',
      '/reveal_sk',
      '/reveal_bip39',
      '/add_account',
      '/web_view',
      '/rk_restore',
      '/browser_settings',
      '/restore_sk',
      '/about',
      '/keystore_backup',
      '/keystore_file_restore',
      '/add_ledger_account',
      '/zil_stake',
    ];

    if (settings.name == '/ledger_connect') {
      return wrapWithProviders(const LedgerConnectPage());
    }

    if (settings.name == '/' || settings.name == null) {
      if (!authGuard.ready) {
        return wrapWithProviders(const InitialPage());
      } else if (!authGuard.enabled) {
        return wrapWithProviders(const LoginPage());
      } else {
        return wrapWithProviders(const MainPage());
      }
    }

    if (!authGuard.ready) {
      if (setupRoutes.contains(settings.name)) {
        switch (settings.name) {
          case '/pass_setup':
            return wrapWithProviders(const PasswordSetupPage());
          case '/add_ledger_account':
            return wrapWithProviders(const AddLedgerAccountPage());
          case '/about':
            return wrapWithProviders(const AboutPage());
          case '/restore_sk':
            return wrapWithProviders(const SecretKeyRestorePage());
          case '/rk_restore':
            return wrapWithProviders(const RestoreRKStorage());
          case '/restore_bip39':
            return wrapWithProviders(const RestoreSecretPhrasePage());
          case '/cipher_setup':
            return wrapWithProviders(const CipherSettingsPage());
          case '/net_setup':
            return wrapWithProviders(const SetupNetworkSettingsPage());
          case '/gen_bip39':
            return wrapWithProviders(const SecretPhraseGeneratorPage());
          case '/gen_sk':
            return wrapWithProviders(const SecretKeyGeneratorPage());
          case '/verify_bip39':
            return wrapWithProviders(const SecretPhraseVerifyPage());
          case '/restore_options':
            return wrapWithProviders(const RestoreWalletOptionsPage());
          case '/gen_options':
            return wrapWithProviders(const GenWalletOptionsPage());
          case '/new_wallet_options':
            return wrapWithProviders(const AddWalletOptionsPage());
          case '/keystore_file_restore':
            return wrapWithProviders(const RestoreKeystoreFilePage());
          case '/initial':
            return wrapWithProviders(const InitialPage());
          case '/language':
            return wrapWithProviders(const LanguagePage());
          default:
            return wrapWithProviders(const InitialPage());
        }
      }
      return wrapWithProviders(const InitialPage());
    }

    if (!authGuard.enabled) {
      if (settings.name == '/login') {
        return wrapWithProviders(const LoginPage());
      }

      if (setupRoutes.contains(settings.name)) {
        switch (settings.name) {
          case '/about':
            return wrapWithProviders(const AboutPage());
          case '/restore_sk':
            return wrapWithProviders(const SecretKeyRestorePage());
          case '/pass_setup':
            return wrapWithProviders(const PasswordSetupPage());
          case '/rk_restore':
            return wrapWithProviders(const RestoreRKStorage());
          case '/cipher_setup':
            return wrapWithProviders(const CipherSettingsPage());
          case '/net_setup':
            return wrapWithProviders(const SetupNetworkSettingsPage());
          case '/gen_sk':
            return wrapWithProviders(const SecretKeyGeneratorPage());
          case '/keystore_file_restore':
            return wrapWithProviders(const RestoreKeystoreFilePage());
          case '/gen_bip39':
            return wrapWithProviders(const SecretPhraseGeneratorPage());
          case '/verify_bip39':
            return wrapWithProviders(const SecretPhraseVerifyPage());
          case '/restore_bip39':
            return wrapWithProviders(const RestoreSecretPhrasePage());
          case '/restore_options':
            return wrapWithProviders(const RestoreWalletOptionsPage());
          case '/gen_options':
            return wrapWithProviders(const GenWalletOptionsPage());
          case '/new_wallet_options':
            return wrapWithProviders(const AddWalletOptionsPage());
          case '/initial':
            return wrapWithProviders(const InitialPage());
          case '/web_view':
            return wrapWithProviders(const WebViewPage(initialUrl: ''));
          case '/add_ledger_account':
            return wrapWithProviders(const AddLedgerAccountPage());
          default:
            return wrapWithProviders(const LoginPage());
        }
      }
      return wrapWithProviders(const LoginPage());
    }

    switch (settings.name) {
      case '/about':
        return wrapWithProviders(const AboutPage());
      case '/login':
        return wrapWithProviders(const LoginPage());
      case '/':
        return wrapWithProviders(const MainPage());
      case '/receive':
        return wrapWithProviders(const ReceivePage());
      case '/add_account':
        return wrapWithProviders(const AddAccount());
      case '/manage_tokens':
        return wrapWithProviders(const ManageTokensPage());
      case '/send':
        return wrapWithProviders(const SendTokenPage());
      case '/reveal_sk':
        return wrapWithProviders(const RevealSecretKey());
      case '/reveal_bip39':
        return wrapWithProviders(const RevealSecretPhrase());
      case '/browser':
        return wrapWithProviders(const BrowserPage());
      case '/wallet':
        return wrapWithProviders(const WalletPage());
      case '/appearance':
        return wrapWithProviders(const AppearanceSettingsPage());
      case '/notifications':
        return wrapWithProviders(const NotificationsSettingsPage());
      case '/address-book':
        return wrapWithProviders(const AddressBookPage());
      case '/language':
        return wrapWithProviders(const LanguagePage());
      case '/networks':
        return wrapWithProviders(const NetworkPage());
      case '/security':
        return wrapWithProviders(const SecurityPage());
      case '/settings':
        return wrapWithProviders(const SettingsPage());
      case '/currency':
        return wrapWithProviders(const CurrencyConversionPage());
      case '/pass_setup':
        return wrapWithProviders(const PasswordSetupPage());
      case '/cipher_setup':
        return wrapWithProviders(const CipherSettingsPage());
      case '/rk_restore':
        return wrapWithProviders(const RestoreRKStorage());
      case '/net_setup':
        return wrapWithProviders(const SetupNetworkSettingsPage());
      case '/gen_sk':
        return wrapWithProviders(const SecretKeyGeneratorPage());
      case '/gen_bip39':
        return wrapWithProviders(const SecretPhraseGeneratorPage());
      case '/verify_bip39':
        return wrapWithProviders(const SecretPhraseVerifyPage());
      case '/browser_settings':
        return wrapWithProviders(const BrowserSettingsPage());
      case '/keystore_backup':
        return wrapWithProviders(const KeystoreBackup());
      case '/restore_options':
        return wrapWithProviders(const RestoreWalletOptionsPage());
      case '/gen_options':
        return wrapWithProviders(const GenWalletOptionsPage());
      case '/new_wallet_options':
        return wrapWithProviders(const AddWalletOptionsPage());
      case '/restore_bip39':
        return wrapWithProviders(const RestoreSecretPhrasePage());
      case '/restore_sk':
        return wrapWithProviders(const SecretKeyRestorePage());
      case '/keystore_file_restore':
        return wrapWithProviders(const RestoreKeystoreFilePage());
      case '/initial':
        return wrapWithProviders(const InitialPage());
      case '/add_ledger_account':
        return wrapWithProviders(const AddLedgerAccountPage());
      case '/zil_stake':
        return wrapWithProviders(const ZilStakePage());
      case '/web_view':
        final uri =
            Uri.tryParse(settings.name?.replaceFirst('/web_view?', '') ?? '') ??
                Uri();
        return wrapWithProviders(
            WebViewPage(initialUrl: uri.queryParameters['url'] ?? ''));
      default:
        return wrapWithProviders(const MainPage());
    }
  }
}

```

`lib/services/auth_guard.dart`:

```dart
import 'package:zilpay/services/biometric_service.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:flutter/foundation.dart';
import 'package:zilpay/state/app_state.dart';

class AuthGuard extends ChangeNotifier {
  final FlutterSecureStorage _storage;
  final AppState _state;

  bool _enabled = false;

  bool get ready => _state.wallets.isNotEmpty;
  bool get enabled => _enabled;

  AuthGuard({required AppState state})
      : _storage = const FlutterSecureStorage(
          aOptions: AndroidOptions(
            encryptedSharedPreferences: true,
          ),
          iOptions: IOSOptions(
            accessibility: KeychainAccessibility.first_unlock,
            synchronizable: true,
          ),
        ),
        _state = state;

  void setEnabled(bool value) {
    _enabled = value;
  }

  Future<void> setSession(String sessionKey, String sessionValue) async {
    final AuthService authService = AuthService();

    try {
      final authMethods = await authService.getAvailableAuthMethods();

      if (authMethods.contains(AuthMethod.none)) {
        throw 'Device does not support secure storage. Please enable device lock.';
      }

      await _storage.write(
        key: sessionKey,
        value: sessionValue,
      );

      _enabled = true;

      notifyListeners();
    } catch (e) {
      throw 'Failed to save session key: $e';
    }
  }

  Future<String?> getSession({
    required String sessionKey,
    bool requireAuth = true,
    String reason = 'Please authenticate to access your wallet',
  }) async {
    final value = await _storage.read(key: sessionKey);

    if (value == null) {
      return null;
    }

    _enabled = true;

    notifyListeners();

    return value;
  }
}

```

`lib/services/biometric_service.dart`:

```dart
import 'package:local_auth/local_auth.dart';
import 'package:flutter/services.dart';

enum AuthMethod { faceId, fingerprint, biometric, pinCode, none }

class AuthService {
  final LocalAuthentication _auth = LocalAuthentication();

  Future<List<AuthMethod>> getAvailableAuthMethods() async {
    try {
      List<AuthMethod> methods = [];

      final isSupported = await _auth.isDeviceSupported();
      final canCheckBiometrics = await _auth.canCheckBiometrics;

      if (isSupported && canCheckBiometrics) {
        final availableBiometrics = await _auth.getAvailableBiometrics();

        if (availableBiometrics.contains(BiometricType.face)) {
          methods.add(AuthMethod.faceId);
        } else if (availableBiometrics.contains(BiometricType.fingerprint)) {
          methods.add(AuthMethod.fingerprint);
        } else if (availableBiometrics.contains(BiometricType.strong) ||
            availableBiometrics.contains(BiometricType.weak)) {
          methods.add(AuthMethod.biometric);
        }
      }

      if (await _checkDevicePinCode()) {
        methods.add(AuthMethod.pinCode);
      }

      return methods.isEmpty ? [AuthMethod.none] : methods;
    } on PlatformException catch (_) {
      return [AuthMethod.none];
    }
  }

  Future<bool> _checkDevicePinCode() async {
    try {
      return await _auth.isDeviceSupported();
    } catch (_) {
      return false;
    }
  }

  Future<bool> authenticate({
    bool allowPinCode = true,
    String reason = 'Please authenticate to continue',
  }) async {
    return await _auth.authenticate(
      localizedReason: reason,
      options: AuthenticationOptions(
        stickyAuth: true,
        biometricOnly: !allowPinCode,
        useErrorDialogs: true,
      ),
    );
  }
}

```

`lib/services/device.dart`:

```dart
import 'dart:io';
import 'package:device_info_plus/device_info_plus.dart';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:zilpay/services/biometric_service.dart';

class DeviceInfoService {
  final DeviceInfoPlugin _deviceInfo = DeviceInfoPlugin();

  Future<List<String>> getDeviceIdentifiers() async {
    final packageInfo = await PackageInfo.fromPlatform();
    final AuthService authService = AuthService();
    final methods =
        (await authService.getAvailableAuthMethods()).map((e) => e.name);

    if (Platform.isAndroid) {
      final info = await _deviceInfo.androidInfo;
      return [
        info.brand,
        info.manufacturer,
        info.hardware,
        info.model,
        info.product,
        info.device,
        info.board,
        info.isPhysicalDevice.toString(),
        packageInfo.packageName,
        packageInfo.buildSignature,
        ...methods
      ];
    }

    if (Platform.isIOS) {
      final info = await _deviceInfo.iosInfo;
      return [
        info.model,
        info.localizedModel,
        info.utsname.machine,
        info.isPhysicalDevice.toString(),
        packageInfo.packageName,
        packageInfo.buildSignature,
        ...methods
      ];
    }

    throw UnsupportedError('Unsupported platform');
  }

  Future<Map<String, String>> getDeviceInfo() async {
    final packageInfo = await PackageInfo.fromPlatform();

    if (Platform.isAndroid) {
      final info = await _deviceInfo.androidInfo;
      return {
        'brand': info.brand,
        'manufacturer': info.manufacturer,
        'hardware': info.hardware,
        'model': info.model,
        'product': info.product,
        'device': info.device,
        'board': info.board,
        'isPhysicalDevice': info.isPhysicalDevice.toString(),
        'appId': packageInfo.packageName,
        'buildSignature': packageInfo.buildSignature,
      };
    }

    if (Platform.isIOS) {
      final info = await _deviceInfo.iosInfo;
      return {
        'model': info.model,
        'localizedModel': info.localizedModel,
        'machine': info.utsname.machine,
        'isPhysicalDevice': info.isPhysicalDevice.toString(),
        'appId': packageInfo.packageName,
        'buildSignature': packageInfo.buildSignature,
      };
    }

    throw UnsupportedError('Unsupported platform');
  }
}

```

`lib/services/secure_storage.dart`:

```dart
import 'dart:convert';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:zilpay/services/biometric_service.dart';

class SecureStorage {
  static const String _keyPrefix = 'zilpay_';
  static const String _sessionKey = '${_keyPrefix}session';
  static const String _authMethodKey = '${_keyPrefix}auth_method';

  final FlutterSecureStorage _storage;
  final AuthService _authService;

  SecureStorage({AuthService? authService})
      : _storage = const FlutterSecureStorage(
          aOptions: AndroidOptions(
            encryptedSharedPreferences: true,
          ),
          iOptions: IOSOptions(
            accessibility: KeychainAccessibility.first_unlock,
            synchronizable: true,
          ),
        ),
        _authService = authService ?? AuthService();

  Future<void> saveSessionKey(String sessionKey) async {
    try {
      final authMethods = await _authService.getAvailableAuthMethods();

      if (authMethods.contains(AuthMethod.none)) {
        throw SecurityException(
            'Device does not support secure storage. Please enable device lock.');
      }

      final encodedKey = base64.encode(utf8.encode(sessionKey));

      await _storage.write(
        key: _sessionKey,
        value: encodedKey,
      );

      await _storage.write(
        key: _authMethodKey,
        value: authMethods.first.toString(),
      );
    } catch (e) {
      throw StorageException('Failed to save session key: $e');
    }
  }

  Future<String?> getSessionKey({
    bool requireAuth = true,
    String reason = 'Please authenticate to access your wallet',
  }) async {
    try {
      final encodedKey = await _storage.read(key: _sessionKey);
      if (encodedKey == null) return null;

      if (requireAuth) {
        final isAuthenticated = await _authService.authenticate(
          reason: reason,
        );

        if (!isAuthenticated) {
          throw AuthenticationException('Authentication failed');
        }
      }

      return utf8.decode(base64.decode(encodedKey));
    } catch (e) {
      if (e is AuthenticationException) rethrow;
      throw StorageException('Failed to get session key: $e');
    }
  }

  Future<bool> hasSessionKey() async {
    try {
      final key = await _storage.read(key: _sessionKey);
      return key != null;
    } catch (e) {
      return false;
    }
  }

  Future<void> deleteSessionKey() async {
    try {
      await _storage.delete(key: _sessionKey);
      await _storage.delete(key: _authMethodKey);
    } catch (e) {
      throw StorageException('Failed to delete session key: $e');
    }
  }

  Future<void> clearStorage() async {
    try {
      await _storage.deleteAll();
    } catch (e) {
      throw StorageException('Failed to clear storage: $e');
    }
  }

  Future<AuthMethod> getCurrentAuthMethod() async {
    try {
      final method = await _storage.read(key: _authMethodKey);
      if (method == null) return AuthMethod.none;
      return AuthMethod.values.firstWhere(
        (e) => e.toString() == method,
        orElse: () => AuthMethod.none,
      );
    } catch (e) {
      return AuthMethod.none;
    }
  }
}

class SecurityException implements Exception {
  final String message;
  SecurityException(this.message);
  @override
  String toString() => message;
}

class StorageException implements Exception {
  final String message;
  StorageException(this.message);
  @override
  String toString() => message;
}

class AuthenticationException implements Exception {
  final String message;
  AuthenticationException(this.message);
  @override
  String toString() => message;
}

```

`lib/services/social_media.dart`:

```dart
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:url_launcher/url_launcher.dart';

class SocialMediaService {
  static const String _telegramScheme = 'tg://';
  static const String _telegramWebUrl = 'https://telegram.org';
  static const String _telegramAndroidStore =
      'market://details?id=org.telegram.messenger';
  static const String _telegramIosStore =
      'https://apps.apple.com/app/telegram-messenger/id686449807';

  static final String _xScheme =
      Platform.isIOS ? 'twitter://' : 'com.twitter.android';
  static const String _xWebUrl = 'https://x.com';
  static const String _xAndroidStore =
      'market://details?id=com.twitter.android';
  static const String _xIosStore =
      'https://apps.apple.com/app/twitter/id333903271';

  static final String _githubScheme =
      Platform.isIOS ? 'github://' : 'com.github.android';
  static const String _githubWebUrl = 'https://github.com';
  static const String _githubAndroidStore =
      'market://details?id=com.github.android';
  static const String _githubIosStore =
      'https://apps.apple.com/app/github/id1477376905';

  Future<void> openTelegram({String? username, String? message}) async {
    String url = _telegramScheme;

    if (username != null) {
      url = 'tg://resolve?domain=$username';
    } else if (message != null) {
      url = 'tg://msg?text=${Uri.encodeComponent(message)}';
    }

    try {
      final Uri uri = Uri.parse(url);
      if (await canLaunchUrl(uri)) {
        await launchUrl(
          uri,
          mode: LaunchMode.externalApplication,
        );
      } else {
        await _handleAppNotInstalled(
          webUrl: _telegramWebUrl,
          androidStore: _telegramAndroidStore,
          iosStore: _telegramIosStore,
        );
      }
    } catch (e) {
      debugPrint('Error launching Telegram: $e');

      await _launchUrl(_telegramWebUrl);
    }
  }

  Future<void> openX({String? username, String? tweet}) async {
    String url = _xScheme;

    if (username != null) {
      url = Platform.isIOS
          ? 'twitter://user?screen_name=$username'
          : 'com.twitter.android://user?screen_name=$username';
    } else if (tweet != null) {
      url = Platform.isIOS
          ? 'twitter://post?message=${Uri.encodeComponent(tweet)}'
          : 'com.twitter.android://post?message=${Uri.encodeComponent(tweet)}';
    }

    try {
      final Uri uri = Uri.parse(url);
      if (await canLaunchUrl(uri)) {
        await launchUrl(
          uri,
          mode: LaunchMode.externalApplication,
        );
      } else {
        await _handleAppNotInstalled(
          webUrl: _xWebUrl,
          androidStore: _xAndroidStore,
          iosStore: _xIosStore,
        );
      }
    } catch (e) {
      debugPrint('Error launching X: $e');

      await _launchUrl(_xWebUrl);
    }
  }

  Future<void> openGitHub({String? username, String? repository}) async {
    String url;

    if (username != null && repository != null) {
      url = Platform.isIOS
          ? 'github://repo/$username/$repository'
          : 'com.github.android://repo/$username/$repository';
    } else if (username != null) {
      url = Platform.isIOS
          ? 'github://user/$username'
          : 'com.github.android://user/$username';
    } else {
      url = _githubScheme;
    }

    String webUrl = _githubWebUrl;
    if (username != null && repository != null) {
      webUrl = '$_githubWebUrl/$username/$repository';
    } else if (username != null) {
      webUrl = '$_githubWebUrl/$username';
    }

    try {
      final Uri uri = Uri.parse(url);
      if (await canLaunchUrl(uri)) {
        await launchUrl(
          uri,
          mode: LaunchMode.externalApplication,
        );
      } else {
        await _handleAppNotInstalled(
          webUrl: webUrl,
          androidStore: _githubAndroidStore,
          iosStore: _githubIosStore,
        );
      }
    } catch (e) {
      debugPrint('Error launching GitHub: $e');

      await _launchUrl(webUrl);
    }
  }

  Future<void> _handleAppNotInstalled({
    required String webUrl,
    required String androidStore,
    required String iosStore,
  }) async {
    final Uri storeUri = Uri.parse(
      Platform.isAndroid ? androidStore : iosStore,
    );

    try {
      if (await canLaunchUrl(storeUri)) {
        await launchUrl(storeUri);
      } else {
        await _launchUrl(webUrl);
      }
    } catch (e) {
      debugPrint('Error opening store/web: $e');
      await _launchUrl(webUrl);
    }
  }

  Future<void> _launchUrl(String url) async {
    final Uri uri = Uri.parse(url);
    try {
      await launchUrl(
        uri,
        mode: LaunchMode.externalApplication,
      );
    } catch (e) {
      debugPrint('Error launching URL: $e');
    }
  }
}

```

`lib/state/app_state.dart`:

```dart
import 'dart:ui';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:zilpay/mixins/gas_eip1559.dart';
import 'package:zilpay/src/rust/api/backend.dart';
import 'package:zilpay/src/rust/api/book.dart';
import 'package:zilpay/src/rust/api/connections.dart';
import 'package:zilpay/src/rust/api/settings.dart';
import 'package:zilpay/src/rust/api/token.dart';
import 'package:zilpay/src/rust/api/transaction.dart';
import 'package:zilpay/src/rust/api/wallet.dart';
import 'package:zilpay/src/rust/models/account.dart';
import 'package:zilpay/src/rust/models/background.dart';
import 'package:zilpay/src/rust/models/book.dart';
import 'package:zilpay/src/rust/models/connection.dart';
import 'package:zilpay/src/rust/models/provider.dart';
import 'package:zilpay/src/rust/models/wallet.dart';
import 'package:zilpay/theme/app_theme.dart';

class AppState extends ChangeNotifier with WidgetsBindingObserver {
  List<AddressBookEntryInfo> _book = [];
  List<ConnectionInfo> _connections = [];
  DateTime _lastRateUpdateTime = DateTime.fromMillisecondsSinceEpoch(0);
  GasFeeOption _selectedGasOption = GasFeeOption.market;
  bool _showAddressesThroughTransactionHistory = false;

  static const Duration _rateUpdateCooldown = Duration(minutes: 1);
  static const String _hideBalanceStorageKey = "hide_balance_key";
  static const String _gasOptionStorageKey = "gas_option_key";
  static const String _showAddressesThroughTransactionHistoryKey =
      "show_addresses_transaction_history_key";

  late BackgroundState _state;
  late String _cahceDir;
  int _selectedWallet = 0;
  bool _hideBalance = false;

  final Brightness _systemBrightness =
      PlatformDispatcher.instance.platformBrightness;

  AppState({
    required BackgroundState state,
    required String cahceDir,
  }) {
    WidgetsBinding.instance.addObserver(this);
    _state = state;
    _cahceDir = cahceDir;
  }

  void setSelectedWallet(int index) {
    _selectedWallet = index;
    notifyListeners();
  }

  bool get showAddressesThroughTransactionHistory {
    return _showAddressesThroughTransactionHistory;
  }

  GasFeeOption get selectedGasOption {
    return _selectedGasOption;
  }

  String get cahceDir {
    return _cahceDir;
  }

  bool get hideBalance {
    return _hideBalance;
  }

  List<WalletInfo> get wallets {
    return _state.wallets;
  }

  Locale? get locale {
    return state.locale != null ? Locale(state.locale!) : null;
  }

  List<ConnectionInfo> get connections {
    return _connections;
  }

  List<AddressBookEntryInfo> get book {
    return _book;
  }

  BackgroundState get state {
    return _state;
  }

  AppTheme get currentTheme {
    switch (_state.appearances) {
      case 0:
        return _systemBrightness == Brightness.dark
            ? DarkTheme()
            : LightTheme();
      case 1:
        return DarkTheme();
      case 2:
        return LightTheme();
      default:
        return _systemBrightness == Brightness.dark
            ? DarkTheme()
            : LightTheme();
    }
  }

  WalletInfo? get wallet {
    return _state.wallets[_selectedWallet];
  }

  NetworkConfigInfo? get chain {
    BigInt? hash = account?.chainHash;

    if (hash == null) {
      return null;
    }

    return getChain(hash);
  }

  AccountInfo? get account {
    if (wallet == null) {
      return null;
    }

    int index = wallet!.selectedAccount.toInt();

    return wallet!.accounts[index];
  }

  int get selectedWallet {
    return _selectedWallet;
  }

  void setHideBalance(bool value) async {
    _hideBalance = value;
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(_hideBalanceStorageKey, value);
    notifyListeners();
  }

  Future<void> syncData() async {
    _state = await getData();
    await syncBook();
    await syncConnections();
    await loadSelectedGasOption();
    await loadHideBalance();
    await loadShowAddressesThroughTransactionHistory();
    notifyListeners();
  }

  Future<void> syncBook() async {
    _book = await getAddressBookList();

    notifyListeners();
  }

  Future<void> loadHideBalance() async {
    final prefs = await SharedPreferences.getInstance();
    _hideBalance = prefs.getBool(_hideBalanceStorageKey) ?? false;
    notifyListeners();
  }

  Future<void> syncConnections() async {
    _connections =
        await getConnectionsList(walletIndex: BigInt.from(_selectedWallet));

    notifyListeners();
  }

  Future<void> syncRates({bool force = false}) async {
    if (chain?.testnet == true || wallet?.settings.ratesApiOptions == 0) return;
    final now = DateTime.now();

    if (!force && now.difference(_lastRateUpdateTime) < _rateUpdateCooldown) {
      return;
    }

    try {
      await updateRates(walletIndex: BigInt.from(_selectedWallet));
      _lastRateUpdateTime = now;
    } catch (e) {
      debugPrint("error sync rates: $e");
    }

    notifyListeners();
  }

  Future<void> updateSelectedAccount(
    BigInt walletIndex,
    BigInt accountIndex,
  ) async {
    await selectAccount(walletIndex: walletIndex, accountIndex: accountIndex);
    await syncData();

    notifyListeners();
  }

  Future<void> setAppearancesCode(int code, bool compactNumbers) async {
    await setTheme(
      appearancesCode: code,
      compactNumbers: compactNumbers,
    );
    _state = await getData();

    notifyListeners();

    SystemChrome.setSystemUIOverlayStyle(SystemUiOverlayStyle(
      statusBarColor: Colors.transparent,
      statusBarIconBrightness: currentTheme.brightness,
      statusBarBrightness: currentTheme.brightness == Brightness.light
          ? Brightness.dark
          : Brightness.light,
      systemNavigationBarColor: currentTheme.background,
      systemNavigationBarIconBrightness: currentTheme.brightness,
    ));
  }

  Future<void> setSelectedGasOption(GasFeeOption option) async {
    _selectedGasOption = option;
    final prefs = await SharedPreferences.getInstance();
    final key = "$_gasOptionStorageKey:$selectedWallet";
    await prefs.setString(key, option.name);
    notifyListeners();
  }

  Future<void> loadSelectedGasOption() async {
    final prefs = await SharedPreferences.getInstance();
    final key = "$_gasOptionStorageKey:$selectedWallet";
    final optionName = prefs.getString(key);

    if (optionName != null) {
      try {
        _selectedGasOption = GasFeeOption.values.firstWhere(
          (option) => option.name == optionName,
        );
      } catch (e) {
        _selectedGasOption = GasFeeOption.market;
      }
    }
    notifyListeners();
  }

  Future<void> setShowAddressesThroughTransactionHistory(bool value) async {
    _showAddressesThroughTransactionHistory = value;
    final prefs = await SharedPreferences.getInstance();
    final key = "$_showAddressesThroughTransactionHistoryKey:$selectedWallet";
    await prefs.setBool(key, value);
    notifyListeners();
  }

  Future<void> loadShowAddressesThroughTransactionHistory() async {
    final prefs = await SharedPreferences.getInstance();
    final key = "$_showAddressesThroughTransactionHistoryKey:$selectedWallet";
    _showAddressesThroughTransactionHistory = prefs.getBool(key) ?? false;
    notifyListeners();
  }

  Future<void> startTrackHistoryWorker() async {
    try {
      Stream<String> stream =
          startHistoryWorker(walletIndex: BigInt.from(selectedWallet));

      stream.listen((event) async {
        notifyListeners();
      });
    } catch (e) {
      debugPrint("start worker error: $e");
    }
  }

  NetworkConfigInfo? getChain(BigInt hash) {
    return state.providers.firstWhere((e) => e.chainHash == hash);
  }
}

```

`lib/theme/app_theme.dart`:

```dart
import 'package:flutter/material.dart';

class _TextStyles {
  static const String _fontFamily = 'SFRounded';

  static const TextStyle headline1 = TextStyle(
    fontFamily: _fontFamily,
    fontSize: 28,
    fontWeight: FontWeight.bold,
  );
  static const TextStyle headline2 = TextStyle(
    fontFamily: _fontFamily,
    fontSize: 22,
    fontWeight: FontWeight.w600,
  );
  static const TextStyle subtitle1 = TextStyle(
    fontFamily: _fontFamily,
    fontSize: 20,
    fontWeight: FontWeight.w500,
  );
  static const TextStyle bodyText1 = TextStyle(
    fontFamily: _fontFamily,
    fontSize: 15,
    fontWeight: FontWeight.w500,
  );
  static const TextStyle bodyText2 = TextStyle(
    fontFamily: _fontFamily,
    fontSize: 14,
    fontWeight: FontWeight.w500,
  );
  static const TextStyle button = TextStyle(
    fontFamily: _fontFamily,
    fontSize: 16,
    fontWeight: FontWeight.w600,
    letterSpacing: 1.25,
  );
  static const TextStyle caption = TextStyle(
    fontFamily: _fontFamily,
    fontSize: 11,
    fontWeight: FontWeight.w400,
  );
  static const TextStyle overline = TextStyle(
    fontFamily: _fontFamily,
    fontSize: 10,
    fontWeight: FontWeight.w300,
    letterSpacing: 1.5,
  );
}

abstract class AppTheme {
  String value = "Dark";

  Color get primaryPurple;
  Color get secondaryPurple;
  Color get background;
  Color get cardBackground;
  Color get textPrimary;
  Color get textSecondary;
  Color get buttonBackground;
  Color get buttonText;
  Color get danger;
  Color get success;
  Color get warning;

  Color get gradientStart;
  Color get gradientMiddle;
  Color get gradientEnd;

  Color get modalBorder;

  Brightness get brightness;

  TextStyle get headline1;
  TextStyle get headline2;
  TextStyle get subtitle1;
  TextStyle get bodyText1;
  TextStyle get bodyText2;
  TextStyle get button;
  TextStyle get caption;
  TextStyle get overline;
}

class DarkTheme implements AppTheme {
  @override
  String value = "Dark";

  @override
  Color get primaryPurple => const Color(0xFF8A2BE2);
  @override
  Color get secondaryPurple => const Color(0xFFB23AEE);
  @override
  Color get background => Colors.black;
  @override
  Color get cardBackground => const Color(0xFF0D1117);
  @override
  Color get textPrimary => Colors.white;
  @override
  Color get textSecondary => const Color(0xFFB3B3B3);
  @override
  Color get buttonBackground => const Color(0xFF3A3A3A);
  @override
  Color get buttonText => const Color(0xFFE0E0E0);
  @override
  Color get danger => const Color(0xFFE94560);
  @override
  Color get success => const Color(0xFF4CAF50);
  @override
  Color get warning => const Color(0xFFFF9800);

  @override
  Color get gradientStart => const Color(0xFF4A0E4E);
  @override
  Color get gradientMiddle => const Color(0xFF220A23);
  @override
  Color get gradientEnd => Colors.black;

  @override
  Color get modalBorder => Colors.grey.withValues(alpha: 0.2);

  @override
  Brightness get brightness => Brightness.light;

  @override
  TextStyle get headline1 => _TextStyles.headline1;
  @override
  TextStyle get headline2 => _TextStyles.headline2;
  @override
  TextStyle get subtitle1 => _TextStyles.subtitle1;
  @override
  TextStyle get bodyText1 => _TextStyles.bodyText1;
  @override
  TextStyle get bodyText2 => _TextStyles.bodyText2;
  @override
  TextStyle get button => _TextStyles.button;
  @override
  TextStyle get caption => _TextStyles.caption;
  @override
  TextStyle get overline => _TextStyles.overline;
}

class LightTheme implements AppTheme {
  @override
  String value = "Light";

  @override
  Color get primaryPurple => const Color(0xFFFC72FF);
  @override
  Color get secondaryPurple => const Color(0xFFB0B0B0);
  @override
  Color get background => const Color(0xFFFFFFFF);
  @override
  Color get cardBackground => const Color(0xFFF7F7F7);
  @override
  Color get textPrimary => const Color(0xFF000000);
  @override
  Color get textSecondary => const Color(0xFF6C6C6C);
  @override
  Color get buttonBackground => const Color(0xFFFF007A);
  @override
  Color get buttonText => const Color(0xFFFFFFFF);
  @override
  Color get danger => const Color(0xFFFF4D4D);
  @override
  Color get success => const Color(0xFF00D395);
  @override
  Color get warning => const Color(0xFFFFA500);

  @override
  Color get gradientStart => const Color(0xFFFF007A);
  @override
  Color get gradientMiddle => const Color(0xFFD500F9);
  @override
  Color get gradientEnd => const Color(0xFFFF007A);

  @override
  Color get modalBorder => const Color(0xFFE0E0E0);

  @override
  Brightness get brightness => Brightness.light;

  @override
  TextStyle get headline1 => _TextStyles.headline1;
  @override
  TextStyle get headline2 => _TextStyles.headline2;
  @override
  TextStyle get subtitle1 => _TextStyles.subtitle1;
  @override
  TextStyle get bodyText1 => _TextStyles.bodyText1;
  @override
  TextStyle get bodyText2 => _TextStyles.bodyText2;
  @override
  TextStyle get button => _TextStyles.button;
  @override
  TextStyle get caption => _TextStyles.caption;
  @override
  TextStyle get overline => _TextStyles.overline;
}

```

`lib/utils/utils.dart`:

```dart
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

List<int> hexToBytes(String hex) => [
      for (int i = 0; i < hex.length; i += 2)
        int.parse(hex.substring(i, i + 2), radix: 16)
    ];

String decodePersonalSignMessage(String dataToSign) {
  try {
    if (dataToSign.startsWith('0x')) {
      final bytes = hexToBytes(dataToSign.substring(2));
      return String.fromCharCodes(bytes);
    }
    return dataToSign;
  } catch (e) {
    return dataToSign;
  }
}

bool isDomainConnected(String domain, List<dynamic> connections) {
  return connections.any((conn) => conn.domain == domain);
}

List<String> filterByIndexes(List<String> addresses, Uint64List indexes) {
  return [
    for (var i = 0; i < indexes.length; i++)
      if (i < addresses.length) addresses[indexes[i].toInt()]
  ];
}

```