// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.6.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/auth.dart';
import 'api/backend.dart';
import 'api/book.dart';
import 'api/cache.dart';
import 'api/connections.dart';
import 'api/ledger.dart';
import 'api/methods.dart';
import 'api/provider.dart';
import 'api/settings.dart';
import 'api/token.dart';
import 'api/transaction.dart';
import 'api/wallet.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'models/account.dart';
import 'models/background.dart';
import 'models/book.dart';
import 'models/connection.dart';
import 'models/ftoken.dart';
import 'models/keypair.dart';
import 'models/notification.dart';
import 'models/provider.dart';
import 'models/settings.dart';
import 'models/transactions/access_list.dart';
import 'models/transactions/base_token.dart';
import 'models/transactions/evm.dart';
import 'models/transactions/history.dart';
import 'models/transactions/request.dart';
import 'models/transactions/scilla.dart';
import 'models/transactions/transaction_metadata.dart';
import 'models/wallet.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiMethodsInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.6.0';

  @override
  int get rustContentHash => -429125825;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_zilpay',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<(String, String)> crateApiWalletAddBip39Wallet(
      {required Bip39AddWalletParams params,
      required WalletSettingsInfo walletSettings,
      required List<FTokenInfo> ftokens});

  Future<List<FTokenInfo>> crateApiTokenAddFtoken(
      {required FTokenInfo meta, required BigInt walletIndex});

  Future<void> crateApiLedgerAddLedgerAccount(
      {required BigInt walletIndex,
      required BigInt accountIndex,
      required String name,
      required String pubKey,
      required List<String> identifiers,
      String? sessionCipher});

  Future<(String, String)> crateApiLedgerAddLedgerWallet(
      {required LedgerParamsInput params,
      required WalletSettingsInfo walletSettings,
      required List<FTokenInfo> ftokens});

  Future<void> crateApiBookAddNewBookAddress(
      {required String name, required String addr, required BigInt net});

  Future<void> crateApiWalletAddNextBip39Account(
      {required AddNextBip39AccountParams params});

  Future<void> crateApiProviderAddProvider(
      {required NetworkConfigInfo providerConfig});

  Future<void> crateApiProviderAddProvidersList(
      {required List<NetworkConfigInfo> providerConfig});

  Future<void> crateApiTransactionAddRequestedTransactions(
      {required BigInt walletIndex, required TransactionRequestInfo tx});

  Future<(String, String)> crateApiWalletAddSkWallet(
      {required AddSKWalletParams params,
      required WalletSettingsInfo walletSettings,
      required List<FTokenInfo> ftokens});

  Future<void> crateApiConnectionsAddWalletToConnection(
      {required String domain, required BigInt walletIndex});

  Future<Uint64List> crateApiMethodsCheckNotExistsBip39Words(
      {required List<String> words, required String lang});

  Future<void> crateApiTransactionClearRequestedTransactions(
      {required BigInt walletIndex});

  Future<void> crateApiConnectionsCreateNewConnection(
      {required ConnectionInfo conn});

  Future<FTokenInfo> crateApiTokenFetchTokenMeta(
      {required String addr, required BigInt walletIndex});

  Future<String> crateApiMethodsGenBip39Words({required int count});

  Future<KeyPairInfo> crateApiMethodsGenKeypair();

  Future<List<AddressBookEntryInfo>> crateApiBookGetAddressBookList();

  Future<List<ConnectionInfo>> crateApiConnectionsGetConnectionsList();

  Future<BackgroundState> crateApiBackendGetData();

  Future<List<HistoricalTransactionInfo>> crateApiTransactionGetHistory(
      {required BigInt walletIndex});

  Future<(Uint8List, String)> crateApiCacheGetImageBytes(
      {required String dir, required String url});

  Future<String> crateApiCacheGetImageName(
      {required String dir, required String url});

  Future<NetworkConfigInfo> crateApiProviderGetProvider(
      {required BigInt providerIndex});

  Future<List<NetworkConfigInfo>> crateApiProviderGetProviders();

  Future<String> crateApiTokenGetRates();

  Future<List<TransactionRequestInfo>>
      crateApiTransactionGetRequestedTransactions(
          {required BigInt walletIndex});

  Future<List<WalletInfo>> crateApiWalletGetWallets();

  Future<void> crateApiMethodsInitApp();

  Future<bool> crateApiBackendIsServiceRunning();

  Future<void> crateApiWalletSelectAccount(
      {required BigInt walletIndex, required BigInt accountIndex});

  Future<void> crateApiSettingsSetGlobalNotifications(
      {required bool globalEnabled});

  Future<void> crateApiSettingsSetRateFetcher(
      {required BigInt walletIndex, String? currency});

  Future<void> crateApiSettingsSetTheme({required int appearancesCode});

  Future<void> crateApiSettingsSetWalletEns(
      {required BigInt walletIndex, required bool ensEnabled});

  Future<void> crateApiSettingsSetWalletGasControl(
      {required BigInt walletIndex, required bool enabled});

  Future<void> crateApiSettingsSetWalletIpfsNode(
      {required BigInt walletIndex, String? node});

  Future<void> crateApiSettingsSetWalletNodeRanking(
      {required BigInt walletIndex, required bool enabled});

  Future<void> crateApiSettingsSetWalletNotifications(
      {required BigInt walletIndex,
      required bool transactions,
      required bool price,
      required bool security,
      required bool balance});

  Future<BackgroundState> crateApiBackendStartService({required String path});

  Stream<String> crateApiBackendStartWorker();

  Future<void> crateApiBackendStopService();

  Future<void> crateApiTokenSyncBalances({required BigInt walletIndex});

  Future<bool> crateApiAuthTryUnlockWithPassword(
      {required String password,
      required BigInt walletIndex,
      required List<String> identifiers});

  Future<bool> crateApiAuthTryUnlockWithSession(
      {required String sessionCipher,
      required BigInt walletIndex,
      required List<String> identifiers});

  Future<void> crateApiTokenUpdateRates();
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<(String, String)> crateApiWalletAddBip39Wallet(
      {required Bip39AddWalletParams params,
      required WalletSettingsInfo walletSettings,
      required List<FTokenInfo> ftokens}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_bip_39_add_wallet_params(params, serializer);
        sse_encode_box_autoadd_wallet_settings_info(walletSettings, serializer);
        sse_encode_list_f_token_info(ftokens, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_string_string,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiWalletAddBip39WalletConstMeta,
      argValues: [params, walletSettings, ftokens],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletAddBip39WalletConstMeta =>
      const TaskConstMeta(
        debugName: "add_bip39_wallet",
        argNames: ["params", "walletSettings", "ftokens"],
      );

  @override
  Future<List<FTokenInfo>> crateApiTokenAddFtoken(
      {required FTokenInfo meta, required BigInt walletIndex}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_f_token_info(meta, serializer);
        sse_encode_usize(walletIndex, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_f_token_info,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiTokenAddFtokenConstMeta,
      argValues: [meta, walletIndex],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTokenAddFtokenConstMeta => const TaskConstMeta(
        debugName: "add_ftoken",
        argNames: ["meta", "walletIndex"],
      );

  @override
  Future<void> crateApiLedgerAddLedgerAccount(
      {required BigInt walletIndex,
      required BigInt accountIndex,
      required String name,
      required String pubKey,
      required List<String> identifiers,
      String? sessionCipher}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(walletIndex, serializer);
        sse_encode_usize(accountIndex, serializer);
        sse_encode_String(name, serializer);
        sse_encode_String(pubKey, serializer);
        sse_encode_list_String(identifiers, serializer);
        sse_encode_opt_String(sessionCipher, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiLedgerAddLedgerAccountConstMeta,
      argValues: [
        walletIndex,
        accountIndex,
        name,
        pubKey,
        identifiers,
        sessionCipher
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLedgerAddLedgerAccountConstMeta =>
      const TaskConstMeta(
        debugName: "add_ledger_account",
        argNames: [
          "walletIndex",
          "accountIndex",
          "name",
          "pubKey",
          "identifiers",
          "sessionCipher"
        ],
      );

  @override
  Future<(String, String)> crateApiLedgerAddLedgerWallet(
      {required LedgerParamsInput params,
      required WalletSettingsInfo walletSettings,
      required List<FTokenInfo> ftokens}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_ledger_params_input(params, serializer);
        sse_encode_box_autoadd_wallet_settings_info(walletSettings, serializer);
        sse_encode_list_f_token_info(ftokens, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_string_string,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiLedgerAddLedgerWalletConstMeta,
      argValues: [params, walletSettings, ftokens],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLedgerAddLedgerWalletConstMeta =>
      const TaskConstMeta(
        debugName: "add_ledger_wallet",
        argNames: ["params", "walletSettings", "ftokens"],
      );

  @override
  Future<void> crateApiBookAddNewBookAddress(
      {required String name, required String addr, required BigInt net}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        sse_encode_String(addr, serializer);
        sse_encode_usize(net, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBookAddNewBookAddressConstMeta,
      argValues: [name, addr, net],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBookAddNewBookAddressConstMeta =>
      const TaskConstMeta(
        debugName: "add_new_book_address",
        argNames: ["name", "addr", "net"],
      );

  @override
  Future<void> crateApiWalletAddNextBip39Account(
      {required AddNextBip39AccountParams params}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_add_next_bip_39_account_params(
            params, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiWalletAddNextBip39AccountConstMeta,
      argValues: [params],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletAddNextBip39AccountConstMeta =>
      const TaskConstMeta(
        debugName: "add_next_bip39_account",
        argNames: ["params"],
      );

  @override
  Future<void> crateApiProviderAddProvider(
      {required NetworkConfigInfo providerConfig}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_network_config_info(providerConfig, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiProviderAddProviderConstMeta,
      argValues: [providerConfig],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProviderAddProviderConstMeta =>
      const TaskConstMeta(
        debugName: "add_provider",
        argNames: ["providerConfig"],
      );

  @override
  Future<void> crateApiProviderAddProvidersList(
      {required List<NetworkConfigInfo> providerConfig}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_network_config_info(providerConfig, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiProviderAddProvidersListConstMeta,
      argValues: [providerConfig],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProviderAddProvidersListConstMeta =>
      const TaskConstMeta(
        debugName: "add_providers_list",
        argNames: ["providerConfig"],
      );

  @override
  Future<void> crateApiTransactionAddRequestedTransactions(
      {required BigInt walletIndex, required TransactionRequestInfo tx}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(walletIndex, serializer);
        sse_encode_box_autoadd_transaction_request_info(tx, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiTransactionAddRequestedTransactionsConstMeta,
      argValues: [walletIndex, tx],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTransactionAddRequestedTransactionsConstMeta =>
      const TaskConstMeta(
        debugName: "add_requested_transactions",
        argNames: ["walletIndex", "tx"],
      );

  @override
  Future<(String, String)> crateApiWalletAddSkWallet(
      {required AddSKWalletParams params,
      required WalletSettingsInfo walletSettings,
      required List<FTokenInfo> ftokens}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_add_sk_wallet_params(params, serializer);
        sse_encode_box_autoadd_wallet_settings_info(walletSettings, serializer);
        sse_encode_list_f_token_info(ftokens, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_string_string,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiWalletAddSkWalletConstMeta,
      argValues: [params, walletSettings, ftokens],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletAddSkWalletConstMeta => const TaskConstMeta(
        debugName: "add_sk_wallet",
        argNames: ["params", "walletSettings", "ftokens"],
      );

  @override
  Future<void> crateApiConnectionsAddWalletToConnection(
      {required String domain, required BigInt walletIndex}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(domain, serializer);
        sse_encode_usize(walletIndex, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiConnectionsAddWalletToConnectionConstMeta,
      argValues: [domain, walletIndex],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiConnectionsAddWalletToConnectionConstMeta =>
      const TaskConstMeta(
        debugName: "add_wallet_to_connection",
        argNames: ["domain", "walletIndex"],
      );

  @override
  Future<Uint64List> crateApiMethodsCheckNotExistsBip39Words(
      {required List<String> words, required String lang}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(words, serializer);
        sse_encode_String(lang, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_usize_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMethodsCheckNotExistsBip39WordsConstMeta,
      argValues: [words, lang],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMethodsCheckNotExistsBip39WordsConstMeta =>
      const TaskConstMeta(
        debugName: "check_not_exists_bip39_words",
        argNames: ["words", "lang"],
      );

  @override
  Future<void> crateApiTransactionClearRequestedTransactions(
      {required BigInt walletIndex}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(walletIndex, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiTransactionClearRequestedTransactionsConstMeta,
      argValues: [walletIndex],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTransactionClearRequestedTransactionsConstMeta =>
      const TaskConstMeta(
        debugName: "clear_requested_transactions",
        argNames: ["walletIndex"],
      );

  @override
  Future<void> crateApiConnectionsCreateNewConnection(
      {required ConnectionInfo conn}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_connection_info(conn, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiConnectionsCreateNewConnectionConstMeta,
      argValues: [conn],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiConnectionsCreateNewConnectionConstMeta =>
      const TaskConstMeta(
        debugName: "create_new_connection",
        argNames: ["conn"],
      );

  @override
  Future<FTokenInfo> crateApiTokenFetchTokenMeta(
      {required String addr, required BigInt walletIndex}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(addr, serializer);
        sse_encode_usize(walletIndex, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_token_info,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiTokenFetchTokenMetaConstMeta,
      argValues: [addr, walletIndex],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTokenFetchTokenMetaConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_token_meta",
        argNames: ["addr", "walletIndex"],
      );

  @override
  Future<String> crateApiMethodsGenBip39Words({required int count}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(count, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiMethodsGenBip39WordsConstMeta,
      argValues: [count],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMethodsGenBip39WordsConstMeta =>
      const TaskConstMeta(
        debugName: "gen_bip39_words",
        argNames: ["count"],
      );

  @override
  Future<KeyPairInfo> crateApiMethodsGenKeypair() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_key_pair_info,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiMethodsGenKeypairConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMethodsGenKeypairConstMeta => const TaskConstMeta(
        debugName: "gen_keypair",
        argNames: [],
      );

  @override
  Future<List<AddressBookEntryInfo>> crateApiBookGetAddressBookList() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_address_book_entry_info,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBookGetAddressBookListConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBookGetAddressBookListConstMeta =>
      const TaskConstMeta(
        debugName: "get_address_book_list",
        argNames: [],
      );

  @override
  Future<List<ConnectionInfo>> crateApiConnectionsGetConnectionsList() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_connection_info,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiConnectionsGetConnectionsListConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiConnectionsGetConnectionsListConstMeta =>
      const TaskConstMeta(
        debugName: "get_connections_list",
        argNames: [],
      );

  @override
  Future<BackgroundState> crateApiBackendGetData() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_background_state,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendGetDataConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendGetDataConstMeta => const TaskConstMeta(
        debugName: "get_data",
        argNames: [],
      );

  @override
  Future<List<HistoricalTransactionInfo>> crateApiTransactionGetHistory(
      {required BigInt walletIndex}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(walletIndex, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_historical_transaction_info,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiTransactionGetHistoryConstMeta,
      argValues: [walletIndex],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTransactionGetHistoryConstMeta =>
      const TaskConstMeta(
        debugName: "get_history",
        argNames: ["walletIndex"],
      );

  @override
  Future<(Uint8List, String)> crateApiCacheGetImageBytes(
      {required String dir, required String url}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(dir, serializer);
        sse_encode_String(url, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_list_prim_u_8_strict_string,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiCacheGetImageBytesConstMeta,
      argValues: [dir, url],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCacheGetImageBytesConstMeta => const TaskConstMeta(
        debugName: "get_image_bytes",
        argNames: ["dir", "url"],
      );

  @override
  Future<String> crateApiCacheGetImageName(
      {required String dir, required String url}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(dir, serializer);
        sse_encode_String(url, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiCacheGetImageNameConstMeta,
      argValues: [dir, url],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCacheGetImageNameConstMeta => const TaskConstMeta(
        debugName: "get_image_name",
        argNames: ["dir", "url"],
      );

  @override
  Future<NetworkConfigInfo> crateApiProviderGetProvider(
      {required BigInt providerIndex}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(providerIndex, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_network_config_info,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiProviderGetProviderConstMeta,
      argValues: [providerIndex],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProviderGetProviderConstMeta =>
      const TaskConstMeta(
        debugName: "get_provider",
        argNames: ["providerIndex"],
      );

  @override
  Future<List<NetworkConfigInfo>> crateApiProviderGetProviders() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_network_config_info,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiProviderGetProvidersConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProviderGetProvidersConstMeta =>
      const TaskConstMeta(
        debugName: "get_providers",
        argNames: [],
      );

  @override
  Future<String> crateApiTokenGetRates() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiTokenGetRatesConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTokenGetRatesConstMeta => const TaskConstMeta(
        debugName: "get_rates",
        argNames: [],
      );

  @override
  Future<List<TransactionRequestInfo>>
      crateApiTransactionGetRequestedTransactions(
          {required BigInt walletIndex}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(walletIndex, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_transaction_request_info,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiTransactionGetRequestedTransactionsConstMeta,
      argValues: [walletIndex],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTransactionGetRequestedTransactionsConstMeta =>
      const TaskConstMeta(
        debugName: "get_requested_transactions",
        argNames: ["walletIndex"],
      );

  @override
  Future<List<WalletInfo>> crateApiWalletGetWallets() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_wallet_info,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiWalletGetWalletsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletGetWalletsConstMeta => const TaskConstMeta(
        debugName: "get_wallets",
        argNames: [],
      );

  @override
  Future<void> crateApiMethodsInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 29, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMethodsInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMethodsInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<bool> crateApiBackendIsServiceRunning() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBackendIsServiceRunningConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendIsServiceRunningConstMeta =>
      const TaskConstMeta(
        debugName: "is_service_running",
        argNames: [],
      );

  @override
  Future<void> crateApiWalletSelectAccount(
      {required BigInt walletIndex, required BigInt accountIndex}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(walletIndex, serializer);
        sse_encode_usize(accountIndex, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 31, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiWalletSelectAccountConstMeta,
      argValues: [walletIndex, accountIndex],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletSelectAccountConstMeta =>
      const TaskConstMeta(
        debugName: "select_account",
        argNames: ["walletIndex", "accountIndex"],
      );

  @override
  Future<void> crateApiSettingsSetGlobalNotifications(
      {required bool globalEnabled}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(globalEnabled, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 32, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiSettingsSetGlobalNotificationsConstMeta,
      argValues: [globalEnabled],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSettingsSetGlobalNotificationsConstMeta =>
      const TaskConstMeta(
        debugName: "set_global_notifications",
        argNames: ["globalEnabled"],
      );

  @override
  Future<void> crateApiSettingsSetRateFetcher(
      {required BigInt walletIndex, String? currency}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(walletIndex, serializer);
        sse_encode_opt_String(currency, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 33, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiSettingsSetRateFetcherConstMeta,
      argValues: [walletIndex, currency],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSettingsSetRateFetcherConstMeta =>
      const TaskConstMeta(
        debugName: "set_rate_fetcher",
        argNames: ["walletIndex", "currency"],
      );

  @override
  Future<void> crateApiSettingsSetTheme({required int appearancesCode}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(appearancesCode, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 34, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiSettingsSetThemeConstMeta,
      argValues: [appearancesCode],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSettingsSetThemeConstMeta => const TaskConstMeta(
        debugName: "set_theme",
        argNames: ["appearancesCode"],
      );

  @override
  Future<void> crateApiSettingsSetWalletEns(
      {required BigInt walletIndex, required bool ensEnabled}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(walletIndex, serializer);
        sse_encode_bool(ensEnabled, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 35, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiSettingsSetWalletEnsConstMeta,
      argValues: [walletIndex, ensEnabled],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSettingsSetWalletEnsConstMeta =>
      const TaskConstMeta(
        debugName: "set_wallet_ens",
        argNames: ["walletIndex", "ensEnabled"],
      );

  @override
  Future<void> crateApiSettingsSetWalletGasControl(
      {required BigInt walletIndex, required bool enabled}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(walletIndex, serializer);
        sse_encode_bool(enabled, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 36, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiSettingsSetWalletGasControlConstMeta,
      argValues: [walletIndex, enabled],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSettingsSetWalletGasControlConstMeta =>
      const TaskConstMeta(
        debugName: "set_wallet_gas_control",
        argNames: ["walletIndex", "enabled"],
      );

  @override
  Future<void> crateApiSettingsSetWalletIpfsNode(
      {required BigInt walletIndex, String? node}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(walletIndex, serializer);
        sse_encode_opt_String(node, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 37, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiSettingsSetWalletIpfsNodeConstMeta,
      argValues: [walletIndex, node],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSettingsSetWalletIpfsNodeConstMeta =>
      const TaskConstMeta(
        debugName: "set_wallet_ipfs_node",
        argNames: ["walletIndex", "node"],
      );

  @override
  Future<void> crateApiSettingsSetWalletNodeRanking(
      {required BigInt walletIndex, required bool enabled}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(walletIndex, serializer);
        sse_encode_bool(enabled, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 38, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiSettingsSetWalletNodeRankingConstMeta,
      argValues: [walletIndex, enabled],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSettingsSetWalletNodeRankingConstMeta =>
      const TaskConstMeta(
        debugName: "set_wallet_node_ranking",
        argNames: ["walletIndex", "enabled"],
      );

  @override
  Future<void> crateApiSettingsSetWalletNotifications(
      {required BigInt walletIndex,
      required bool transactions,
      required bool price,
      required bool security,
      required bool balance}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(walletIndex, serializer);
        sse_encode_bool(transactions, serializer);
        sse_encode_bool(price, serializer);
        sse_encode_bool(security, serializer);
        sse_encode_bool(balance, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 39, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiSettingsSetWalletNotificationsConstMeta,
      argValues: [walletIndex, transactions, price, security, balance],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSettingsSetWalletNotificationsConstMeta =>
      const TaskConstMeta(
        debugName: "set_wallet_notifications",
        argNames: [
          "walletIndex",
          "transactions",
          "price",
          "security",
          "balance"
        ],
      );

  @override
  Future<BackgroundState> crateApiBackendStartService({required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 40, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_background_state,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendStartServiceConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendStartServiceConstMeta =>
      const TaskConstMeta(
        debugName: "start_service",
        argNames: ["path"],
      );

  @override
  Stream<String> crateApiBackendStartWorker() {
    final sink = RustStreamSink<String>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_String_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 41, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendStartWorkerConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiBackendStartWorkerConstMeta => const TaskConstMeta(
        debugName: "start_worker",
        argNames: ["sink"],
      );

  @override
  Future<void> crateApiBackendStopService() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 42, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendStopServiceConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendStopServiceConstMeta => const TaskConstMeta(
        debugName: "stop_service",
        argNames: [],
      );

  @override
  Future<void> crateApiTokenSyncBalances({required BigInt walletIndex}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(walletIndex, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 43, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiTokenSyncBalancesConstMeta,
      argValues: [walletIndex],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTokenSyncBalancesConstMeta => const TaskConstMeta(
        debugName: "sync_balances",
        argNames: ["walletIndex"],
      );

  @override
  Future<bool> crateApiAuthTryUnlockWithPassword(
      {required String password,
      required BigInt walletIndex,
      required List<String> identifiers}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(password, serializer);
        sse_encode_usize(walletIndex, serializer);
        sse_encode_list_String(identifiers, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 44, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiAuthTryUnlockWithPasswordConstMeta,
      argValues: [password, walletIndex, identifiers],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAuthTryUnlockWithPasswordConstMeta =>
      const TaskConstMeta(
        debugName: "try_unlock_with_password",
        argNames: ["password", "walletIndex", "identifiers"],
      );

  @override
  Future<bool> crateApiAuthTryUnlockWithSession(
      {required String sessionCipher,
      required BigInt walletIndex,
      required List<String> identifiers}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(sessionCipher, serializer);
        sse_encode_usize(walletIndex, serializer);
        sse_encode_list_String(identifiers, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 45, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiAuthTryUnlockWithSessionConstMeta,
      argValues: [sessionCipher, walletIndex, identifiers],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAuthTryUnlockWithSessionConstMeta =>
      const TaskConstMeta(
        debugName: "try_unlock_with_session",
        argNames: ["sessionCipher", "walletIndex", "identifiers"],
      );

  @override
  Future<void> crateApiTokenUpdateRates() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 46, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiTokenUpdateRatesConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTokenUpdateRatesConstMeta => const TaskConstMeta(
        debugName: "update_rates",
        argNames: [],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  Map<BigInt, String> dco_decode_Map_usize_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_usize_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<BigInt, BackgroundNotificationState>
      dco_decode_Map_usize_background_notification_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_usize_background_notification_state(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  RustStreamSink<String> dco_decode_StreamSink_String_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  BigInt dco_decode_U128(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BigInt.parse(raw);
  }

  @protected
  AccessListItem dco_decode_access_list_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AccessListItem(
      address: dco_decode_String(arr[0]),
      storageKeys: dco_decode_list_String(arr[1]),
    );
  }

  @protected
  AccountInfo dco_decode_account_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return AccountInfo(
      addr: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
      providerIndex: dco_decode_usize(arr[2]),
    );
  }

  @protected
  AddNextBip39AccountParams dco_decode_add_next_bip_39_account_params(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return AddNextBip39AccountParams(
      walletIndex: dco_decode_usize(arr[0]),
      accountIndex: dco_decode_usize(arr[1]),
      name: dco_decode_String(arr[2]),
      passphrase: dco_decode_String(arr[3]),
      identifiers: dco_decode_list_String(arr[4]),
      password: dco_decode_opt_String(arr[5]),
      sessionCipher: dco_decode_opt_String(arr[6]),
      providerIndex: dco_decode_usize(arr[7]),
    );
  }

  @protected
  AddSKWalletParams dco_decode_add_sk_wallet_params(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return AddSKWalletParams(
      sk: dco_decode_String(arr[0]),
      password: dco_decode_String(arr[1]),
      walletName: dco_decode_String(arr[2]),
      biometricType: dco_decode_String(arr[3]),
      identifiers: dco_decode_list_String(arr[4]),
      provider: dco_decode_usize(arr[5]),
    );
  }

  @protected
  AddressBookEntryInfo dco_decode_address_book_entry_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return AddressBookEntryInfo(
      name: dco_decode_String(arr[0]),
      addr: dco_decode_String(arr[1]),
      net: dco_decode_usize(arr[2]),
    );
  }

  @protected
  BackgroundNotificationState dco_decode_background_notification_state(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return BackgroundNotificationState(
      transactions: dco_decode_bool(arr[0]),
      price: dco_decode_bool(arr[1]),
      security: dco_decode_bool(arr[2]),
      balance: dco_decode_bool(arr[3]),
    );
  }

  @protected
  BackgroundState dco_decode_background_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return BackgroundState(
      wallets: dco_decode_list_wallet_info(arr[0]),
      notificationsWalletStates:
          dco_decode_Map_usize_background_notification_state(arr[1]),
      notificationsGlobalEnabled: dco_decode_bool(arr[2]),
      locale: dco_decode_String(arr[3]),
      appearances: dco_decode_u_8(arr[4]),
      providers: dco_decode_list_network_config_info(arr[5]),
    );
  }

  @protected
  BaseTokenInfo dco_decode_base_token_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return BaseTokenInfo(
      value: dco_decode_String(arr[0]),
      symbol: dco_decode_String(arr[1]),
      decimals: dco_decode_u_8(arr[2]),
    );
  }

  @protected
  Bip39AddWalletParams dco_decode_bip_39_add_wallet_params(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return Bip39AddWalletParams(
      password: dco_decode_String(arr[0]),
      mnemonicStr: dco_decode_String(arr[1]),
      accounts: dco_decode_list_record_usize_string(arr[2]),
      passphrase: dco_decode_String(arr[3]),
      walletName: dco_decode_String(arr[4]),
      biometricType: dco_decode_String(arr[5]),
      provider: dco_decode_usize(arr[6]),
      identifiers: dco_decode_list_String(arr[7]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  AddNextBip39AccountParams
      dco_decode_box_autoadd_add_next_bip_39_account_params(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_add_next_bip_39_account_params(raw);
  }

  @protected
  AddSKWalletParams dco_decode_box_autoadd_add_sk_wallet_params(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_add_sk_wallet_params(raw);
  }

  @protected
  BaseTokenInfo dco_decode_box_autoadd_base_token_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_base_token_info(raw);
  }

  @protected
  Bip39AddWalletParams dco_decode_box_autoadd_bip_39_add_wallet_params(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_bip_39_add_wallet_params(raw);
  }

  @protected
  ColorsInfo dco_decode_box_autoadd_colors_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_colors_info(raw);
  }

  @protected
  ConnectionInfo dco_decode_box_autoadd_connection_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_connection_info(raw);
  }

  @protected
  FTokenInfo dco_decode_box_autoadd_f_token_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_f_token_info(raw);
  }

  @protected
  LedgerParamsInput dco_decode_box_autoadd_ledger_params_input(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ledger_params_input(raw);
  }

  @protected
  NetworkConfigInfo dco_decode_box_autoadd_network_config_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_network_config_info(raw);
  }

  @protected
  TransactionRequestEVM dco_decode_box_autoadd_transaction_request_evm(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_transaction_request_evm(raw);
  }

  @protected
  TransactionRequestInfo dco_decode_box_autoadd_transaction_request_info(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_transaction_request_info(raw);
  }

  @protected
  TransactionRequestScilla dco_decode_box_autoadd_transaction_request_scilla(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_transaction_request_scilla(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  WalletSettingsInfo dco_decode_box_autoadd_wallet_settings_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_wallet_settings_info(raw);
  }

  @protected
  ColorsInfo dco_decode_colors_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ColorsInfo(
      primary: dco_decode_String(arr[0]),
      secondary: dco_decode_opt_String(arr[1]),
      background: dco_decode_opt_String(arr[2]),
      text: dco_decode_opt_String(arr[3]),
    );
  }

  @protected
  ConnectionInfo dco_decode_connection_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return ConnectionInfo(
      domain: dco_decode_String(arr[0]),
      walletIndexes: dco_decode_list_prim_usize_strict(arr[1]),
      favicon: dco_decode_opt_String(arr[2]),
      title: dco_decode_String(arr[3]),
      description: dco_decode_opt_String(arr[4]),
      colors: dco_decode_opt_box_autoadd_colors_info(arr[5]),
      lastConnected: dco_decode_u_64(arr[6]),
      canReadAccounts: dco_decode_bool(arr[7]),
      canRequestSignatures: dco_decode_bool(arr[8]),
      canSuggestTokens: dco_decode_bool(arr[9]),
      canSuggestTransactions: dco_decode_bool(arr[10]),
    );
  }

  @protected
  FTokenInfo dco_decode_f_token_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return FTokenInfo(
      name: dco_decode_String(arr[0]),
      symbol: dco_decode_String(arr[1]),
      decimals: dco_decode_u_8(arr[2]),
      addr: dco_decode_String(arr[3]),
      logo: dco_decode_opt_String(arr[4]),
      balances: dco_decode_Map_usize_String(arr[5]),
      default_: dco_decode_bool(arr[6]),
      native: dco_decode_bool(arr[7]),
      providerIndex: dco_decode_usize(arr[8]),
    );
  }

  @protected
  HistoricalTransactionInfo dco_decode_historical_transaction_info(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 13)
      throw Exception('unexpected arr length: expect 13 but see ${arr.length}');
    return HistoricalTransactionInfo(
      id: dco_decode_String(arr[0]),
      amount: dco_decode_String(arr[1]),
      sender: dco_decode_String(arr[2]),
      recipient: dco_decode_String(arr[3]),
      teg: dco_decode_opt_String(arr[4]),
      status: dco_decode_transaction_status_info(arr[5]),
      confirmed: dco_decode_opt_U128(arr[6]),
      timestamp: dco_decode_u_64(arr[7]),
      fee: dco_decode_U128(arr[8]),
      icon: dco_decode_opt_String(arr[9]),
      title: dco_decode_opt_String(arr[10]),
      nonce: dco_decode_u_64(arr[11]),
      tokenInfo: dco_decode_opt_box_autoadd_base_token_info(arr[12]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  KeyPairInfo dco_decode_key_pair_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return KeyPairInfo(
      sk: dco_decode_String(arr[0]),
      pk: dco_decode_String(arr[1]),
    );
  }

  @protected
  LedgerParamsInput dco_decode_ledger_params_input(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return LedgerParamsInput(
      pubKey: dco_decode_String(arr[0]),
      walletIndex: dco_decode_usize(arr[1]),
      walletName: dco_decode_String(arr[2]),
      ledgerId: dco_decode_String(arr[3]),
      accountName: dco_decode_String(arr[4]),
      biometricType: dco_decode_String(arr[5]),
      identifiers: dco_decode_list_String(arr[6]),
      providerIndex: dco_decode_usize(arr[7]),
    );
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<AccessListItem> dco_decode_list_access_list_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_access_list_item).toList();
  }

  @protected
  List<AccountInfo> dco_decode_list_account_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_account_info).toList();
  }

  @protected
  List<AddressBookEntryInfo> dco_decode_list_address_book_entry_info(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_address_book_entry_info)
        .toList();
  }

  @protected
  List<ConnectionInfo> dco_decode_list_connection_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_connection_info).toList();
  }

  @protected
  List<FTokenInfo> dco_decode_list_f_token_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_f_token_info).toList();
  }

  @protected
  List<HistoricalTransactionInfo> dco_decode_list_historical_transaction_info(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_historical_transaction_info)
        .toList();
  }

  @protected
  List<NetworkConfigInfo> dco_decode_list_network_config_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_network_config_info).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  Uint64List dco_decode_list_prim_usize_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint64List;
  }

  @protected
  List<(BigInt, BackgroundNotificationState)>
      dco_decode_list_record_usize_background_notification_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_usize_background_notification_state)
        .toList();
  }

  @protected
  List<(BigInt, String)> dco_decode_list_record_usize_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_usize_string).toList();
  }

  @protected
  List<TransactionRequestInfo> dco_decode_list_transaction_request_info(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_transaction_request_info)
        .toList();
  }

  @protected
  List<WalletInfo> dco_decode_list_wallet_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_wallet_info).toList();
  }

  @protected
  NetworkConfigInfo dco_decode_network_config_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return NetworkConfigInfo(
      tokenSymbol: dco_decode_String(arr[0]),
      logo: dco_decode_opt_String(arr[1]),
      networkName: dco_decode_String(arr[2]),
      chainId: dco_decode_u_64(arr[3]),
      fallbackEnabled: dco_decode_bool(arr[4]),
      urls: dco_decode_list_String(arr[5]),
      explorerUrls: dco_decode_list_String(arr[6]),
      default_: dco_decode_bool(arr[7]),
      bip49: dco_decode_String(arr[8]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  BigInt? dco_decode_opt_U128(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_U128(raw);
  }

  @protected
  BaseTokenInfo? dco_decode_opt_box_autoadd_base_token_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_base_token_info(raw);
  }

  @protected
  ColorsInfo? dco_decode_opt_box_autoadd_colors_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_colors_info(raw);
  }

  @protected
  TransactionRequestEVM? dco_decode_opt_box_autoadd_transaction_request_evm(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_transaction_request_evm(raw);
  }

  @protected
  TransactionRequestScilla?
      dco_decode_opt_box_autoadd_transaction_request_scilla(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_transaction_request_scilla(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  List<String>? dco_decode_opt_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_String(raw);
  }

  @protected
  List<AccessListItem>? dco_decode_opt_list_access_list_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_access_list_item(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  (Uint8List, String) dco_decode_record_list_prim_u_8_strict_string(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_list_prim_u_8_strict(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  (BigInt, BackgroundNotificationState)
      dco_decode_record_usize_background_notification_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_usize(arr[0]),
      dco_decode_background_notification_state(arr[1]),
    );
  }

  @protected
  (BigInt, String) dco_decode_record_usize_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_usize(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  TransactionMetadataInfo dco_decode_transaction_metadata_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return TransactionMetadataInfo(
      providerIndex: dco_decode_usize(arr[0]),
      hash: dco_decode_opt_String(arr[1]),
      info: dco_decode_opt_String(arr[2]),
      icon: dco_decode_opt_String(arr[3]),
      title: dco_decode_opt_String(arr[4]),
      signer: dco_decode_opt_String(arr[5]),
      tokenInfo: dco_decode_opt_box_autoadd_base_token_info(arr[6]),
    );
  }

  @protected
  TransactionRequestEVM dco_decode_transaction_request_evm(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 13)
      throw Exception('unexpected arr length: expect 13 but see ${arr.length}');
    return TransactionRequestEVM(
      nonce: dco_decode_opt_box_autoadd_u_64(arr[0]),
      from: dco_decode_opt_String(arr[1]),
      to: dco_decode_opt_String(arr[2]),
      value: dco_decode_opt_String(arr[3]),
      gasLimit: dco_decode_opt_box_autoadd_u_64(arr[4]),
      data: dco_decode_opt_list_prim_u_8_strict(arr[5]),
      maxFeePerGas: dco_decode_opt_U128(arr[6]),
      maxPriorityFeePerGas: dco_decode_opt_U128(arr[7]),
      gasPrice: dco_decode_opt_U128(arr[8]),
      chainId: dco_decode_opt_box_autoadd_u_64(arr[9]),
      accessList: dco_decode_opt_list_access_list_item(arr[10]),
      blobVersionedHashes: dco_decode_opt_list_String(arr[11]),
      maxFeePerBlobGas: dco_decode_opt_U128(arr[12]),
    );
  }

  @protected
  TransactionRequestInfo dco_decode_transaction_request_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TransactionRequestInfo(
      metadata: dco_decode_transaction_metadata_info(arr[0]),
      scilla: dco_decode_opt_box_autoadd_transaction_request_scilla(arr[1]),
      evm: dco_decode_opt_box_autoadd_transaction_request_evm(arr[2]),
    );
  }

  @protected
  TransactionRequestScilla dco_decode_transaction_request_scilla(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return TransactionRequestScilla(
      chainId: dco_decode_u_16(arr[0]),
      nonce: dco_decode_u_64(arr[1]),
      gasPrice: dco_decode_U128(arr[2]),
      gasLimit: dco_decode_u_64(arr[3]),
      toAddr: dco_decode_String(arr[4]),
      amount: dco_decode_U128(arr[5]),
      code: dco_decode_String(arr[6]),
      data: dco_decode_String(arr[7]),
    );
  }

  @protected
  TransactionStatusInfo dco_decode_transaction_status_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TransactionStatusInfo.values[raw as int];
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  WalletArgonParamsInfo dco_decode_wallet_argon_params_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return WalletArgonParamsInfo(
      memory: dco_decode_u_32(arr[0]),
      iterations: dco_decode_u_32(arr[1]),
      threads: dco_decode_u_32(arr[2]),
      secret: dco_decode_String(arr[3]),
    );
  }

  @protected
  WalletInfo dco_decode_wallet_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return WalletInfo(
      walletType: dco_decode_String(arr[0]),
      walletName: dco_decode_String(arr[1]),
      authType: dco_decode_String(arr[2]),
      walletAddress: dco_decode_String(arr[3]),
      accounts: dco_decode_list_account_info(arr[4]),
      selectedAccount: dco_decode_usize(arr[5]),
      tokens: dco_decode_list_f_token_info(arr[6]),
      settings: dco_decode_wallet_settings_info(arr[7]),
    );
  }

  @protected
  WalletSettingsInfo dco_decode_wallet_settings_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return WalletSettingsInfo(
      cipherOrders: dco_decode_list_prim_u_8_strict(arr[0]),
      argonParams: dco_decode_wallet_argon_params_info(arr[1]),
      currencyConvert: dco_decode_opt_String(arr[2]),
      ipfsNode: dco_decode_opt_String(arr[3]),
      ensEnabled: dco_decode_bool(arr[4]),
      gasControlEnabled: dco_decode_bool(arr[5]),
      nodeRankingEnabled: dco_decode_bool(arr[6]),
      maxConnections: dco_decode_u_8(arr[7]),
      requestTimeoutSecs: dco_decode_u_32(arr[8]),
    );
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  Map<BigInt, String> sse_decode_Map_usize_String(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_usize_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<BigInt, BackgroundNotificationState>
      sse_decode_Map_usize_background_notification_state(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_usize_background_notification_state(
        deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  RustStreamSink<String> sse_decode_StreamSink_String_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  BigInt sse_decode_U128(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return BigInt.parse(inner);
  }

  @protected
  AccessListItem sse_decode_access_list_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_address = sse_decode_String(deserializer);
    var var_storageKeys = sse_decode_list_String(deserializer);
    return AccessListItem(address: var_address, storageKeys: var_storageKeys);
  }

  @protected
  AccountInfo sse_decode_account_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_addr = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_providerIndex = sse_decode_usize(deserializer);
    return AccountInfo(
        addr: var_addr, name: var_name, providerIndex: var_providerIndex);
  }

  @protected
  AddNextBip39AccountParams sse_decode_add_next_bip_39_account_params(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_walletIndex = sse_decode_usize(deserializer);
    var var_accountIndex = sse_decode_usize(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_passphrase = sse_decode_String(deserializer);
    var var_identifiers = sse_decode_list_String(deserializer);
    var var_password = sse_decode_opt_String(deserializer);
    var var_sessionCipher = sse_decode_opt_String(deserializer);
    var var_providerIndex = sse_decode_usize(deserializer);
    return AddNextBip39AccountParams(
        walletIndex: var_walletIndex,
        accountIndex: var_accountIndex,
        name: var_name,
        passphrase: var_passphrase,
        identifiers: var_identifiers,
        password: var_password,
        sessionCipher: var_sessionCipher,
        providerIndex: var_providerIndex);
  }

  @protected
  AddSKWalletParams sse_decode_add_sk_wallet_params(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_sk = sse_decode_String(deserializer);
    var var_password = sse_decode_String(deserializer);
    var var_walletName = sse_decode_String(deserializer);
    var var_biometricType = sse_decode_String(deserializer);
    var var_identifiers = sse_decode_list_String(deserializer);
    var var_provider = sse_decode_usize(deserializer);
    return AddSKWalletParams(
        sk: var_sk,
        password: var_password,
        walletName: var_walletName,
        biometricType: var_biometricType,
        identifiers: var_identifiers,
        provider: var_provider);
  }

  @protected
  AddressBookEntryInfo sse_decode_address_book_entry_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_addr = sse_decode_String(deserializer);
    var var_net = sse_decode_usize(deserializer);
    return AddressBookEntryInfo(name: var_name, addr: var_addr, net: var_net);
  }

  @protected
  BackgroundNotificationState sse_decode_background_notification_state(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_transactions = sse_decode_bool(deserializer);
    var var_price = sse_decode_bool(deserializer);
    var var_security = sse_decode_bool(deserializer);
    var var_balance = sse_decode_bool(deserializer);
    return BackgroundNotificationState(
        transactions: var_transactions,
        price: var_price,
        security: var_security,
        balance: var_balance);
  }

  @protected
  BackgroundState sse_decode_background_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_wallets = sse_decode_list_wallet_info(deserializer);
    var var_notificationsWalletStates =
        sse_decode_Map_usize_background_notification_state(deserializer);
    var var_notificationsGlobalEnabled = sse_decode_bool(deserializer);
    var var_locale = sse_decode_String(deserializer);
    var var_appearances = sse_decode_u_8(deserializer);
    var var_providers = sse_decode_list_network_config_info(deserializer);
    return BackgroundState(
        wallets: var_wallets,
        notificationsWalletStates: var_notificationsWalletStates,
        notificationsGlobalEnabled: var_notificationsGlobalEnabled,
        locale: var_locale,
        appearances: var_appearances,
        providers: var_providers);
  }

  @protected
  BaseTokenInfo sse_decode_base_token_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_value = sse_decode_String(deserializer);
    var var_symbol = sse_decode_String(deserializer);
    var var_decimals = sse_decode_u_8(deserializer);
    return BaseTokenInfo(
        value: var_value, symbol: var_symbol, decimals: var_decimals);
  }

  @protected
  Bip39AddWalletParams sse_decode_bip_39_add_wallet_params(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_password = sse_decode_String(deserializer);
    var var_mnemonicStr = sse_decode_String(deserializer);
    var var_accounts = sse_decode_list_record_usize_string(deserializer);
    var var_passphrase = sse_decode_String(deserializer);
    var var_walletName = sse_decode_String(deserializer);
    var var_biometricType = sse_decode_String(deserializer);
    var var_provider = sse_decode_usize(deserializer);
    var var_identifiers = sse_decode_list_String(deserializer);
    return Bip39AddWalletParams(
        password: var_password,
        mnemonicStr: var_mnemonicStr,
        accounts: var_accounts,
        passphrase: var_passphrase,
        walletName: var_walletName,
        biometricType: var_biometricType,
        provider: var_provider,
        identifiers: var_identifiers);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  AddNextBip39AccountParams
      sse_decode_box_autoadd_add_next_bip_39_account_params(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_add_next_bip_39_account_params(deserializer));
  }

  @protected
  AddSKWalletParams sse_decode_box_autoadd_add_sk_wallet_params(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_add_sk_wallet_params(deserializer));
  }

  @protected
  BaseTokenInfo sse_decode_box_autoadd_base_token_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_base_token_info(deserializer));
  }

  @protected
  Bip39AddWalletParams sse_decode_box_autoadd_bip_39_add_wallet_params(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bip_39_add_wallet_params(deserializer));
  }

  @protected
  ColorsInfo sse_decode_box_autoadd_colors_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_colors_info(deserializer));
  }

  @protected
  ConnectionInfo sse_decode_box_autoadd_connection_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_connection_info(deserializer));
  }

  @protected
  FTokenInfo sse_decode_box_autoadd_f_token_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_f_token_info(deserializer));
  }

  @protected
  LedgerParamsInput sse_decode_box_autoadd_ledger_params_input(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ledger_params_input(deserializer));
  }

  @protected
  NetworkConfigInfo sse_decode_box_autoadd_network_config_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_network_config_info(deserializer));
  }

  @protected
  TransactionRequestEVM sse_decode_box_autoadd_transaction_request_evm(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_transaction_request_evm(deserializer));
  }

  @protected
  TransactionRequestInfo sse_decode_box_autoadd_transaction_request_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_transaction_request_info(deserializer));
  }

  @protected
  TransactionRequestScilla sse_decode_box_autoadd_transaction_request_scilla(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_transaction_request_scilla(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  WalletSettingsInfo sse_decode_box_autoadd_wallet_settings_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_wallet_settings_info(deserializer));
  }

  @protected
  ColorsInfo sse_decode_colors_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_primary = sse_decode_String(deserializer);
    var var_secondary = sse_decode_opt_String(deserializer);
    var var_background = sse_decode_opt_String(deserializer);
    var var_text = sse_decode_opt_String(deserializer);
    return ColorsInfo(
        primary: var_primary,
        secondary: var_secondary,
        background: var_background,
        text: var_text);
  }

  @protected
  ConnectionInfo sse_decode_connection_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_domain = sse_decode_String(deserializer);
    var var_walletIndexes = sse_decode_list_prim_usize_strict(deserializer);
    var var_favicon = sse_decode_opt_String(deserializer);
    var var_title = sse_decode_String(deserializer);
    var var_description = sse_decode_opt_String(deserializer);
    var var_colors = sse_decode_opt_box_autoadd_colors_info(deserializer);
    var var_lastConnected = sse_decode_u_64(deserializer);
    var var_canReadAccounts = sse_decode_bool(deserializer);
    var var_canRequestSignatures = sse_decode_bool(deserializer);
    var var_canSuggestTokens = sse_decode_bool(deserializer);
    var var_canSuggestTransactions = sse_decode_bool(deserializer);
    return ConnectionInfo(
        domain: var_domain,
        walletIndexes: var_walletIndexes,
        favicon: var_favicon,
        title: var_title,
        description: var_description,
        colors: var_colors,
        lastConnected: var_lastConnected,
        canReadAccounts: var_canReadAccounts,
        canRequestSignatures: var_canRequestSignatures,
        canSuggestTokens: var_canSuggestTokens,
        canSuggestTransactions: var_canSuggestTransactions);
  }

  @protected
  FTokenInfo sse_decode_f_token_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_symbol = sse_decode_String(deserializer);
    var var_decimals = sse_decode_u_8(deserializer);
    var var_addr = sse_decode_String(deserializer);
    var var_logo = sse_decode_opt_String(deserializer);
    var var_balances = sse_decode_Map_usize_String(deserializer);
    var var_default_ = sse_decode_bool(deserializer);
    var var_native = sse_decode_bool(deserializer);
    var var_providerIndex = sse_decode_usize(deserializer);
    return FTokenInfo(
        name: var_name,
        symbol: var_symbol,
        decimals: var_decimals,
        addr: var_addr,
        logo: var_logo,
        balances: var_balances,
        default_: var_default_,
        native: var_native,
        providerIndex: var_providerIndex);
  }

  @protected
  HistoricalTransactionInfo sse_decode_historical_transaction_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_amount = sse_decode_String(deserializer);
    var var_sender = sse_decode_String(deserializer);
    var var_recipient = sse_decode_String(deserializer);
    var var_teg = sse_decode_opt_String(deserializer);
    var var_status = sse_decode_transaction_status_info(deserializer);
    var var_confirmed = sse_decode_opt_U128(deserializer);
    var var_timestamp = sse_decode_u_64(deserializer);
    var var_fee = sse_decode_U128(deserializer);
    var var_icon = sse_decode_opt_String(deserializer);
    var var_title = sse_decode_opt_String(deserializer);
    var var_nonce = sse_decode_u_64(deserializer);
    var var_tokenInfo =
        sse_decode_opt_box_autoadd_base_token_info(deserializer);
    return HistoricalTransactionInfo(
        id: var_id,
        amount: var_amount,
        sender: var_sender,
        recipient: var_recipient,
        teg: var_teg,
        status: var_status,
        confirmed: var_confirmed,
        timestamp: var_timestamp,
        fee: var_fee,
        icon: var_icon,
        title: var_title,
        nonce: var_nonce,
        tokenInfo: var_tokenInfo);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  KeyPairInfo sse_decode_key_pair_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_sk = sse_decode_String(deserializer);
    var var_pk = sse_decode_String(deserializer);
    return KeyPairInfo(sk: var_sk, pk: var_pk);
  }

  @protected
  LedgerParamsInput sse_decode_ledger_params_input(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_pubKey = sse_decode_String(deserializer);
    var var_walletIndex = sse_decode_usize(deserializer);
    var var_walletName = sse_decode_String(deserializer);
    var var_ledgerId = sse_decode_String(deserializer);
    var var_accountName = sse_decode_String(deserializer);
    var var_biometricType = sse_decode_String(deserializer);
    var var_identifiers = sse_decode_list_String(deserializer);
    var var_providerIndex = sse_decode_usize(deserializer);
    return LedgerParamsInput(
        pubKey: var_pubKey,
        walletIndex: var_walletIndex,
        walletName: var_walletName,
        ledgerId: var_ledgerId,
        accountName: var_accountName,
        biometricType: var_biometricType,
        identifiers: var_identifiers,
        providerIndex: var_providerIndex);
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<AccessListItem> sse_decode_list_access_list_item(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AccessListItem>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_access_list_item(deserializer));
    }
    return ans_;
  }

  @protected
  List<AccountInfo> sse_decode_list_account_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AccountInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_account_info(deserializer));
    }
    return ans_;
  }

  @protected
  List<AddressBookEntryInfo> sse_decode_list_address_book_entry_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AddressBookEntryInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_address_book_entry_info(deserializer));
    }
    return ans_;
  }

  @protected
  List<ConnectionInfo> sse_decode_list_connection_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ConnectionInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_connection_info(deserializer));
    }
    return ans_;
  }

  @protected
  List<FTokenInfo> sse_decode_list_f_token_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FTokenInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_f_token_info(deserializer));
    }
    return ans_;
  }

  @protected
  List<HistoricalTransactionInfo> sse_decode_list_historical_transaction_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <HistoricalTransactionInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_historical_transaction_info(deserializer));
    }
    return ans_;
  }

  @protected
  List<NetworkConfigInfo> sse_decode_list_network_config_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <NetworkConfigInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_network_config_info(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint64List sse_decode_list_prim_usize_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint64List(len_);
  }

  @protected
  List<(BigInt, BackgroundNotificationState)>
      sse_decode_list_record_usize_background_notification_state(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(BigInt, BackgroundNotificationState)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_usize_background_notification_state(deserializer));
    }
    return ans_;
  }

  @protected
  List<(BigInt, String)> sse_decode_list_record_usize_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(BigInt, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_usize_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<TransactionRequestInfo> sse_decode_list_transaction_request_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TransactionRequestInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_transaction_request_info(deserializer));
    }
    return ans_;
  }

  @protected
  List<WalletInfo> sse_decode_list_wallet_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WalletInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_wallet_info(deserializer));
    }
    return ans_;
  }

  @protected
  NetworkConfigInfo sse_decode_network_config_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tokenSymbol = sse_decode_String(deserializer);
    var var_logo = sse_decode_opt_String(deserializer);
    var var_networkName = sse_decode_String(deserializer);
    var var_chainId = sse_decode_u_64(deserializer);
    var var_fallbackEnabled = sse_decode_bool(deserializer);
    var var_urls = sse_decode_list_String(deserializer);
    var var_explorerUrls = sse_decode_list_String(deserializer);
    var var_default_ = sse_decode_bool(deserializer);
    var var_bip49 = sse_decode_String(deserializer);
    return NetworkConfigInfo(
        tokenSymbol: var_tokenSymbol,
        logo: var_logo,
        networkName: var_networkName,
        chainId: var_chainId,
        fallbackEnabled: var_fallbackEnabled,
        urls: var_urls,
        explorerUrls: var_explorerUrls,
        default_: var_default_,
        bip49: var_bip49);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_U128(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_U128(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BaseTokenInfo? sse_decode_opt_box_autoadd_base_token_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_base_token_info(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ColorsInfo? sse_decode_opt_box_autoadd_colors_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_colors_info(deserializer));
    } else {
      return null;
    }
  }

  @protected
  TransactionRequestEVM? sse_decode_opt_box_autoadd_transaction_request_evm(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_transaction_request_evm(deserializer));
    } else {
      return null;
    }
  }

  @protected
  TransactionRequestScilla?
      sse_decode_opt_box_autoadd_transaction_request_scilla(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_transaction_request_scilla(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<String>? sse_decode_opt_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<AccessListItem>? sse_decode_opt_list_access_list_item(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_access_list_item(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (Uint8List, String) sse_decode_record_list_prim_u_8_strict_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (BigInt, BackgroundNotificationState)
      sse_decode_record_usize_background_notification_state(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_usize(deserializer);
    var var_field1 = sse_decode_background_notification_state(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (BigInt, String) sse_decode_record_usize_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_usize(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  TransactionMetadataInfo sse_decode_transaction_metadata_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_providerIndex = sse_decode_usize(deserializer);
    var var_hash = sse_decode_opt_String(deserializer);
    var var_info = sse_decode_opt_String(deserializer);
    var var_icon = sse_decode_opt_String(deserializer);
    var var_title = sse_decode_opt_String(deserializer);
    var var_signer = sse_decode_opt_String(deserializer);
    var var_tokenInfo =
        sse_decode_opt_box_autoadd_base_token_info(deserializer);
    return TransactionMetadataInfo(
        providerIndex: var_providerIndex,
        hash: var_hash,
        info: var_info,
        icon: var_icon,
        title: var_title,
        signer: var_signer,
        tokenInfo: var_tokenInfo);
  }

  @protected
  TransactionRequestEVM sse_decode_transaction_request_evm(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_nonce = sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_from = sse_decode_opt_String(deserializer);
    var var_to = sse_decode_opt_String(deserializer);
    var var_value = sse_decode_opt_String(deserializer);
    var var_gasLimit = sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_data = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_maxFeePerGas = sse_decode_opt_U128(deserializer);
    var var_maxPriorityFeePerGas = sse_decode_opt_U128(deserializer);
    var var_gasPrice = sse_decode_opt_U128(deserializer);
    var var_chainId = sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_accessList = sse_decode_opt_list_access_list_item(deserializer);
    var var_blobVersionedHashes = sse_decode_opt_list_String(deserializer);
    var var_maxFeePerBlobGas = sse_decode_opt_U128(deserializer);
    return TransactionRequestEVM(
        nonce: var_nonce,
        from: var_from,
        to: var_to,
        value: var_value,
        gasLimit: var_gasLimit,
        data: var_data,
        maxFeePerGas: var_maxFeePerGas,
        maxPriorityFeePerGas: var_maxPriorityFeePerGas,
        gasPrice: var_gasPrice,
        chainId: var_chainId,
        accessList: var_accessList,
        blobVersionedHashes: var_blobVersionedHashes,
        maxFeePerBlobGas: var_maxFeePerBlobGas);
  }

  @protected
  TransactionRequestInfo sse_decode_transaction_request_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_metadata = sse_decode_transaction_metadata_info(deserializer);
    var var_scilla =
        sse_decode_opt_box_autoadd_transaction_request_scilla(deserializer);
    var var_evm =
        sse_decode_opt_box_autoadd_transaction_request_evm(deserializer);
    return TransactionRequestInfo(
        metadata: var_metadata, scilla: var_scilla, evm: var_evm);
  }

  @protected
  TransactionRequestScilla sse_decode_transaction_request_scilla(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_chainId = sse_decode_u_16(deserializer);
    var var_nonce = sse_decode_u_64(deserializer);
    var var_gasPrice = sse_decode_U128(deserializer);
    var var_gasLimit = sse_decode_u_64(deserializer);
    var var_toAddr = sse_decode_String(deserializer);
    var var_amount = sse_decode_U128(deserializer);
    var var_code = sse_decode_String(deserializer);
    var var_data = sse_decode_String(deserializer);
    return TransactionRequestScilla(
        chainId: var_chainId,
        nonce: var_nonce,
        gasPrice: var_gasPrice,
        gasLimit: var_gasLimit,
        toAddr: var_toAddr,
        amount: var_amount,
        code: var_code,
        data: var_data);
  }

  @protected
  TransactionStatusInfo sse_decode_transaction_status_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return TransactionStatusInfo.values[inner];
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  WalletArgonParamsInfo sse_decode_wallet_argon_params_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_memory = sse_decode_u_32(deserializer);
    var var_iterations = sse_decode_u_32(deserializer);
    var var_threads = sse_decode_u_32(deserializer);
    var var_secret = sse_decode_String(deserializer);
    return WalletArgonParamsInfo(
        memory: var_memory,
        iterations: var_iterations,
        threads: var_threads,
        secret: var_secret);
  }

  @protected
  WalletInfo sse_decode_wallet_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_walletType = sse_decode_String(deserializer);
    var var_walletName = sse_decode_String(deserializer);
    var var_authType = sse_decode_String(deserializer);
    var var_walletAddress = sse_decode_String(deserializer);
    var var_accounts = sse_decode_list_account_info(deserializer);
    var var_selectedAccount = sse_decode_usize(deserializer);
    var var_tokens = sse_decode_list_f_token_info(deserializer);
    var var_settings = sse_decode_wallet_settings_info(deserializer);
    return WalletInfo(
        walletType: var_walletType,
        walletName: var_walletName,
        authType: var_authType,
        walletAddress: var_walletAddress,
        accounts: var_accounts,
        selectedAccount: var_selectedAccount,
        tokens: var_tokens,
        settings: var_settings);
  }

  @protected
  WalletSettingsInfo sse_decode_wallet_settings_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_cipherOrders = sse_decode_list_prim_u_8_strict(deserializer);
    var var_argonParams = sse_decode_wallet_argon_params_info(deserializer);
    var var_currencyConvert = sse_decode_opt_String(deserializer);
    var var_ipfsNode = sse_decode_opt_String(deserializer);
    var var_ensEnabled = sse_decode_bool(deserializer);
    var var_gasControlEnabled = sse_decode_bool(deserializer);
    var var_nodeRankingEnabled = sse_decode_bool(deserializer);
    var var_maxConnections = sse_decode_u_8(deserializer);
    var var_requestTimeoutSecs = sse_decode_u_32(deserializer);
    return WalletSettingsInfo(
        cipherOrders: var_cipherOrders,
        argonParams: var_argonParams,
        currencyConvert: var_currencyConvert,
        ipfsNode: var_ipfsNode,
        ensEnabled: var_ensEnabled,
        gasControlEnabled: var_gasControlEnabled,
        nodeRankingEnabled: var_nodeRankingEnabled,
        maxConnections: var_maxConnections,
        requestTimeoutSecs: var_requestTimeoutSecs);
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_Map_usize_String(
      Map<BigInt, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_usize_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_usize_background_notification_state(
      Map<BigInt, BackgroundNotificationState> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_usize_background_notification_state(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_StreamSink_String_Sse(
      RustStreamSink<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_U128(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.toString(), serializer);
  }

  @protected
  void sse_encode_access_list_item(
      AccessListItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.address, serializer);
    sse_encode_list_String(self.storageKeys, serializer);
  }

  @protected
  void sse_encode_account_info(AccountInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.addr, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_usize(self.providerIndex, serializer);
  }

  @protected
  void sse_encode_add_next_bip_39_account_params(
      AddNextBip39AccountParams self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.walletIndex, serializer);
    sse_encode_usize(self.accountIndex, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.passphrase, serializer);
    sse_encode_list_String(self.identifiers, serializer);
    sse_encode_opt_String(self.password, serializer);
    sse_encode_opt_String(self.sessionCipher, serializer);
    sse_encode_usize(self.providerIndex, serializer);
  }

  @protected
  void sse_encode_add_sk_wallet_params(
      AddSKWalletParams self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.sk, serializer);
    sse_encode_String(self.password, serializer);
    sse_encode_String(self.walletName, serializer);
    sse_encode_String(self.biometricType, serializer);
    sse_encode_list_String(self.identifiers, serializer);
    sse_encode_usize(self.provider, serializer);
  }

  @protected
  void sse_encode_address_book_entry_info(
      AddressBookEntryInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.addr, serializer);
    sse_encode_usize(self.net, serializer);
  }

  @protected
  void sse_encode_background_notification_state(
      BackgroundNotificationState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.transactions, serializer);
    sse_encode_bool(self.price, serializer);
    sse_encode_bool(self.security, serializer);
    sse_encode_bool(self.balance, serializer);
  }

  @protected
  void sse_encode_background_state(
      BackgroundState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_wallet_info(self.wallets, serializer);
    sse_encode_Map_usize_background_notification_state(
        self.notificationsWalletStates, serializer);
    sse_encode_bool(self.notificationsGlobalEnabled, serializer);
    sse_encode_String(self.locale, serializer);
    sse_encode_u_8(self.appearances, serializer);
    sse_encode_list_network_config_info(self.providers, serializer);
  }

  @protected
  void sse_encode_base_token_info(
      BaseTokenInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.value, serializer);
    sse_encode_String(self.symbol, serializer);
    sse_encode_u_8(self.decimals, serializer);
  }

  @protected
  void sse_encode_bip_39_add_wallet_params(
      Bip39AddWalletParams self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.password, serializer);
    sse_encode_String(self.mnemonicStr, serializer);
    sse_encode_list_record_usize_string(self.accounts, serializer);
    sse_encode_String(self.passphrase, serializer);
    sse_encode_String(self.walletName, serializer);
    sse_encode_String(self.biometricType, serializer);
    sse_encode_usize(self.provider, serializer);
    sse_encode_list_String(self.identifiers, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_add_next_bip_39_account_params(
      AddNextBip39AccountParams self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_add_next_bip_39_account_params(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_add_sk_wallet_params(
      AddSKWalletParams self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_add_sk_wallet_params(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_base_token_info(
      BaseTokenInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_base_token_info(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bip_39_add_wallet_params(
      Bip39AddWalletParams self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bip_39_add_wallet_params(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_colors_info(
      ColorsInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_colors_info(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_connection_info(
      ConnectionInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_connection_info(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_f_token_info(
      FTokenInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_token_info(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ledger_params_input(
      LedgerParamsInput self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ledger_params_input(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_network_config_info(
      NetworkConfigInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_network_config_info(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_transaction_request_evm(
      TransactionRequestEVM self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_transaction_request_evm(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_transaction_request_info(
      TransactionRequestInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_transaction_request_info(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_transaction_request_scilla(
      TransactionRequestScilla self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_transaction_request_scilla(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_wallet_settings_info(
      WalletSettingsInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_wallet_settings_info(self, serializer);
  }

  @protected
  void sse_encode_colors_info(ColorsInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.primary, serializer);
    sse_encode_opt_String(self.secondary, serializer);
    sse_encode_opt_String(self.background, serializer);
    sse_encode_opt_String(self.text, serializer);
  }

  @protected
  void sse_encode_connection_info(
      ConnectionInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.domain, serializer);
    sse_encode_list_prim_usize_strict(self.walletIndexes, serializer);
    sse_encode_opt_String(self.favicon, serializer);
    sse_encode_String(self.title, serializer);
    sse_encode_opt_String(self.description, serializer);
    sse_encode_opt_box_autoadd_colors_info(self.colors, serializer);
    sse_encode_u_64(self.lastConnected, serializer);
    sse_encode_bool(self.canReadAccounts, serializer);
    sse_encode_bool(self.canRequestSignatures, serializer);
    sse_encode_bool(self.canSuggestTokens, serializer);
    sse_encode_bool(self.canSuggestTransactions, serializer);
  }

  @protected
  void sse_encode_f_token_info(FTokenInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.symbol, serializer);
    sse_encode_u_8(self.decimals, serializer);
    sse_encode_String(self.addr, serializer);
    sse_encode_opt_String(self.logo, serializer);
    sse_encode_Map_usize_String(self.balances, serializer);
    sse_encode_bool(self.default_, serializer);
    sse_encode_bool(self.native, serializer);
    sse_encode_usize(self.providerIndex, serializer);
  }

  @protected
  void sse_encode_historical_transaction_info(
      HistoricalTransactionInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.amount, serializer);
    sse_encode_String(self.sender, serializer);
    sse_encode_String(self.recipient, serializer);
    sse_encode_opt_String(self.teg, serializer);
    sse_encode_transaction_status_info(self.status, serializer);
    sse_encode_opt_U128(self.confirmed, serializer);
    sse_encode_u_64(self.timestamp, serializer);
    sse_encode_U128(self.fee, serializer);
    sse_encode_opt_String(self.icon, serializer);
    sse_encode_opt_String(self.title, serializer);
    sse_encode_u_64(self.nonce, serializer);
    sse_encode_opt_box_autoadd_base_token_info(self.tokenInfo, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_key_pair_info(KeyPairInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.sk, serializer);
    sse_encode_String(self.pk, serializer);
  }

  @protected
  void sse_encode_ledger_params_input(
      LedgerParamsInput self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.pubKey, serializer);
    sse_encode_usize(self.walletIndex, serializer);
    sse_encode_String(self.walletName, serializer);
    sse_encode_String(self.ledgerId, serializer);
    sse_encode_String(self.accountName, serializer);
    sse_encode_String(self.biometricType, serializer);
    sse_encode_list_String(self.identifiers, serializer);
    sse_encode_usize(self.providerIndex, serializer);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_access_list_item(
      List<AccessListItem> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_access_list_item(item, serializer);
    }
  }

  @protected
  void sse_encode_list_account_info(
      List<AccountInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_account_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_address_book_entry_info(
      List<AddressBookEntryInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_address_book_entry_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_connection_info(
      List<ConnectionInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_connection_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_f_token_info(
      List<FTokenInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_f_token_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_historical_transaction_info(
      List<HistoricalTransactionInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_historical_transaction_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_network_config_info(
      List<NetworkConfigInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_network_config_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_prim_usize_strict(
      Uint64List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint64List(self);
  }

  @protected
  void sse_encode_list_record_usize_background_notification_state(
      List<(BigInt, BackgroundNotificationState)> self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_usize_background_notification_state(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_usize_string(
      List<(BigInt, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_usize_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_transaction_request_info(
      List<TransactionRequestInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_transaction_request_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_wallet_info(
      List<WalletInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_wallet_info(item, serializer);
    }
  }

  @protected
  void sse_encode_network_config_info(
      NetworkConfigInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.tokenSymbol, serializer);
    sse_encode_opt_String(self.logo, serializer);
    sse_encode_String(self.networkName, serializer);
    sse_encode_u_64(self.chainId, serializer);
    sse_encode_bool(self.fallbackEnabled, serializer);
    sse_encode_list_String(self.urls, serializer);
    sse_encode_list_String(self.explorerUrls, serializer);
    sse_encode_bool(self.default_, serializer);
    sse_encode_String(self.bip49, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_U128(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_U128(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_base_token_info(
      BaseTokenInfo? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_base_token_info(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_colors_info(
      ColorsInfo? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_colors_info(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_transaction_request_evm(
      TransactionRequestEVM? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_transaction_request_evm(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_transaction_request_scilla(
      TransactionRequestScilla? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_transaction_request_scilla(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_String(
      List<String>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_access_list_item(
      List<AccessListItem>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_access_list_item(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
      Uint8List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_record_list_prim_u_8_strict_string(
      (Uint8List, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_record_usize_background_notification_state(
      (BigInt, BackgroundNotificationState) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.$1, serializer);
    sse_encode_background_notification_state(self.$2, serializer);
  }

  @protected
  void sse_encode_record_usize_string(
      (BigInt, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_transaction_metadata_info(
      TransactionMetadataInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.providerIndex, serializer);
    sse_encode_opt_String(self.hash, serializer);
    sse_encode_opt_String(self.info, serializer);
    sse_encode_opt_String(self.icon, serializer);
    sse_encode_opt_String(self.title, serializer);
    sse_encode_opt_String(self.signer, serializer);
    sse_encode_opt_box_autoadd_base_token_info(self.tokenInfo, serializer);
  }

  @protected
  void sse_encode_transaction_request_evm(
      TransactionRequestEVM self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_u_64(self.nonce, serializer);
    sse_encode_opt_String(self.from, serializer);
    sse_encode_opt_String(self.to, serializer);
    sse_encode_opt_String(self.value, serializer);
    sse_encode_opt_box_autoadd_u_64(self.gasLimit, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.data, serializer);
    sse_encode_opt_U128(self.maxFeePerGas, serializer);
    sse_encode_opt_U128(self.maxPriorityFeePerGas, serializer);
    sse_encode_opt_U128(self.gasPrice, serializer);
    sse_encode_opt_box_autoadd_u_64(self.chainId, serializer);
    sse_encode_opt_list_access_list_item(self.accessList, serializer);
    sse_encode_opt_list_String(self.blobVersionedHashes, serializer);
    sse_encode_opt_U128(self.maxFeePerBlobGas, serializer);
  }

  @protected
  void sse_encode_transaction_request_info(
      TransactionRequestInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_transaction_metadata_info(self.metadata, serializer);
    sse_encode_opt_box_autoadd_transaction_request_scilla(
        self.scilla, serializer);
    sse_encode_opt_box_autoadd_transaction_request_evm(self.evm, serializer);
  }

  @protected
  void sse_encode_transaction_request_scilla(
      TransactionRequestScilla self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_16(self.chainId, serializer);
    sse_encode_u_64(self.nonce, serializer);
    sse_encode_U128(self.gasPrice, serializer);
    sse_encode_u_64(self.gasLimit, serializer);
    sse_encode_String(self.toAddr, serializer);
    sse_encode_U128(self.amount, serializer);
    sse_encode_String(self.code, serializer);
    sse_encode_String(self.data, serializer);
  }

  @protected
  void sse_encode_transaction_status_info(
      TransactionStatusInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_wallet_argon_params_info(
      WalletArgonParamsInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.memory, serializer);
    sse_encode_u_32(self.iterations, serializer);
    sse_encode_u_32(self.threads, serializer);
    sse_encode_String(self.secret, serializer);
  }

  @protected
  void sse_encode_wallet_info(WalletInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.walletType, serializer);
    sse_encode_String(self.walletName, serializer);
    sse_encode_String(self.authType, serializer);
    sse_encode_String(self.walletAddress, serializer);
    sse_encode_list_account_info(self.accounts, serializer);
    sse_encode_usize(self.selectedAccount, serializer);
    sse_encode_list_f_token_info(self.tokens, serializer);
    sse_encode_wallet_settings_info(self.settings, serializer);
  }

  @protected
  void sse_encode_wallet_settings_info(
      WalletSettingsInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.cipherOrders, serializer);
    sse_encode_wallet_argon_params_info(self.argonParams, serializer);
    sse_encode_opt_String(self.currencyConvert, serializer);
    sse_encode_opt_String(self.ipfsNode, serializer);
    sse_encode_bool(self.ensEnabled, serializer);
    sse_encode_bool(self.gasControlEnabled, serializer);
    sse_encode_bool(self.nodeRankingEnabled, serializer);
    sse_encode_u_8(self.maxConnections, serializer);
    sse_encode_u_32(self.requestTimeoutSecs, serializer);
  }
}
