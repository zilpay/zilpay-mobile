// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.6.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/backend.dart';
import 'api/methods.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiMethodsInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.6.0';

  @override
  int get rustContentHash => -109096813;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_zilpay',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  ArcBackground crateApiBackendSerivceBackgroundAutoAccessorGetCore(
      {required SerivceBackground that});

  RustStreamSink<String>?
      crateApiBackendSerivceBackgroundAutoAccessorGetMessageSink(
          {required SerivceBackground that});

  bool crateApiBackendSerivceBackgroundAutoAccessorGetRunning(
      {required SerivceBackground that});

  void crateApiBackendSerivceBackgroundAutoAccessorSetCore(
      {required SerivceBackground that, required ArcBackground core});

  void crateApiBackendSerivceBackgroundAutoAccessorSetMessageSink(
      {required SerivceBackground that, RustStreamSink<String>? messageSink});

  void crateApiBackendSerivceBackgroundAutoAccessorSetRunning(
      {required SerivceBackground that, required bool running});

  Future<(String, String)> crateApiBackendAddBip39Wallet(
      {required String password,
      required String mnemonicStr,
      required List<(BigInt, String)> accouns,
      required String passphrase,
      required String walletName,
      required String biometricType,
      required Uint64List networks,
      required List<String> identifiers});

  Future<void> crateApiBackendAddLedgerAccount(
      {required BigInt walletIndex,
      required BigInt accountIndex,
      required String name,
      required String pubKey,
      required List<String> identifiers,
      String? sessionCipher});

  Future<(String, String)> crateApiBackendAddLedgerZilliqaWallet(
      {required String pubKey,
      required BigInt walletIndex,
      required String walletName,
      required String ledgerId,
      required String accountName,
      required String biometricType,
      required List<String> identifiers});

  Future<void> crateApiBackendAddNextBip39Account(
      {required BigInt walletIndex,
      required BigInt accountIndex,
      required String name,
      required String passphrase,
      required List<String> identifiers,
      String? password,
      String? sessionCipher});

  Future<(String, String)> crateApiBackendAddSkWallet(
      {required String sk,
      required String password,
      required String accountName,
      required String walletName,
      required String biometricType,
      required List<String> identifiers,
      required Uint64List networks});

  Future<Uint64List> crateApiMethodsCheckNotExistsBip39Words(
      {required List<String> words, required String lang});

  Future<FToken> crateApiBackendFetchTokenMeta(
      {required String addr, required BigInt walletIndex});

  Future<String> crateApiMethodsGenBip39Words({required int count});

  Future<KeyPair> crateApiMethodsGenKeypair();

  Future<BackgroundState> crateApiBackendGetData();

  Future<List<WalletInfo>> crateApiBackendGetWallets();

  Future<void> crateApiMethodsInitApp();

  Future<bool> crateApiBackendIsServiceRunning();

  Future<void> crateApiBackendSelectAccount(
      {required BigInt walletIndex, required BigInt accountIndex});

  Future<void> crateApiBackendSetGlobalNotifications(
      {required bool globalEnabled});

  Future<void> crateApiBackendSetRateFetcher(
      {required BigInt walletIndex, String? currency});

  Future<void> crateApiBackendSetTheme({required int appearancesCode});

  Future<void> crateApiBackendSetWalletEns(
      {required BigInt walletIndex, required bool ensEnabled});

  Future<void> crateApiBackendSetWalletGasContol(
      {required BigInt walletIndex, required bool enabled});

  Future<void> crateApiBackendSetWalletIpfsNode(
      {required BigInt walletIndex, String? node});

  Future<void> crateApiBackendSetWalletMaxConnections(
      {required BigInt walletIndex, required int maxConnections});

  Future<void> crateApiBackendSetWalletNodeRanking(
      {required BigInt walletIndex, required bool enabled});

  Future<void> crateApiBackendSetWalletNotifications(
      {required BigInt walletIndex,
      required bool transactions,
      required bool price,
      required bool security,
      required bool balance});

  Future<void> crateApiBackendSetWalletRequestTimeout(
      {required BigInt walletIndex, required int requestTimeoutSecs});

  Future<BackgroundState> crateApiBackendStartService({required String path});

  Stream<String> crateApiBackendStartWorker();

  Future<void> crateApiBackendStopService();

  Future<void> crateApiBackendSyncBalances({required BigInt walletIndex});

  Future<bool> crateApiBackendTryUnlockWithPassword(
      {required String password,
      required BigInt walletIndex,
      required List<String> identifiers});

  Future<bool> crateApiBackendTryUnlockWithSession(
      {required String sessionCipher,
      required BigInt walletIndex,
      required List<String> identifiers});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcBackground;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcBackground;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcBackgroundPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_FToken;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_FToken;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FTokenPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SerivceBackground;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SerivceBackground;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SerivceBackgroundPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  ArcBackground crateApiBackendSerivceBackgroundAutoAccessorGetCore(
      {required SerivceBackground that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivceBackground(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBackground,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBackendSerivceBackgroundAutoAccessorGetCoreConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBackendSerivceBackgroundAutoAccessorGetCoreConstMeta =>
          const TaskConstMeta(
            debugName: "SerivceBackground_auto_accessor_get_core",
            argNames: ["that"],
          );

  @override
  RustStreamSink<String>?
      crateApiBackendSerivceBackgroundAutoAccessorGetMessageSink(
          {required SerivceBackground that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivceBackground(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_StreamSink_String_Sse,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBackendSerivceBackgroundAutoAccessorGetMessageSinkConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBackendSerivceBackgroundAutoAccessorGetMessageSinkConstMeta =>
          const TaskConstMeta(
            debugName: "SerivceBackground_auto_accessor_get_message_sink",
            argNames: ["that"],
          );

  @override
  bool crateApiBackendSerivceBackgroundAutoAccessorGetRunning(
      {required SerivceBackground that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivceBackground(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBackendSerivceBackgroundAutoAccessorGetRunningConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBackendSerivceBackgroundAutoAccessorGetRunningConstMeta =>
          const TaskConstMeta(
            debugName: "SerivceBackground_auto_accessor_get_running",
            argNames: ["that"],
          );

  @override
  void crateApiBackendSerivceBackgroundAutoAccessorSetCore(
      {required SerivceBackground that, required ArcBackground core}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivceBackground(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBackground(
            core, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBackendSerivceBackgroundAutoAccessorSetCoreConstMeta,
      argValues: [that, core],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBackendSerivceBackgroundAutoAccessorSetCoreConstMeta =>
          const TaskConstMeta(
            debugName: "SerivceBackground_auto_accessor_set_core",
            argNames: ["that", "core"],
          );

  @override
  void crateApiBackendSerivceBackgroundAutoAccessorSetMessageSink(
      {required SerivceBackground that, RustStreamSink<String>? messageSink}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivceBackground(
            that, serializer);
        sse_encode_opt_StreamSink_String_Sse(messageSink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBackendSerivceBackgroundAutoAccessorSetMessageSinkConstMeta,
      argValues: [that, messageSink],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBackendSerivceBackgroundAutoAccessorSetMessageSinkConstMeta =>
          const TaskConstMeta(
            debugName: "SerivceBackground_auto_accessor_set_message_sink",
            argNames: ["that", "messageSink"],
          );

  @override
  void crateApiBackendSerivceBackgroundAutoAccessorSetRunning(
      {required SerivceBackground that, required bool running}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivceBackground(
            that, serializer);
        sse_encode_bool(running, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBackendSerivceBackgroundAutoAccessorSetRunningConstMeta,
      argValues: [that, running],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBackendSerivceBackgroundAutoAccessorSetRunningConstMeta =>
          const TaskConstMeta(
            debugName: "SerivceBackground_auto_accessor_set_running",
            argNames: ["that", "running"],
          );

  @override
  Future<(String, String)> crateApiBackendAddBip39Wallet(
      {required String password,
      required String mnemonicStr,
      required List<(BigInt, String)> accouns,
      required String passphrase,
      required String walletName,
      required String biometricType,
      required Uint64List networks,
      required List<String> identifiers}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(password, serializer);
        sse_encode_String(mnemonicStr, serializer);
        sse_encode_list_record_usize_string(accouns, serializer);
        sse_encode_String(passphrase, serializer);
        sse_encode_String(walletName, serializer);
        sse_encode_String(biometricType, serializer);
        sse_encode_list_prim_usize_strict(networks, serializer);
        sse_encode_list_String(identifiers, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_string_string,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendAddBip39WalletConstMeta,
      argValues: [
        password,
        mnemonicStr,
        accouns,
        passphrase,
        walletName,
        biometricType,
        networks,
        identifiers
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendAddBip39WalletConstMeta =>
      const TaskConstMeta(
        debugName: "add_bip39_wallet",
        argNames: [
          "password",
          "mnemonicStr",
          "accouns",
          "passphrase",
          "walletName",
          "biometricType",
          "networks",
          "identifiers"
        ],
      );

  @override
  Future<void> crateApiBackendAddLedgerAccount(
      {required BigInt walletIndex,
      required BigInt accountIndex,
      required String name,
      required String pubKey,
      required List<String> identifiers,
      String? sessionCipher}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(walletIndex, serializer);
        sse_encode_usize(accountIndex, serializer);
        sse_encode_String(name, serializer);
        sse_encode_String(pubKey, serializer);
        sse_encode_list_String(identifiers, serializer);
        sse_encode_opt_String(sessionCipher, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendAddLedgerAccountConstMeta,
      argValues: [
        walletIndex,
        accountIndex,
        name,
        pubKey,
        identifiers,
        sessionCipher
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendAddLedgerAccountConstMeta =>
      const TaskConstMeta(
        debugName: "add_ledger_account",
        argNames: [
          "walletIndex",
          "accountIndex",
          "name",
          "pubKey",
          "identifiers",
          "sessionCipher"
        ],
      );

  @override
  Future<(String, String)> crateApiBackendAddLedgerZilliqaWallet(
      {required String pubKey,
      required BigInt walletIndex,
      required String walletName,
      required String ledgerId,
      required String accountName,
      required String biometricType,
      required List<String> identifiers}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(pubKey, serializer);
        sse_encode_usize(walletIndex, serializer);
        sse_encode_String(walletName, serializer);
        sse_encode_String(ledgerId, serializer);
        sse_encode_String(accountName, serializer);
        sse_encode_String(biometricType, serializer);
        sse_encode_list_String(identifiers, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_string_string,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendAddLedgerZilliqaWalletConstMeta,
      argValues: [
        pubKey,
        walletIndex,
        walletName,
        ledgerId,
        accountName,
        biometricType,
        identifiers
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendAddLedgerZilliqaWalletConstMeta =>
      const TaskConstMeta(
        debugName: "add_ledger_zilliqa_wallet",
        argNames: [
          "pubKey",
          "walletIndex",
          "walletName",
          "ledgerId",
          "accountName",
          "biometricType",
          "identifiers"
        ],
      );

  @override
  Future<void> crateApiBackendAddNextBip39Account(
      {required BigInt walletIndex,
      required BigInt accountIndex,
      required String name,
      required String passphrase,
      required List<String> identifiers,
      String? password,
      String? sessionCipher}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(walletIndex, serializer);
        sse_encode_usize(accountIndex, serializer);
        sse_encode_String(name, serializer);
        sse_encode_String(passphrase, serializer);
        sse_encode_list_String(identifiers, serializer);
        sse_encode_opt_String(password, serializer);
        sse_encode_opt_String(sessionCipher, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendAddNextBip39AccountConstMeta,
      argValues: [
        walletIndex,
        accountIndex,
        name,
        passphrase,
        identifiers,
        password,
        sessionCipher
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendAddNextBip39AccountConstMeta =>
      const TaskConstMeta(
        debugName: "add_next_bip39_account",
        argNames: [
          "walletIndex",
          "accountIndex",
          "name",
          "passphrase",
          "identifiers",
          "password",
          "sessionCipher"
        ],
      );

  @override
  Future<(String, String)> crateApiBackendAddSkWallet(
      {required String sk,
      required String password,
      required String accountName,
      required String walletName,
      required String biometricType,
      required List<String> identifiers,
      required Uint64List networks}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(sk, serializer);
        sse_encode_String(password, serializer);
        sse_encode_String(accountName, serializer);
        sse_encode_String(walletName, serializer);
        sse_encode_String(biometricType, serializer);
        sse_encode_list_String(identifiers, serializer);
        sse_encode_list_prim_usize_strict(networks, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_string_string,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendAddSkWalletConstMeta,
      argValues: [
        sk,
        password,
        accountName,
        walletName,
        biometricType,
        identifiers,
        networks
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendAddSkWalletConstMeta => const TaskConstMeta(
        debugName: "add_sk_wallet",
        argNames: [
          "sk",
          "password",
          "accountName",
          "walletName",
          "biometricType",
          "identifiers",
          "networks"
        ],
      );

  @override
  Future<Uint64List> crateApiMethodsCheckNotExistsBip39Words(
      {required List<String> words, required String lang}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(words, serializer);
        sse_encode_String(lang, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_usize_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMethodsCheckNotExistsBip39WordsConstMeta,
      argValues: [words, lang],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMethodsCheckNotExistsBip39WordsConstMeta =>
      const TaskConstMeta(
        debugName: "check_not_exists_bip39_words",
        argNames: ["words", "lang"],
      );

  @override
  Future<FToken> crateApiBackendFetchTokenMeta(
      {required String addr, required BigInt walletIndex}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(addr, serializer);
        sse_encode_usize(walletIndex, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFToken,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendFetchTokenMetaConstMeta,
      argValues: [addr, walletIndex],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendFetchTokenMetaConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_token_meta",
        argNames: ["addr", "walletIndex"],
      );

  @override
  Future<String> crateApiMethodsGenBip39Words({required int count}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(count, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiMethodsGenBip39WordsConstMeta,
      argValues: [count],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMethodsGenBip39WordsConstMeta =>
      const TaskConstMeta(
        debugName: "gen_bip39_words",
        argNames: ["count"],
      );

  @override
  Future<KeyPair> crateApiMethodsGenKeypair() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_key_pair,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiMethodsGenKeypairConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMethodsGenKeypairConstMeta => const TaskConstMeta(
        debugName: "gen_keypair",
        argNames: [],
      );

  @override
  Future<BackgroundState> crateApiBackendGetData() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_background_state,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendGetDataConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendGetDataConstMeta => const TaskConstMeta(
        debugName: "get_data",
        argNames: [],
      );

  @override
  Future<List<WalletInfo>> crateApiBackendGetWallets() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_wallet_info,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendGetWalletsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendGetWalletsConstMeta => const TaskConstMeta(
        debugName: "get_wallets",
        argNames: [],
      );

  @override
  Future<void> crateApiMethodsInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMethodsInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMethodsInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<bool> crateApiBackendIsServiceRunning() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBackendIsServiceRunningConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendIsServiceRunningConstMeta =>
      const TaskConstMeta(
        debugName: "is_service_running",
        argNames: [],
      );

  @override
  Future<void> crateApiBackendSelectAccount(
      {required BigInt walletIndex, required BigInt accountIndex}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(walletIndex, serializer);
        sse_encode_usize(accountIndex, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendSelectAccountConstMeta,
      argValues: [walletIndex, accountIndex],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendSelectAccountConstMeta =>
      const TaskConstMeta(
        debugName: "select_account",
        argNames: ["walletIndex", "accountIndex"],
      );

  @override
  Future<void> crateApiBackendSetGlobalNotifications(
      {required bool globalEnabled}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(globalEnabled, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendSetGlobalNotificationsConstMeta,
      argValues: [globalEnabled],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendSetGlobalNotificationsConstMeta =>
      const TaskConstMeta(
        debugName: "set_global_notifications",
        argNames: ["globalEnabled"],
      );

  @override
  Future<void> crateApiBackendSetRateFetcher(
      {required BigInt walletIndex, String? currency}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(walletIndex, serializer);
        sse_encode_opt_String(currency, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendSetRateFetcherConstMeta,
      argValues: [walletIndex, currency],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendSetRateFetcherConstMeta =>
      const TaskConstMeta(
        debugName: "set_rate_fetcher",
        argNames: ["walletIndex", "currency"],
      );

  @override
  Future<void> crateApiBackendSetTheme({required int appearancesCode}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(appearancesCode, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendSetThemeConstMeta,
      argValues: [appearancesCode],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendSetThemeConstMeta => const TaskConstMeta(
        debugName: "set_theme",
        argNames: ["appearancesCode"],
      );

  @override
  Future<void> crateApiBackendSetWalletEns(
      {required BigInt walletIndex, required bool ensEnabled}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(walletIndex, serializer);
        sse_encode_bool(ensEnabled, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendSetWalletEnsConstMeta,
      argValues: [walletIndex, ensEnabled],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendSetWalletEnsConstMeta =>
      const TaskConstMeta(
        debugName: "set_wallet_ens",
        argNames: ["walletIndex", "ensEnabled"],
      );

  @override
  Future<void> crateApiBackendSetWalletGasContol(
      {required BigInt walletIndex, required bool enabled}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(walletIndex, serializer);
        sse_encode_bool(enabled, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendSetWalletGasContolConstMeta,
      argValues: [walletIndex, enabled],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendSetWalletGasContolConstMeta =>
      const TaskConstMeta(
        debugName: "set_wallet_gas_contol",
        argNames: ["walletIndex", "enabled"],
      );

  @override
  Future<void> crateApiBackendSetWalletIpfsNode(
      {required BigInt walletIndex, String? node}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(walletIndex, serializer);
        sse_encode_opt_String(node, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendSetWalletIpfsNodeConstMeta,
      argValues: [walletIndex, node],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendSetWalletIpfsNodeConstMeta =>
      const TaskConstMeta(
        debugName: "set_wallet_ipfs_node",
        argNames: ["walletIndex", "node"],
      );

  @override
  Future<void> crateApiBackendSetWalletMaxConnections(
      {required BigInt walletIndex, required int maxConnections}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(walletIndex, serializer);
        sse_encode_u_8(maxConnections, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendSetWalletMaxConnectionsConstMeta,
      argValues: [walletIndex, maxConnections],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendSetWalletMaxConnectionsConstMeta =>
      const TaskConstMeta(
        debugName: "set_wallet_max_connections",
        argNames: ["walletIndex", "maxConnections"],
      );

  @override
  Future<void> crateApiBackendSetWalletNodeRanking(
      {required BigInt walletIndex, required bool enabled}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(walletIndex, serializer);
        sse_encode_bool(enabled, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendSetWalletNodeRankingConstMeta,
      argValues: [walletIndex, enabled],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendSetWalletNodeRankingConstMeta =>
      const TaskConstMeta(
        debugName: "set_wallet_node_ranking",
        argNames: ["walletIndex", "enabled"],
      );

  @override
  Future<void> crateApiBackendSetWalletNotifications(
      {required BigInt walletIndex,
      required bool transactions,
      required bool price,
      required bool security,
      required bool balance}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(walletIndex, serializer);
        sse_encode_bool(transactions, serializer);
        sse_encode_bool(price, serializer);
        sse_encode_bool(security, serializer);
        sse_encode_bool(balance, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 29, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendSetWalletNotificationsConstMeta,
      argValues: [walletIndex, transactions, price, security, balance],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendSetWalletNotificationsConstMeta =>
      const TaskConstMeta(
        debugName: "set_wallet_notifications",
        argNames: [
          "walletIndex",
          "transactions",
          "price",
          "security",
          "balance"
        ],
      );

  @override
  Future<void> crateApiBackendSetWalletRequestTimeout(
      {required BigInt walletIndex, required int requestTimeoutSecs}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(walletIndex, serializer);
        sse_encode_u_32(requestTimeoutSecs, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendSetWalletRequestTimeoutConstMeta,
      argValues: [walletIndex, requestTimeoutSecs],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendSetWalletRequestTimeoutConstMeta =>
      const TaskConstMeta(
        debugName: "set_wallet_request_timeout",
        argNames: ["walletIndex", "requestTimeoutSecs"],
      );

  @override
  Future<BackgroundState> crateApiBackendStartService({required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 31, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_background_state,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendStartServiceConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendStartServiceConstMeta =>
      const TaskConstMeta(
        debugName: "start_service",
        argNames: ["path"],
      );

  @override
  Stream<String> crateApiBackendStartWorker() {
    final sink = RustStreamSink<String>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_String_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 32, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendStartWorkerConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiBackendStartWorkerConstMeta => const TaskConstMeta(
        debugName: "start_worker",
        argNames: ["sink"],
      );

  @override
  Future<void> crateApiBackendStopService() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 33, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendStopServiceConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendStopServiceConstMeta => const TaskConstMeta(
        debugName: "stop_service",
        argNames: [],
      );

  @override
  Future<void> crateApiBackendSyncBalances({required BigInt walletIndex}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(walletIndex, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 34, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendSyncBalancesConstMeta,
      argValues: [walletIndex],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendSyncBalancesConstMeta =>
      const TaskConstMeta(
        debugName: "sync_balances",
        argNames: ["walletIndex"],
      );

  @override
  Future<bool> crateApiBackendTryUnlockWithPassword(
      {required String password,
      required BigInt walletIndex,
      required List<String> identifiers}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(password, serializer);
        sse_encode_usize(walletIndex, serializer);
        sse_encode_list_String(identifiers, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 35, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendTryUnlockWithPasswordConstMeta,
      argValues: [password, walletIndex, identifiers],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendTryUnlockWithPasswordConstMeta =>
      const TaskConstMeta(
        debugName: "try_unlock_with_password",
        argNames: ["password", "walletIndex", "identifiers"],
      );

  @override
  Future<bool> crateApiBackendTryUnlockWithSession(
      {required String sessionCipher,
      required BigInt walletIndex,
      required List<String> identifiers}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(sessionCipher, serializer);
        sse_encode_usize(walletIndex, serializer);
        sse_encode_list_String(identifiers, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 36, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendTryUnlockWithSessionConstMeta,
      argValues: [sessionCipher, walletIndex, identifiers],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendTryUnlockWithSessionConstMeta =>
      const TaskConstMeta(
        debugName: "try_unlock_with_session",
        argNames: ["sessionCipher", "walletIndex", "identifiers"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcBackground => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBackground;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcBackground => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBackground;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FToken => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFToken;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FToken => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFToken;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SerivceBackground => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivceBackground;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SerivceBackground => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivceBackground;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  ArcBackground
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBackground(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcBackgroundImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FToken
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FTokenImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SerivceBackground
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivceBackground(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SerivceBackgroundImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SerivceBackground
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivceBackground(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SerivceBackgroundImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SerivceBackground
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivceBackground(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SerivceBackgroundImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Map<String, String> dco_decode_Map_String_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<BigInt, BackgroundNotificationState>
      dco_decode_Map_usize_background_notification_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_usize_background_notification_state(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  ArcBackground
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBackground(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcBackgroundImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FToken
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FTokenImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SerivceBackground
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivceBackground(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SerivceBackgroundImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<String> dco_decode_StreamSink_String_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  AccountInfo dco_decode_account_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AccountInfo(
      addr: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
    );
  }

  @protected
  BackgroundNotificationState dco_decode_background_notification_state(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return BackgroundNotificationState(
      transactions: dco_decode_bool(arr[0]),
      price: dco_decode_bool(arr[1]),
      security: dco_decode_bool(arr[2]),
      balance: dco_decode_bool(arr[3]),
    );
  }

  @protected
  BackgroundState dco_decode_background_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return BackgroundState(
      wallets: dco_decode_list_wallet_info(arr[0]),
      notificationsWalletStates:
          dco_decode_Map_usize_background_notification_state(arr[1]),
      notificationsGlobalEnabled: dco_decode_bool(arr[2]),
      locale: dco_decode_String(arr[3]),
      appearances: dco_decode_u_8(arr[4]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  FTokenInfo dco_decode_f_token_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return FTokenInfo(
      name: dco_decode_String(arr[0]),
      symbol: dco_decode_String(arr[1]),
      decimals: dco_decode_u_8(arr[2]),
      addr: dco_decode_String(arr[3]),
      balances: dco_decode_Map_String_String(arr[4]),
      default_: dco_decode_bool(arr[5]),
    );
  }

  @protected
  KeyPair dco_decode_key_pair(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return KeyPair(
      sk: dco_decode_String(arr[0]),
      pk: dco_decode_String(arr[1]),
    );
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<AccountInfo> dco_decode_list_account_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_account_info).toList();
  }

  @protected
  List<FTokenInfo> dco_decode_list_f_token_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_f_token_info).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  Uint64List dco_decode_list_prim_usize_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint64List;
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  List<(BigInt, BackgroundNotificationState)>
      dco_decode_list_record_usize_background_notification_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_usize_background_notification_state)
        .toList();
  }

  @protected
  List<(BigInt, String)> dco_decode_list_record_usize_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_usize_string).toList();
  }

  @protected
  List<WalletInfo> dco_decode_list_wallet_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_wallet_info).toList();
  }

  @protected
  RustStreamSink<String>? dco_decode_opt_StreamSink_String_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_StreamSink_String_Sse(raw);
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  (BigInt, BackgroundNotificationState)
      dco_decode_record_usize_background_notification_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_usize(arr[0]),
      dco_decode_background_notification_state(arr[1]),
    );
  }

  @protected
  (BigInt, String) dco_decode_record_usize_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_usize(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  WalletInfo dco_decode_wallet_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 15)
      throw Exception('unexpected arr length: expect 15 but see ${arr.length}');
    return WalletInfo(
      walletType: dco_decode_String(arr[0]),
      walletName: dco_decode_String(arr[1]),
      authType: dco_decode_String(arr[2]),
      walletAddress: dco_decode_String(arr[3]),
      accounts: dco_decode_list_account_info(arr[4]),
      selectedAccount: dco_decode_usize(arr[5]),
      tokens: dco_decode_list_f_token_info(arr[6]),
      cipherOrders: dco_decode_list_prim_u_8_strict(arr[7]),
      currencyConvert: dco_decode_opt_String(arr[8]),
      ipfsNode: dco_decode_opt_String(arr[9]),
      ensEnabled: dco_decode_bool(arr[10]),
      gasControlEnabled: dco_decode_bool(arr[11]),
      nodeRankingEnabled: dco_decode_bool(arr[12]),
      maxConnections: dco_decode_u_8(arr[13]),
      requestTimeoutSecs: dco_decode_u_32(arr[14]),
    );
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  ArcBackground
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBackground(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcBackgroundImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FToken
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FTokenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SerivceBackground
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivceBackground(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SerivceBackgroundImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SerivceBackground
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivceBackground(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SerivceBackgroundImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SerivceBackground
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivceBackground(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SerivceBackgroundImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Map<String, String> sse_decode_Map_String_String(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<BigInt, BackgroundNotificationState>
      sse_decode_Map_usize_background_notification_state(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_usize_background_notification_state(
        deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  ArcBackground
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBackground(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcBackgroundImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FToken
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FTokenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SerivceBackground
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivceBackground(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SerivceBackgroundImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<String> sse_decode_StreamSink_String_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  AccountInfo sse_decode_account_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_addr = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    return AccountInfo(addr: var_addr, name: var_name);
  }

  @protected
  BackgroundNotificationState sse_decode_background_notification_state(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_transactions = sse_decode_bool(deserializer);
    var var_price = sse_decode_bool(deserializer);
    var var_security = sse_decode_bool(deserializer);
    var var_balance = sse_decode_bool(deserializer);
    return BackgroundNotificationState(
        transactions: var_transactions,
        price: var_price,
        security: var_security,
        balance: var_balance);
  }

  @protected
  BackgroundState sse_decode_background_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_wallets = sse_decode_list_wallet_info(deserializer);
    var var_notificationsWalletStates =
        sse_decode_Map_usize_background_notification_state(deserializer);
    var var_notificationsGlobalEnabled = sse_decode_bool(deserializer);
    var var_locale = sse_decode_String(deserializer);
    var var_appearances = sse_decode_u_8(deserializer);
    return BackgroundState(
        wallets: var_wallets,
        notificationsWalletStates: var_notificationsWalletStates,
        notificationsGlobalEnabled: var_notificationsGlobalEnabled,
        locale: var_locale,
        appearances: var_appearances);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  FTokenInfo sse_decode_f_token_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_symbol = sse_decode_String(deserializer);
    var var_decimals = sse_decode_u_8(deserializer);
    var var_addr = sse_decode_String(deserializer);
    var var_balances = sse_decode_Map_String_String(deserializer);
    var var_default_ = sse_decode_bool(deserializer);
    return FTokenInfo(
        name: var_name,
        symbol: var_symbol,
        decimals: var_decimals,
        addr: var_addr,
        balances: var_balances,
        default_: var_default_);
  }

  @protected
  KeyPair sse_decode_key_pair(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_sk = sse_decode_String(deserializer);
    var var_pk = sse_decode_String(deserializer);
    return KeyPair(sk: var_sk, pk: var_pk);
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<AccountInfo> sse_decode_list_account_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AccountInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_account_info(deserializer));
    }
    return ans_;
  }

  @protected
  List<FTokenInfo> sse_decode_list_f_token_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FTokenInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_f_token_info(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint64List sse_decode_list_prim_usize_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint64List(len_);
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<(BigInt, BackgroundNotificationState)>
      sse_decode_list_record_usize_background_notification_state(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(BigInt, BackgroundNotificationState)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_usize_background_notification_state(deserializer));
    }
    return ans_;
  }

  @protected
  List<(BigInt, String)> sse_decode_list_record_usize_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(BigInt, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_usize_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<WalletInfo> sse_decode_list_wallet_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WalletInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_wallet_info(deserializer));
    }
    return ans_;
  }

  @protected
  RustStreamSink<String>? sse_decode_opt_StreamSink_String_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_StreamSink_String_Sse(deserializer));
    } else {
      return null;
    }
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (BigInt, BackgroundNotificationState)
      sse_decode_record_usize_background_notification_state(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_usize(deserializer);
    var var_field1 = sse_decode_background_notification_state(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (BigInt, String) sse_decode_record_usize_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_usize(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  WalletInfo sse_decode_wallet_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_walletType = sse_decode_String(deserializer);
    var var_walletName = sse_decode_String(deserializer);
    var var_authType = sse_decode_String(deserializer);
    var var_walletAddress = sse_decode_String(deserializer);
    var var_accounts = sse_decode_list_account_info(deserializer);
    var var_selectedAccount = sse_decode_usize(deserializer);
    var var_tokens = sse_decode_list_f_token_info(deserializer);
    var var_cipherOrders = sse_decode_list_prim_u_8_strict(deserializer);
    var var_currencyConvert = sse_decode_opt_String(deserializer);
    var var_ipfsNode = sse_decode_opt_String(deserializer);
    var var_ensEnabled = sse_decode_bool(deserializer);
    var var_gasControlEnabled = sse_decode_bool(deserializer);
    var var_nodeRankingEnabled = sse_decode_bool(deserializer);
    var var_maxConnections = sse_decode_u_8(deserializer);
    var var_requestTimeoutSecs = sse_decode_u_32(deserializer);
    return WalletInfo(
        walletType: var_walletType,
        walletName: var_walletName,
        authType: var_authType,
        walletAddress: var_walletAddress,
        accounts: var_accounts,
        selectedAccount: var_selectedAccount,
        tokens: var_tokens,
        cipherOrders: var_cipherOrders,
        currencyConvert: var_currencyConvert,
        ipfsNode: var_ipfsNode,
        ensEnabled: var_ensEnabled,
        gasControlEnabled: var_gasControlEnabled,
        nodeRankingEnabled: var_nodeRankingEnabled,
        maxConnections: var_maxConnections,
        requestTimeoutSecs: var_requestTimeoutSecs);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBackground(
          ArcBackground self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcBackgroundImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFToken(
          FToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FTokenImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivceBackground(
          SerivceBackground self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SerivceBackgroundImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivceBackground(
          SerivceBackground self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SerivceBackgroundImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivceBackground(
          SerivceBackground self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SerivceBackgroundImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void sse_encode_Map_String_String(
      Map<String, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_usize_background_notification_state(
      Map<BigInt, BackgroundNotificationState> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_usize_background_notification_state(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBackground(
          ArcBackground self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcBackgroundImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFToken(
          FToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FTokenImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivceBackground(
          SerivceBackground self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SerivceBackgroundImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_String_Sse(
      RustStreamSink<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_account_info(AccountInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.addr, serializer);
    sse_encode_String(self.name, serializer);
  }

  @protected
  void sse_encode_background_notification_state(
      BackgroundNotificationState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.transactions, serializer);
    sse_encode_bool(self.price, serializer);
    sse_encode_bool(self.security, serializer);
    sse_encode_bool(self.balance, serializer);
  }

  @protected
  void sse_encode_background_state(
      BackgroundState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_wallet_info(self.wallets, serializer);
    sse_encode_Map_usize_background_notification_state(
        self.notificationsWalletStates, serializer);
    sse_encode_bool(self.notificationsGlobalEnabled, serializer);
    sse_encode_String(self.locale, serializer);
    sse_encode_u_8(self.appearances, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_f_token_info(FTokenInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.symbol, serializer);
    sse_encode_u_8(self.decimals, serializer);
    sse_encode_String(self.addr, serializer);
    sse_encode_Map_String_String(self.balances, serializer);
    sse_encode_bool(self.default_, serializer);
  }

  @protected
  void sse_encode_key_pair(KeyPair self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.sk, serializer);
    sse_encode_String(self.pk, serializer);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_account_info(
      List<AccountInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_account_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_f_token_info(
      List<FTokenInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_f_token_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_prim_usize_strict(
      Uint64List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint64List(self);
  }

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_usize_background_notification_state(
      List<(BigInt, BackgroundNotificationState)> self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_usize_background_notification_state(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_usize_string(
      List<(BigInt, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_usize_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_wallet_info(
      List<WalletInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_wallet_info(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_StreamSink_String_Sse(
      RustStreamSink<String>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_StreamSink_String_Sse(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_record_usize_background_notification_state(
      (BigInt, BackgroundNotificationState) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.$1, serializer);
    sse_encode_background_notification_state(self.$2, serializer);
  }

  @protected
  void sse_encode_record_usize_string(
      (BigInt, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_wallet_info(WalletInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.walletType, serializer);
    sse_encode_String(self.walletName, serializer);
    sse_encode_String(self.authType, serializer);
    sse_encode_String(self.walletAddress, serializer);
    sse_encode_list_account_info(self.accounts, serializer);
    sse_encode_usize(self.selectedAccount, serializer);
    sse_encode_list_f_token_info(self.tokens, serializer);
    sse_encode_list_prim_u_8_strict(self.cipherOrders, serializer);
    sse_encode_opt_String(self.currencyConvert, serializer);
    sse_encode_opt_String(self.ipfsNode, serializer);
    sse_encode_bool(self.ensEnabled, serializer);
    sse_encode_bool(self.gasControlEnabled, serializer);
    sse_encode_bool(self.nodeRankingEnabled, serializer);
    sse_encode_u_8(self.maxConnections, serializer);
    sse_encode_u_32(self.requestTimeoutSecs, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}

@sealed
class ArcBackgroundImpl extends RustOpaque implements ArcBackground {
  // Not to be used by end users
  ArcBackgroundImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArcBackgroundImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ArcBackground,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ArcBackground,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ArcBackgroundPtr,
  );
}

@sealed
class FTokenImpl extends RustOpaque implements FToken {
  // Not to be used by end users
  FTokenImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FTokenImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FToken,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FToken,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FTokenPtr,
  );
}

@sealed
class SerivceBackgroundImpl extends RustOpaque implements SerivceBackground {
  // Not to be used by end users
  SerivceBackgroundImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SerivceBackgroundImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SerivceBackground,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SerivceBackground,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_SerivceBackgroundPtr,
  );

  ArcBackground get core =>
      RustLib.instance.api.crateApiBackendSerivceBackgroundAutoAccessorGetCore(
        that: this,
      );

  RustStreamSink<String>? get messageSink => RustLib.instance.api
          .crateApiBackendSerivceBackgroundAutoAccessorGetMessageSink(
        that: this,
      );

  bool get running => RustLib.instance.api
          .crateApiBackendSerivceBackgroundAutoAccessorGetRunning(
        that: this,
      );

  set core(ArcBackground core) =>
      RustLib.instance.api.crateApiBackendSerivceBackgroundAutoAccessorSetCore(
          that: this, core: core);

  set messageSink(RustStreamSink<String>? messageSink) => RustLib.instance.api
      .crateApiBackendSerivceBackgroundAutoAccessorSetMessageSink(
          that: this, messageSink: messageSink);

  set running(bool running) => RustLib.instance.api
      .crateApiBackendSerivceBackgroundAutoAccessorSetRunning(
          that: this, running: running);
}
