// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.5.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/backend.dart';
import 'api/methods.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiMethodsInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.5.1';

  @override
  int get rustContentHash => 1895511574;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_zilpay',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  CommonSettings crateApiBackendBackgroundStateAutoAccessorGetSettings(
      {required BackgroundState that});

  List<WalletInfo> crateApiBackendBackgroundStateAutoAccessorGetWallets(
      {required BackgroundState that});

  void crateApiBackendBackgroundStateAutoAccessorSetSettings(
      {required BackgroundState that, required CommonSettings settings});

  void crateApiBackendBackgroundStateAutoAccessorSetWallets(
      {required BackgroundState that, required List<WalletInfo> wallets});

  ArcBackground crateApiBackendSerivceAutoAccessorGetCore(
      {required Serivce that});

  RustStreamSink<String>? crateApiBackendSerivceAutoAccessorGetMessageSink(
      {required Serivce that});

  bool crateApiBackendSerivceAutoAccessorGetRunning({required Serivce that});

  void crateApiBackendSerivceAutoAccessorSetCore(
      {required Serivce that, required ArcBackground core});

  void crateApiBackendSerivceAutoAccessorSetMessageSink(
      {required Serivce that, RustStreamSink<String>? messageSink});

  void crateApiBackendSerivceAutoAccessorSetRunning(
      {required Serivce that, required bool running});

  List<AccountInfo> crateApiBackendWalletInfoAutoAccessorGetAccounts(
      {required WalletInfo that});

  String crateApiBackendWalletInfoAutoAccessorGetAuthType(
      {required WalletInfo that});

  BigInt crateApiBackendWalletInfoAutoAccessorGetSelectedAccount(
      {required WalletInfo that});

  WalletSettings crateApiBackendWalletInfoAutoAccessorGetSettings(
      {required WalletInfo that});

  List<FToken> crateApiBackendWalletInfoAutoAccessorGetTokens(
      {required WalletInfo that});

  String crateApiBackendWalletInfoAutoAccessorGetWalletAddress(
      {required WalletInfo that});

  String crateApiBackendWalletInfoAutoAccessorGetWalletName(
      {required WalletInfo that});

  int crateApiBackendWalletInfoAutoAccessorGetWalletType(
      {required WalletInfo that});

  void crateApiBackendWalletInfoAutoAccessorSetAccounts(
      {required WalletInfo that, required List<AccountInfo> accounts});

  void crateApiBackendWalletInfoAutoAccessorSetAuthType(
      {required WalletInfo that, required String authType});

  void crateApiBackendWalletInfoAutoAccessorSetSelectedAccount(
      {required WalletInfo that, required BigInt selectedAccount});

  void crateApiBackendWalletInfoAutoAccessorSetSettings(
      {required WalletInfo that, required WalletSettings settings});

  void crateApiBackendWalletInfoAutoAccessorSetTokens(
      {required WalletInfo that, required List<FToken> tokens});

  void crateApiBackendWalletInfoAutoAccessorSetWalletAddress(
      {required WalletInfo that, required String walletAddress});

  void crateApiBackendWalletInfoAutoAccessorSetWalletName(
      {required WalletInfo that, required String walletName});

  void crateApiBackendWalletInfoAutoAccessorSetWalletType(
      {required WalletInfo that, required int walletType});

  Future<(String, String)> crateApiBackendAddBip39Wallet(
      {required String password,
      required String mnemonicStr,
      required Uint64List indexes,
      required String passphrase,
      required String walletName,
      required String biometricType,
      required Uint64List networks,
      required List<String> identifiers});

  Future<(String, String)> crateApiBackendAddLedgerZilliqaWallet(
      {required String pubKey,
      required BigInt walletIndex,
      required String walletName,
      required String ledgerId,
      required String accountName,
      required String biometricType,
      required List<String> identifiers});

  Future<(String, String)> crateApiBackendAddSkWallet(
      {required String sk,
      required String password,
      required String accountName,
      required String walletName,
      required String biometricType,
      required List<String> identifiers,
      required Uint64List networks});

  Future<FToken> crateApiBackendFetchTokenMeta(
      {required String addr, required BigInt walletIndex});

  Future<BackgroundState> crateApiBackendGetData();

  Future<List<WalletInfo>> crateApiBackendGetWallets();

  Future<bool> crateApiBackendIsServiceRunning();

  Future<BackgroundState> crateApiBackendStartService({required String path});

  Stream<String> crateApiBackendStartWorker();

  Future<void> crateApiBackendStopService();

  Future<void> crateApiBackendSyncBalances({required BigInt walletIndex});

  Future<bool> crateApiBackendTryUnlockWithPassword(
      {required String password,
      required BigInt walletIndex,
      required List<String> identifiers});

  Future<bool> crateApiBackendTryUnlockWithSession(
      {required String sessionCipher,
      required BigInt walletIndex,
      required List<String> identifiers});

  Future<String> crateApiMethodsGenBip39Words({required int count});

  Future<KeyPair> crateApiMethodsGenKeypair();

  Future<void> crateApiMethodsInitApp();

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcBackground;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcBackground;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcBackgroundPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BackgroundState;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BackgroundState;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BackgroundStatePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_CommonSettings;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_CommonSettings;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_CommonSettingsPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_FToken;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_FToken;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FTokenPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Serivce;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Serivce;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SerivcePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WalletInfo;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WalletInfo;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_WalletInfoPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WalletSettings;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WalletSettings;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_WalletSettingsPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  CommonSettings crateApiBackendBackgroundStateAutoAccessorGetSettings(
      {required BackgroundState that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBackgroundState(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCommonSettings,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBackendBackgroundStateAutoAccessorGetSettingsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBackendBackgroundStateAutoAccessorGetSettingsConstMeta =>
          const TaskConstMeta(
            debugName: "BackgroundState_auto_accessor_get_settings",
            argNames: ["that"],
          );

  @override
  List<WalletInfo> crateApiBackendBackgroundStateAutoAccessorGetWallets(
      {required BackgroundState that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBackgroundState(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBackendBackgroundStateAutoAccessorGetWalletsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBackendBackgroundStateAutoAccessorGetWalletsConstMeta =>
          const TaskConstMeta(
            debugName: "BackgroundState_auto_accessor_get_wallets",
            argNames: ["that"],
          );

  @override
  void crateApiBackendBackgroundStateAutoAccessorSetSettings(
      {required BackgroundState that, required CommonSettings settings}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBackgroundState(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCommonSettings(
            settings, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBackendBackgroundStateAutoAccessorSetSettingsConstMeta,
      argValues: [that, settings],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBackendBackgroundStateAutoAccessorSetSettingsConstMeta =>
          const TaskConstMeta(
            debugName: "BackgroundState_auto_accessor_set_settings",
            argNames: ["that", "settings"],
          );

  @override
  void crateApiBackendBackgroundStateAutoAccessorSetWallets(
      {required BackgroundState that, required List<WalletInfo> wallets}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBackgroundState(
            that, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
            wallets, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBackendBackgroundStateAutoAccessorSetWalletsConstMeta,
      argValues: [that, wallets],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBackendBackgroundStateAutoAccessorSetWalletsConstMeta =>
          const TaskConstMeta(
            debugName: "BackgroundState_auto_accessor_set_wallets",
            argNames: ["that", "wallets"],
          );

  @override
  ArcBackground crateApiBackendSerivceAutoAccessorGetCore(
      {required Serivce that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivce(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBackground,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBackendSerivceAutoAccessorGetCoreConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendSerivceAutoAccessorGetCoreConstMeta =>
      const TaskConstMeta(
        debugName: "Serivce_auto_accessor_get_core",
        argNames: ["that"],
      );

  @override
  RustStreamSink<String>? crateApiBackendSerivceAutoAccessorGetMessageSink(
      {required Serivce that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivce(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_StreamSink_String_Sse,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBackendSerivceAutoAccessorGetMessageSinkConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBackendSerivceAutoAccessorGetMessageSinkConstMeta =>
          const TaskConstMeta(
            debugName: "Serivce_auto_accessor_get_message_sink",
            argNames: ["that"],
          );

  @override
  bool crateApiBackendSerivceAutoAccessorGetRunning({required Serivce that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivce(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBackendSerivceAutoAccessorGetRunningConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendSerivceAutoAccessorGetRunningConstMeta =>
      const TaskConstMeta(
        debugName: "Serivce_auto_accessor_get_running",
        argNames: ["that"],
      );

  @override
  void crateApiBackendSerivceAutoAccessorSetCore(
      {required Serivce that, required ArcBackground core}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivce(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBackground(
            core, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBackendSerivceAutoAccessorSetCoreConstMeta,
      argValues: [that, core],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendSerivceAutoAccessorSetCoreConstMeta =>
      const TaskConstMeta(
        debugName: "Serivce_auto_accessor_set_core",
        argNames: ["that", "core"],
      );

  @override
  void crateApiBackendSerivceAutoAccessorSetMessageSink(
      {required Serivce that, RustStreamSink<String>? messageSink}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivce(
            that, serializer);
        sse_encode_opt_StreamSink_String_Sse(messageSink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBackendSerivceAutoAccessorSetMessageSinkConstMeta,
      argValues: [that, messageSink],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBackendSerivceAutoAccessorSetMessageSinkConstMeta =>
          const TaskConstMeta(
            debugName: "Serivce_auto_accessor_set_message_sink",
            argNames: ["that", "messageSink"],
          );

  @override
  void crateApiBackendSerivceAutoAccessorSetRunning(
      {required Serivce that, required bool running}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivce(
            that, serializer);
        sse_encode_bool(running, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBackendSerivceAutoAccessorSetRunningConstMeta,
      argValues: [that, running],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendSerivceAutoAccessorSetRunningConstMeta =>
      const TaskConstMeta(
        debugName: "Serivce_auto_accessor_set_running",
        argNames: ["that", "running"],
      );

  @override
  List<AccountInfo> crateApiBackendWalletInfoAutoAccessorGetAccounts(
      {required WalletInfo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_account_info,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBackendWalletInfoAutoAccessorGetAccountsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBackendWalletInfoAutoAccessorGetAccountsConstMeta =>
          const TaskConstMeta(
            debugName: "WalletInfo_auto_accessor_get_accounts",
            argNames: ["that"],
          );

  @override
  String crateApiBackendWalletInfoAutoAccessorGetAuthType(
      {required WalletInfo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBackendWalletInfoAutoAccessorGetAuthTypeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBackendWalletInfoAutoAccessorGetAuthTypeConstMeta =>
          const TaskConstMeta(
            debugName: "WalletInfo_auto_accessor_get_auth_type",
            argNames: ["that"],
          );

  @override
  BigInt crateApiBackendWalletInfoAutoAccessorGetSelectedAccount(
      {required WalletInfo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBackendWalletInfoAutoAccessorGetSelectedAccountConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBackendWalletInfoAutoAccessorGetSelectedAccountConstMeta =>
          const TaskConstMeta(
            debugName: "WalletInfo_auto_accessor_get_selected_account",
            argNames: ["that"],
          );

  @override
  WalletSettings crateApiBackendWalletInfoAutoAccessorGetSettings(
      {required WalletInfo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletSettings,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBackendWalletInfoAutoAccessorGetSettingsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBackendWalletInfoAutoAccessorGetSettingsConstMeta =>
          const TaskConstMeta(
            debugName: "WalletInfo_auto_accessor_get_settings",
            argNames: ["that"],
          );

  @override
  List<FToken> crateApiBackendWalletInfoAutoAccessorGetTokens(
      {required WalletInfo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFToken,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBackendWalletInfoAutoAccessorGetTokensConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendWalletInfoAutoAccessorGetTokensConstMeta =>
      const TaskConstMeta(
        debugName: "WalletInfo_auto_accessor_get_tokens",
        argNames: ["that"],
      );

  @override
  String crateApiBackendWalletInfoAutoAccessorGetWalletAddress(
      {required WalletInfo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBackendWalletInfoAutoAccessorGetWalletAddressConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBackendWalletInfoAutoAccessorGetWalletAddressConstMeta =>
          const TaskConstMeta(
            debugName: "WalletInfo_auto_accessor_get_wallet_address",
            argNames: ["that"],
          );

  @override
  String crateApiBackendWalletInfoAutoAccessorGetWalletName(
      {required WalletInfo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBackendWalletInfoAutoAccessorGetWalletNameConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBackendWalletInfoAutoAccessorGetWalletNameConstMeta =>
          const TaskConstMeta(
            debugName: "WalletInfo_auto_accessor_get_wallet_name",
            argNames: ["that"],
          );

  @override
  int crateApiBackendWalletInfoAutoAccessorGetWalletType(
      {required WalletInfo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBackendWalletInfoAutoAccessorGetWalletTypeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBackendWalletInfoAutoAccessorGetWalletTypeConstMeta =>
          const TaskConstMeta(
            debugName: "WalletInfo_auto_accessor_get_wallet_type",
            argNames: ["that"],
          );

  @override
  void crateApiBackendWalletInfoAutoAccessorSetAccounts(
      {required WalletInfo that, required List<AccountInfo> accounts}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
            that, serializer);
        sse_encode_list_account_info(accounts, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBackendWalletInfoAutoAccessorSetAccountsConstMeta,
      argValues: [that, accounts],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBackendWalletInfoAutoAccessorSetAccountsConstMeta =>
          const TaskConstMeta(
            debugName: "WalletInfo_auto_accessor_set_accounts",
            argNames: ["that", "accounts"],
          );

  @override
  void crateApiBackendWalletInfoAutoAccessorSetAuthType(
      {required WalletInfo that, required String authType}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
            that, serializer);
        sse_encode_String(authType, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBackendWalletInfoAutoAccessorSetAuthTypeConstMeta,
      argValues: [that, authType],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBackendWalletInfoAutoAccessorSetAuthTypeConstMeta =>
          const TaskConstMeta(
            debugName: "WalletInfo_auto_accessor_set_auth_type",
            argNames: ["that", "authType"],
          );

  @override
  void crateApiBackendWalletInfoAutoAccessorSetSelectedAccount(
      {required WalletInfo that, required BigInt selectedAccount}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
            that, serializer);
        sse_encode_usize(selectedAccount, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBackendWalletInfoAutoAccessorSetSelectedAccountConstMeta,
      argValues: [that, selectedAccount],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBackendWalletInfoAutoAccessorSetSelectedAccountConstMeta =>
          const TaskConstMeta(
            debugName: "WalletInfo_auto_accessor_set_selected_account",
            argNames: ["that", "selectedAccount"],
          );

  @override
  void crateApiBackendWalletInfoAutoAccessorSetSettings(
      {required WalletInfo that, required WalletSettings settings}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletSettings(
            settings, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBackendWalletInfoAutoAccessorSetSettingsConstMeta,
      argValues: [that, settings],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBackendWalletInfoAutoAccessorSetSettingsConstMeta =>
          const TaskConstMeta(
            debugName: "WalletInfo_auto_accessor_set_settings",
            argNames: ["that", "settings"],
          );

  @override
  void crateApiBackendWalletInfoAutoAccessorSetTokens(
      {required WalletInfo that, required List<FToken> tokens}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
            that, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFToken(
            tokens, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBackendWalletInfoAutoAccessorSetTokensConstMeta,
      argValues: [that, tokens],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendWalletInfoAutoAccessorSetTokensConstMeta =>
      const TaskConstMeta(
        debugName: "WalletInfo_auto_accessor_set_tokens",
        argNames: ["that", "tokens"],
      );

  @override
  void crateApiBackendWalletInfoAutoAccessorSetWalletAddress(
      {required WalletInfo that, required String walletAddress}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
            that, serializer);
        sse_encode_String(walletAddress, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBackendWalletInfoAutoAccessorSetWalletAddressConstMeta,
      argValues: [that, walletAddress],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBackendWalletInfoAutoAccessorSetWalletAddressConstMeta =>
          const TaskConstMeta(
            debugName: "WalletInfo_auto_accessor_set_wallet_address",
            argNames: ["that", "walletAddress"],
          );

  @override
  void crateApiBackendWalletInfoAutoAccessorSetWalletName(
      {required WalletInfo that, required String walletName}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
            that, serializer);
        sse_encode_String(walletName, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBackendWalletInfoAutoAccessorSetWalletNameConstMeta,
      argValues: [that, walletName],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBackendWalletInfoAutoAccessorSetWalletNameConstMeta =>
          const TaskConstMeta(
            debugName: "WalletInfo_auto_accessor_set_wallet_name",
            argNames: ["that", "walletName"],
          );

  @override
  void crateApiBackendWalletInfoAutoAccessorSetWalletType(
      {required WalletInfo that, required int walletType}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
            that, serializer);
        sse_encode_u_8(walletType, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBackendWalletInfoAutoAccessorSetWalletTypeConstMeta,
      argValues: [that, walletType],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBackendWalletInfoAutoAccessorSetWalletTypeConstMeta =>
          const TaskConstMeta(
            debugName: "WalletInfo_auto_accessor_set_wallet_type",
            argNames: ["that", "walletType"],
          );

  @override
  Future<(String, String)> crateApiBackendAddBip39Wallet(
      {required String password,
      required String mnemonicStr,
      required Uint64List indexes,
      required String passphrase,
      required String walletName,
      required String biometricType,
      required Uint64List networks,
      required List<String> identifiers}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(password, serializer);
        sse_encode_String(mnemonicStr, serializer);
        sse_encode_list_prim_usize_strict(indexes, serializer);
        sse_encode_String(passphrase, serializer);
        sse_encode_String(walletName, serializer);
        sse_encode_String(biometricType, serializer);
        sse_encode_list_prim_usize_strict(networks, serializer);
        sse_encode_list_String(identifiers, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_string_string,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendAddBip39WalletConstMeta,
      argValues: [
        password,
        mnemonicStr,
        indexes,
        passphrase,
        walletName,
        biometricType,
        networks,
        identifiers
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendAddBip39WalletConstMeta =>
      const TaskConstMeta(
        debugName: "add_bip39_wallet",
        argNames: [
          "password",
          "mnemonicStr",
          "indexes",
          "passphrase",
          "walletName",
          "biometricType",
          "networks",
          "identifiers"
        ],
      );

  @override
  Future<(String, String)> crateApiBackendAddLedgerZilliqaWallet(
      {required String pubKey,
      required BigInt walletIndex,
      required String walletName,
      required String ledgerId,
      required String accountName,
      required String biometricType,
      required List<String> identifiers}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(pubKey, serializer);
        sse_encode_usize(walletIndex, serializer);
        sse_encode_String(walletName, serializer);
        sse_encode_String(ledgerId, serializer);
        sse_encode_String(accountName, serializer);
        sse_encode_String(biometricType, serializer);
        sse_encode_list_String(identifiers, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_string_string,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendAddLedgerZilliqaWalletConstMeta,
      argValues: [
        pubKey,
        walletIndex,
        walletName,
        ledgerId,
        accountName,
        biometricType,
        identifiers
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendAddLedgerZilliqaWalletConstMeta =>
      const TaskConstMeta(
        debugName: "add_ledger_zilliqa_wallet",
        argNames: [
          "pubKey",
          "walletIndex",
          "walletName",
          "ledgerId",
          "accountName",
          "biometricType",
          "identifiers"
        ],
      );

  @override
  Future<(String, String)> crateApiBackendAddSkWallet(
      {required String sk,
      required String password,
      required String accountName,
      required String walletName,
      required String biometricType,
      required List<String> identifiers,
      required Uint64List networks}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(sk, serializer);
        sse_encode_String(password, serializer);
        sse_encode_String(accountName, serializer);
        sse_encode_String(walletName, serializer);
        sse_encode_String(biometricType, serializer);
        sse_encode_list_String(identifiers, serializer);
        sse_encode_list_prim_usize_strict(networks, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 29, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_string_string,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendAddSkWalletConstMeta,
      argValues: [
        sk,
        password,
        accountName,
        walletName,
        biometricType,
        identifiers,
        networks
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendAddSkWalletConstMeta => const TaskConstMeta(
        debugName: "add_sk_wallet",
        argNames: [
          "sk",
          "password",
          "accountName",
          "walletName",
          "biometricType",
          "identifiers",
          "networks"
        ],
      );

  @override
  Future<FToken> crateApiBackendFetchTokenMeta(
      {required String addr, required BigInt walletIndex}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(addr, serializer);
        sse_encode_usize(walletIndex, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFToken,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendFetchTokenMetaConstMeta,
      argValues: [addr, walletIndex],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendFetchTokenMetaConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_token_meta",
        argNames: ["addr", "walletIndex"],
      );

  @override
  Future<BackgroundState> crateApiBackendGetData() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 31, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBackgroundState,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendGetDataConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendGetDataConstMeta => const TaskConstMeta(
        debugName: "get_data",
        argNames: [],
      );

  @override
  Future<List<WalletInfo>> crateApiBackendGetWallets() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 32, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendGetWalletsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendGetWalletsConstMeta => const TaskConstMeta(
        debugName: "get_wallets",
        argNames: [],
      );

  @override
  Future<bool> crateApiBackendIsServiceRunning() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 33, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBackendIsServiceRunningConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendIsServiceRunningConstMeta =>
      const TaskConstMeta(
        debugName: "is_service_running",
        argNames: [],
      );

  @override
  Future<BackgroundState> crateApiBackendStartService({required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 34, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBackgroundState,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendStartServiceConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendStartServiceConstMeta =>
      const TaskConstMeta(
        debugName: "start_service",
        argNames: ["path"],
      );

  @override
  Stream<String> crateApiBackendStartWorker() {
    final sink = RustStreamSink<String>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_String_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 35, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendStartWorkerConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiBackendStartWorkerConstMeta => const TaskConstMeta(
        debugName: "start_worker",
        argNames: ["sink"],
      );

  @override
  Future<void> crateApiBackendStopService() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 36, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendStopServiceConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendStopServiceConstMeta => const TaskConstMeta(
        debugName: "stop_service",
        argNames: [],
      );

  @override
  Future<void> crateApiBackendSyncBalances({required BigInt walletIndex}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(walletIndex, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 37, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendSyncBalancesConstMeta,
      argValues: [walletIndex],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendSyncBalancesConstMeta =>
      const TaskConstMeta(
        debugName: "sync_balances",
        argNames: ["walletIndex"],
      );

  @override
  Future<bool> crateApiBackendTryUnlockWithPassword(
      {required String password,
      required BigInt walletIndex,
      required List<String> identifiers}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(password, serializer);
        sse_encode_usize(walletIndex, serializer);
        sse_encode_list_String(identifiers, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 38, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendTryUnlockWithPasswordConstMeta,
      argValues: [password, walletIndex, identifiers],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendTryUnlockWithPasswordConstMeta =>
      const TaskConstMeta(
        debugName: "try_unlock_with_password",
        argNames: ["password", "walletIndex", "identifiers"],
      );

  @override
  Future<bool> crateApiBackendTryUnlockWithSession(
      {required String sessionCipher,
      required BigInt walletIndex,
      required List<String> identifiers}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(sessionCipher, serializer);
        sse_encode_usize(walletIndex, serializer);
        sse_encode_list_String(identifiers, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 39, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiBackendTryUnlockWithSessionConstMeta,
      argValues: [sessionCipher, walletIndex, identifiers],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBackendTryUnlockWithSessionConstMeta =>
      const TaskConstMeta(
        debugName: "try_unlock_with_session",
        argNames: ["sessionCipher", "walletIndex", "identifiers"],
      );

  @override
  Future<String> crateApiMethodsGenBip39Words({required int count}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(count, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 40, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiMethodsGenBip39WordsConstMeta,
      argValues: [count],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMethodsGenBip39WordsConstMeta =>
      const TaskConstMeta(
        debugName: "gen_bip39_words",
        argNames: ["count"],
      );

  @override
  Future<KeyPair> crateApiMethodsGenKeypair() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 41, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_key_pair,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiMethodsGenKeypairConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMethodsGenKeypairConstMeta => const TaskConstMeta(
        debugName: "gen_keypair",
        argNames: [],
      );

  @override
  Future<void> crateApiMethodsInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 42, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMethodsInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMethodsInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcBackground => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBackground;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcBackground => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBackground;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BackgroundState => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBackgroundState;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BackgroundState => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBackgroundState;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_CommonSettings => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCommonSettings;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_CommonSettings => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCommonSettings;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FToken => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFToken;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FToken => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFToken;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Serivce => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivce;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Serivce => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivce;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WalletInfo => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WalletInfo => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WalletSettings => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletSettings;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WalletSettings => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletSettings;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  ArcBackground
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBackground(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcBackgroundImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BackgroundState
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBackgroundState(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BackgroundStateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  CommonSettings
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCommonSettings(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CommonSettingsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FToken
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FTokenImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Serivce
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivce(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SerivceImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WalletInfo
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WalletSettings
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletSettings(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletSettingsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BackgroundState
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBackgroundState(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BackgroundStateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Serivce
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivce(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SerivceImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WalletInfo
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BackgroundState
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBackgroundState(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BackgroundStateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Serivce
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivce(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SerivceImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WalletInfo
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcBackground
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBackground(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcBackgroundImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BackgroundState
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBackgroundState(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BackgroundStateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  CommonSettings
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCommonSettings(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CommonSettingsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FToken
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FTokenImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Serivce
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivce(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SerivceImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WalletInfo
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WalletSettings
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletSettings(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletSettingsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<String> dco_decode_StreamSink_String_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  AccountInfo dco_decode_account_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AccountInfo(
      addr: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  KeyPair dco_decode_key_pair(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return KeyPair(
      sk: dco_decode_String(arr[0]),
      pk: dco_decode_String(arr[1]),
    );
  }

  @protected
  List<FToken>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFToken)
        .toList();
  }

  @protected
  List<WalletInfo>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo)
        .toList();
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<AccountInfo> dco_decode_list_account_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_account_info).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  Uint64List dco_decode_list_prim_usize_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint64List;
  }

  @protected
  RustStreamSink<String>? dco_decode_opt_StreamSink_String_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_StreamSink_String_Sse(raw);
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  ArcBackground
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBackground(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcBackgroundImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BackgroundState
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBackgroundState(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BackgroundStateImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  CommonSettings
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCommonSettings(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CommonSettingsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FToken
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FTokenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Serivce
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivce(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SerivceImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WalletInfo
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletInfoImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WalletSettings
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletSettings(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletSettingsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BackgroundState
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBackgroundState(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BackgroundStateImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Serivce
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivce(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SerivceImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WalletInfo
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletInfoImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BackgroundState
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBackgroundState(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BackgroundStateImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Serivce
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivce(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SerivceImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WalletInfo
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletInfoImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcBackground
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBackground(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcBackgroundImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BackgroundState
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBackgroundState(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BackgroundStateImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  CommonSettings
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCommonSettings(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CommonSettingsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FToken
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FTokenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Serivce
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivce(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SerivceImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WalletInfo
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletInfoImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WalletSettings
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletSettings(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletSettingsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<String> sse_decode_StreamSink_String_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  AccountInfo sse_decode_account_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_addr = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    return AccountInfo(addr: var_addr, name: var_name);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  KeyPair sse_decode_key_pair(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_sk = sse_decode_String(deserializer);
    var var_pk = sse_decode_String(deserializer);
    return KeyPair(sk: var_sk, pk: var_pk);
  }

  @protected
  List<FToken>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FToken>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFToken(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<WalletInfo>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WalletInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<AccountInfo> sse_decode_list_account_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AccountInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_account_info(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint64List sse_decode_list_prim_usize_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint64List(len_);
  }

  @protected
  RustStreamSink<String>? sse_decode_opt_StreamSink_String_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_StreamSink_String_Sse(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBackground(
          ArcBackground self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcBackgroundImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBackgroundState(
          BackgroundState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BackgroundStateImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCommonSettings(
          CommonSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CommonSettingsImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFToken(
          FToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FTokenImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivce(
          Serivce self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SerivceImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
          WalletInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletInfoImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletSettings(
          WalletSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletSettingsImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBackgroundState(
          BackgroundState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BackgroundStateImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivce(
          Serivce self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SerivceImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
          WalletInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletInfoImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBackgroundState(
          BackgroundState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BackgroundStateImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivce(
          Serivce self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SerivceImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
          WalletInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletInfoImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBackground(
          ArcBackground self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcBackgroundImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBackgroundState(
          BackgroundState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BackgroundStateImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCommonSettings(
          CommonSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CommonSettingsImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFToken(
          FToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FTokenImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerivce(
          Serivce self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SerivceImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
          WalletInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletInfoImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletSettings(
          WalletSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletSettingsImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_String_Sse(
      RustStreamSink<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_account_info(AccountInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.addr, serializer);
    sse_encode_String(self.name, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_key_pair(KeyPair self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.sk, serializer);
    sse_encode_String(self.pk, serializer);
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFToken(
          List<FToken> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFToken(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
          List<WalletInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletInfo(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_account_info(
      List<AccountInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_account_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_prim_usize_strict(
      Uint64List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint64List(self);
  }

  @protected
  void sse_encode_opt_StreamSink_String_Sse(
      RustStreamSink<String>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_StreamSink_String_Sse(self, serializer);
    }
  }

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}

@sealed
class ArcBackgroundImpl extends RustOpaque implements ArcBackground {
  // Not to be used by end users
  ArcBackgroundImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArcBackgroundImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ArcBackground,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ArcBackground,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ArcBackgroundPtr,
  );
}

@sealed
class BackgroundStateImpl extends RustOpaque implements BackgroundState {
  // Not to be used by end users
  BackgroundStateImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BackgroundStateImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_BackgroundState,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_BackgroundState,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_BackgroundStatePtr,
  );

  CommonSettings get settings => RustLib.instance.api
          .crateApiBackendBackgroundStateAutoAccessorGetSettings(
        that: this,
      );

  List<WalletInfo> get wallets =>
      RustLib.instance.api.crateApiBackendBackgroundStateAutoAccessorGetWallets(
        that: this,
      );

  set settings(CommonSettings settings) => RustLib.instance.api
      .crateApiBackendBackgroundStateAutoAccessorSetSettings(
          that: this, settings: settings);

  set wallets(List<WalletInfo> wallets) =>
      RustLib.instance.api.crateApiBackendBackgroundStateAutoAccessorSetWallets(
          that: this, wallets: wallets);
}

@sealed
class CommonSettingsImpl extends RustOpaque implements CommonSettings {
  // Not to be used by end users
  CommonSettingsImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  CommonSettingsImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_CommonSettings,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_CommonSettings,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_CommonSettingsPtr,
  );
}

@sealed
class FTokenImpl extends RustOpaque implements FToken {
  // Not to be used by end users
  FTokenImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FTokenImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FToken,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FToken,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FTokenPtr,
  );
}

@sealed
class SerivceImpl extends RustOpaque implements Serivce {
  // Not to be used by end users
  SerivceImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SerivceImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Serivce,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Serivce,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SerivcePtr,
  );

  ArcBackground get core =>
      RustLib.instance.api.crateApiBackendSerivceAutoAccessorGetCore(
        that: this,
      );

  RustStreamSink<String>? get messageSink =>
      RustLib.instance.api.crateApiBackendSerivceAutoAccessorGetMessageSink(
        that: this,
      );

  bool get running =>
      RustLib.instance.api.crateApiBackendSerivceAutoAccessorGetRunning(
        that: this,
      );

  set core(ArcBackground core) => RustLib.instance.api
      .crateApiBackendSerivceAutoAccessorSetCore(that: this, core: core);

  set messageSink(RustStreamSink<String>? messageSink) =>
      RustLib.instance.api.crateApiBackendSerivceAutoAccessorSetMessageSink(
          that: this, messageSink: messageSink);

  set running(bool running) =>
      RustLib.instance.api.crateApiBackendSerivceAutoAccessorSetRunning(
          that: this, running: running);
}

@sealed
class WalletInfoImpl extends RustOpaque implements WalletInfo {
  // Not to be used by end users
  WalletInfoImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WalletInfoImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_WalletInfo,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_WalletInfo,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_WalletInfoPtr,
  );

  List<AccountInfo> get accounts =>
      RustLib.instance.api.crateApiBackendWalletInfoAutoAccessorGetAccounts(
        that: this,
      );

  String get authType =>
      RustLib.instance.api.crateApiBackendWalletInfoAutoAccessorGetAuthType(
        that: this,
      );

  BigInt get selectedAccount => RustLib.instance.api
          .crateApiBackendWalletInfoAutoAccessorGetSelectedAccount(
        that: this,
      );

  WalletSettings get settings =>
      RustLib.instance.api.crateApiBackendWalletInfoAutoAccessorGetSettings(
        that: this,
      );

  List<FToken> get tokens =>
      RustLib.instance.api.crateApiBackendWalletInfoAutoAccessorGetTokens(
        that: this,
      );

  String get walletAddress => RustLib.instance.api
          .crateApiBackendWalletInfoAutoAccessorGetWalletAddress(
        that: this,
      );

  String get walletName =>
      RustLib.instance.api.crateApiBackendWalletInfoAutoAccessorGetWalletName(
        that: this,
      );

  int get walletType =>
      RustLib.instance.api.crateApiBackendWalletInfoAutoAccessorGetWalletType(
        that: this,
      );

  set accounts(List<AccountInfo> accounts) =>
      RustLib.instance.api.crateApiBackendWalletInfoAutoAccessorSetAccounts(
          that: this, accounts: accounts);

  set authType(String authType) =>
      RustLib.instance.api.crateApiBackendWalletInfoAutoAccessorSetAuthType(
          that: this, authType: authType);

  set selectedAccount(BigInt selectedAccount) => RustLib.instance.api
      .crateApiBackendWalletInfoAutoAccessorSetSelectedAccount(
          that: this, selectedAccount: selectedAccount);

  set settings(WalletSettings settings) =>
      RustLib.instance.api.crateApiBackendWalletInfoAutoAccessorSetSettings(
          that: this, settings: settings);

  set tokens(List<FToken> tokens) =>
      RustLib.instance.api.crateApiBackendWalletInfoAutoAccessorSetTokens(
          that: this, tokens: tokens);

  set walletAddress(String walletAddress) => RustLib.instance.api
      .crateApiBackendWalletInfoAutoAccessorSetWalletAddress(
          that: this, walletAddress: walletAddress);

  set walletName(String walletName) =>
      RustLib.instance.api.crateApiBackendWalletInfoAutoAccessorSetWalletName(
          that: this, walletName: walletName);

  set walletType(int walletType) =>
      RustLib.instance.api.crateApiBackendWalletInfoAutoAccessorSetWalletType(
          that: this, walletType: walletType);
}

@sealed
class WalletSettingsImpl extends RustOpaque implements WalletSettings {
  // Not to be used by end users
  WalletSettingsImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WalletSettingsImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_WalletSettings,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_WalletSettings,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_WalletSettingsPtr,
  );
}
