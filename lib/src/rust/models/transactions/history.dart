// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'base_token.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

class HistoricalTransactionInfo {
  final String transactionHash;
  final String amount;
  final String sender;
  final String recipient;
  final String? contractAddress;
  final TransactionStatusInfo status;
  final int? statusCode;
  final BigInt timestamp;
  final BigInt? blockNumber;
  final BigInt? gasUsed;
  final BigInt? gasLimit;
  final BigInt? gasPrice;
  final BigInt? blobGasUsed;
  final BigInt? blobGasPrice;
  final BigInt? effectiveGasPrice;
  final BigInt fee;
  final String? icon;
  final String? title;
  final String? error;
  final String sig;
  final BigInt nonce;
  final BaseTokenInfo? tokenInfo;
  final String chainType;
  final BigInt chainHash;

  const HistoricalTransactionInfo({
    required this.transactionHash,
    required this.amount,
    required this.sender,
    required this.recipient,
    this.contractAddress,
    required this.status,
    this.statusCode,
    required this.timestamp,
    this.blockNumber,
    this.gasUsed,
    this.gasLimit,
    this.gasPrice,
    this.blobGasUsed,
    this.blobGasPrice,
    this.effectiveGasPrice,
    required this.fee,
    this.icon,
    this.title,
    this.error,
    required this.sig,
    required this.nonce,
    this.tokenInfo,
    required this.chainType,
    required this.chainHash,
  });

  @override
  int get hashCode =>
      transactionHash.hashCode ^
      amount.hashCode ^
      sender.hashCode ^
      recipient.hashCode ^
      contractAddress.hashCode ^
      status.hashCode ^
      statusCode.hashCode ^
      timestamp.hashCode ^
      blockNumber.hashCode ^
      gasUsed.hashCode ^
      gasLimit.hashCode ^
      gasPrice.hashCode ^
      blobGasUsed.hashCode ^
      blobGasPrice.hashCode ^
      effectiveGasPrice.hashCode ^
      fee.hashCode ^
      icon.hashCode ^
      title.hashCode ^
      error.hashCode ^
      sig.hashCode ^
      nonce.hashCode ^
      tokenInfo.hashCode ^
      chainType.hashCode ^
      chainHash.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is HistoricalTransactionInfo &&
          runtimeType == other.runtimeType &&
          transactionHash == other.transactionHash &&
          amount == other.amount &&
          sender == other.sender &&
          recipient == other.recipient &&
          contractAddress == other.contractAddress &&
          status == other.status &&
          statusCode == other.statusCode &&
          timestamp == other.timestamp &&
          blockNumber == other.blockNumber &&
          gasUsed == other.gasUsed &&
          gasLimit == other.gasLimit &&
          gasPrice == other.gasPrice &&
          blobGasUsed == other.blobGasUsed &&
          blobGasPrice == other.blobGasPrice &&
          effectiveGasPrice == other.effectiveGasPrice &&
          fee == other.fee &&
          icon == other.icon &&
          title == other.title &&
          error == other.error &&
          sig == other.sig &&
          nonce == other.nonce &&
          tokenInfo == other.tokenInfo &&
          chainType == other.chainType &&
          chainHash == other.chainHash;
}

enum TransactionStatusInfo {
  pending,
  confirmed,
  rejected,
  ;
}
