// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.6.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

class AccessListItem {
  final String address;
  final List<String> storageKeys;

  const AccessListItem({
    required this.address,
    required this.storageKeys,
  });

  @override
  int get hashCode => address.hashCode ^ storageKeys.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is AccessListItem &&
          runtimeType == other.runtimeType &&
          address == other.address &&
          storageKeys == other.storageKeys;
}

class BaseTokenInfo {
  final String value;
  final String symbol;
  final int decimals;

  const BaseTokenInfo({
    required this.value,
    required this.symbol,
    required this.decimals,
  });

  @override
  int get hashCode => value.hashCode ^ symbol.hashCode ^ decimals.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is BaseTokenInfo &&
          runtimeType == other.runtimeType &&
          value == other.value &&
          symbol == other.symbol &&
          decimals == other.decimals;
}

enum ChainType {
  scilla,
  evm,
  ;
}

class TransactionMetadataInfo {
  final BigInt providerIndex;
  final String? hash;
  final String? info;
  final String? icon;
  final String? title;
  final String? signer;
  final BaseTokenInfo? tokenInfo;

  const TransactionMetadataInfo({
    required this.providerIndex,
    this.hash,
    this.info,
    this.icon,
    this.title,
    this.signer,
    this.tokenInfo,
  });

  @override
  int get hashCode =>
      providerIndex.hashCode ^
      hash.hashCode ^
      info.hashCode ^
      icon.hashCode ^
      title.hashCode ^
      signer.hashCode ^
      tokenInfo.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TransactionMetadataInfo &&
          runtimeType == other.runtimeType &&
          providerIndex == other.providerIndex &&
          hash == other.hash &&
          info == other.info &&
          icon == other.icon &&
          title == other.title &&
          signer == other.signer &&
          tokenInfo == other.tokenInfo;
}

class TransactionRequestEVM {
  final BigInt? nonce;
  final String? from;
  final String? to;
  final String? value;
  final BigInt? gasLimit;
  final Uint8List? data;
  final BigInt? maxFeePerGas;
  final BigInt? maxPriorityFeePerGas;
  final BigInt? gasPrice;
  final BigInt? chainId;
  final List<AccessListItem>? accessList;
  final List<String>? blobVersionedHashes;
  final BigInt? maxFeePerBlobGas;

  const TransactionRequestEVM({
    this.nonce,
    this.from,
    this.to,
    this.value,
    this.gasLimit,
    this.data,
    this.maxFeePerGas,
    this.maxPriorityFeePerGas,
    this.gasPrice,
    this.chainId,
    this.accessList,
    this.blobVersionedHashes,
    this.maxFeePerBlobGas,
  });

  @override
  int get hashCode =>
      nonce.hashCode ^
      from.hashCode ^
      to.hashCode ^
      value.hashCode ^
      gasLimit.hashCode ^
      data.hashCode ^
      maxFeePerGas.hashCode ^
      maxPriorityFeePerGas.hashCode ^
      gasPrice.hashCode ^
      chainId.hashCode ^
      accessList.hashCode ^
      blobVersionedHashes.hashCode ^
      maxFeePerBlobGas.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TransactionRequestEVM &&
          runtimeType == other.runtimeType &&
          nonce == other.nonce &&
          from == other.from &&
          to == other.to &&
          value == other.value &&
          gasLimit == other.gasLimit &&
          data == other.data &&
          maxFeePerGas == other.maxFeePerGas &&
          maxPriorityFeePerGas == other.maxPriorityFeePerGas &&
          gasPrice == other.gasPrice &&
          chainId == other.chainId &&
          accessList == other.accessList &&
          blobVersionedHashes == other.blobVersionedHashes &&
          maxFeePerBlobGas == other.maxFeePerBlobGas;
}

class TransactionRequestInfo {
  final TransactionMetadataInfo metadata;
  final ChainType chainType;
  final TransactionRequestScilla? scilla;
  final TransactionRequestEVM? evm;

  const TransactionRequestInfo({
    required this.metadata,
    required this.chainType,
    this.scilla,
    this.evm,
  });

  @override
  int get hashCode =>
      metadata.hashCode ^ chainType.hashCode ^ scilla.hashCode ^ evm.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TransactionRequestInfo &&
          runtimeType == other.runtimeType &&
          metadata == other.metadata &&
          chainType == other.chainType &&
          scilla == other.scilla &&
          evm == other.evm;
}

class TransactionRequestScilla {
  final int chainId;
  final BigInt nonce;
  final BigInt gasPrice;
  final BigInt gasLimit;
  final String toAddr;
  final BigInt amount;
  final String code;
  final String data;

  const TransactionRequestScilla({
    required this.chainId,
    required this.nonce,
    required this.gasPrice,
    required this.gasLimit,
    required this.toAddr,
    required this.amount,
    required this.code,
    required this.data,
  });

  @override
  int get hashCode =>
      chainId.hashCode ^
      nonce.hashCode ^
      gasPrice.hashCode ^
      gasLimit.hashCode ^
      toAddr.hashCode ^
      amount.hashCode ^
      code.hashCode ^
      data.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TransactionRequestScilla &&
          runtimeType == other.runtimeType &&
          chainId == other.chainId &&
          nonce == other.nonce &&
          gasPrice == other.gasPrice &&
          gasLimit == other.gasLimit &&
          toAddr == other.toAddr &&
          amount == other.amount &&
          code == other.code &&
          data == other.data;
}
