// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'ftoken.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

class FinalOutputInfo {
  final String name;
  final String address;
  final FTokenInfo? token;
  final String delegAmt;
  final String rewards;
  final String claimableAmount;
  final double? votePower;
  final double? apr;
  final double? commission;
  final String? totalRewards;
  final String? totalStake;
  final String? totalNetworkStake;
  final String? version;
  final BigInt? unbondingPeriod;
  final String tag;
  final BigInt? currentBlock;
  final List<PendingWithdrawalInfo> pendingWithdrawals;
  final List<ZilValidatorInfo> validators;
  final bool hide_;
  final int uptime;
  final bool canStake;

  const FinalOutputInfo({
    required this.name,
    required this.address,
    this.token,
    required this.delegAmt,
    required this.rewards,
    required this.claimableAmount,
    this.votePower,
    this.apr,
    this.commission,
    this.totalRewards,
    this.totalStake,
    this.totalNetworkStake,
    this.version,
    this.unbondingPeriod,
    required this.tag,
    this.currentBlock,
    required this.pendingWithdrawals,
    required this.validators,
    required this.hide_,
    required this.uptime,
    required this.canStake,
  });

  @override
  int get hashCode =>
      name.hashCode ^
      address.hashCode ^
      token.hashCode ^
      delegAmt.hashCode ^
      rewards.hashCode ^
      claimableAmount.hashCode ^
      votePower.hashCode ^
      apr.hashCode ^
      commission.hashCode ^
      totalRewards.hashCode ^
      totalStake.hashCode ^
      totalNetworkStake.hashCode ^
      version.hashCode ^
      unbondingPeriod.hashCode ^
      tag.hashCode ^
      currentBlock.hashCode ^
      pendingWithdrawals.hashCode ^
      validators.hashCode ^
      hide_.hashCode ^
      uptime.hashCode ^
      canStake.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FinalOutputInfo &&
          runtimeType == other.runtimeType &&
          name == other.name &&
          address == other.address &&
          token == other.token &&
          delegAmt == other.delegAmt &&
          rewards == other.rewards &&
          claimableAmount == other.claimableAmount &&
          votePower == other.votePower &&
          apr == other.apr &&
          commission == other.commission &&
          totalRewards == other.totalRewards &&
          totalStake == other.totalStake &&
          totalNetworkStake == other.totalNetworkStake &&
          version == other.version &&
          unbondingPeriod == other.unbondingPeriod &&
          tag == other.tag &&
          currentBlock == other.currentBlock &&
          pendingWithdrawals == other.pendingWithdrawals &&
          validators == other.validators &&
          hide_ == other.hide_ &&
          uptime == other.uptime &&
          canStake == other.canStake;
}

class PendingWithdrawalInfo {
  final String amount;
  final BigInt withdrawalBlock;
  final bool claimable;

  const PendingWithdrawalInfo({
    required this.amount,
    required this.withdrawalBlock,
    required this.claimable,
  });

  @override
  int get hashCode =>
      amount.hashCode ^ withdrawalBlock.hashCode ^ claimable.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PendingWithdrawalInfo &&
          runtimeType == other.runtimeType &&
          amount == other.amount &&
          withdrawalBlock == other.withdrawalBlock &&
          claimable == other.claimable;
}

class ZilValidatorInfo {
  final String futureStake;
  final String pendingWithdrawals;
  final String rewardAddress;
  final bool status;

  const ZilValidatorInfo({
    required this.futureStake,
    required this.pendingWithdrawals,
    required this.rewardAddress,
    required this.status,
  });

  @override
  int get hashCode =>
      futureStake.hashCode ^
      pendingWithdrawals.hashCode ^
      rewardAddress.hashCode ^
      status.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ZilValidatorInfo &&
          runtimeType == other.runtimeType &&
          futureStake == other.futureStake &&
          pendingWithdrawals == other.pendingWithdrawals &&
          rewardAddress == other.rewardAddress &&
          status == other.status;
}
