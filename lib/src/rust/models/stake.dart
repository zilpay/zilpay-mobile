// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'ftoken.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

class FinalOutputInfo {
  final String name;
  final String address;
  final FTokenInfo? token;
  final String delegAmt;
  final String rewards;
  final BigInt? tvl;
  final double? votePower;
  final double? apr;
  final double? price;
  final double? commission;
  final String tag;
  final BigInt? currentBlock;
  final List<PendingWithdrawalInfo> pendingWithdrawals;
  final bool hide_;
  final int uptime;
  final bool canStake;

  const FinalOutputInfo({
    required this.name,
    required this.address,
    this.token,
    required this.delegAmt,
    required this.rewards,
    this.tvl,
    this.votePower,
    this.apr,
    this.price,
    this.commission,
    required this.tag,
    this.currentBlock,
    required this.pendingWithdrawals,
    required this.hide_,
    required this.uptime,
    required this.canStake,
  });

  @override
  int get hashCode =>
      name.hashCode ^
      address.hashCode ^
      token.hashCode ^
      delegAmt.hashCode ^
      rewards.hashCode ^
      tvl.hashCode ^
      votePower.hashCode ^
      apr.hashCode ^
      price.hashCode ^
      commission.hashCode ^
      tag.hashCode ^
      currentBlock.hashCode ^
      pendingWithdrawals.hashCode ^
      hide_.hashCode ^
      uptime.hashCode ^
      canStake.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FinalOutputInfo &&
          runtimeType == other.runtimeType &&
          name == other.name &&
          address == other.address &&
          token == other.token &&
          delegAmt == other.delegAmt &&
          rewards == other.rewards &&
          tvl == other.tvl &&
          votePower == other.votePower &&
          apr == other.apr &&
          price == other.price &&
          commission == other.commission &&
          tag == other.tag &&
          currentBlock == other.currentBlock &&
          pendingWithdrawals == other.pendingWithdrawals &&
          hide_ == other.hide_ &&
          uptime == other.uptime &&
          canStake == other.canStake;
}

class PendingWithdrawalInfo {
  final String amount;
  final BigInt withdrawalBlock;
  final bool claimable;

  const PendingWithdrawalInfo({
    required this.amount,
    required this.withdrawalBlock,
    required this.claimable,
  });

  @override
  int get hashCode =>
      amount.hashCode ^ withdrawalBlock.hashCode ^ claimable.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PendingWithdrawalInfo &&
          runtimeType == other.runtimeType &&
          amount == other.amount &&
          withdrawalBlock == other.withdrawalBlock &&
          claimable == other.claimable;
}
