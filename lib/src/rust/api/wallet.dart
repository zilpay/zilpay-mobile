// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.6.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../models/account.dart';
import '../models/ftoken.dart';
import '../models/settings.dart';
import '../models/wallet.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<List<WalletInfo>> getWallets() =>
    RustLib.instance.api.crateApiWalletGetWallets();

Future<(String, String)> addBip39Wallet(
        {required String password,
        required String mnemonicStr,
        required List<(BigInt, String)> accounts,
        required String passphrase,
        required String walletName,
        required String biometricType,
        required BigInt provider,
        required List<String> identifiers}) =>
    RustLib.instance.api.crateApiWalletAddBip39Wallet(
        password: password,
        mnemonicStr: mnemonicStr,
        accounts: accounts,
        passphrase: passphrase,
        walletName: walletName,
        biometricType: biometricType,
        provider: provider,
        identifiers: identifiers);

Future<(String, String)> addSkWallet(
        {required String sk,
        required String password,
        required String walletName,
        required String biometricType,
        required List<String> identifiers,
        required BigInt provider}) =>
    RustLib.instance.api.crateApiWalletAddSkWallet(
        sk: sk,
        password: password,
        walletName: walletName,
        biometricType: biometricType,
        identifiers: identifiers,
        provider: provider);

Future<void> addNextBip39Account(
        {required BigInt walletIndex,
        required BigInt accountIndex,
        required String name,
        required String passphrase,
        required List<String> identifiers,
        String? password,
        String? sessionCipher}) =>
    RustLib.instance.api.crateApiWalletAddNextBip39Account(
        walletIndex: walletIndex,
        accountIndex: accountIndex,
        name: name,
        passphrase: passphrase,
        identifiers: identifiers,
        password: password,
        sessionCipher: sessionCipher);

Future<void> selectAccount(
        {required BigInt walletIndex, required BigInt accountIndex}) =>
    RustLib.instance.api.crateApiWalletSelectAccount(
        walletIndex: walletIndex, accountIndex: accountIndex);
