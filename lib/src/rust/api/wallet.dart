// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.6.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../models/account.dart';
import '../models/ftoken.dart';
import '../models/settings.dart';
import '../models/wallet.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<List<WalletInfo>> getWallets() =>
    RustLib.instance.api.crateApiWalletGetWallets();

Future<(String, String)> addBip39Wallet(
        {required Bip39AddWalletParams params,
        required WalletSettingsInfo walletSettings,
        required List<FTokenInfo> ftokens}) =>
    RustLib.instance.api.crateApiWalletAddBip39Wallet(
        params: params, walletSettings: walletSettings, ftokens: ftokens);

Future<(String, String)> addSkWallet(
        {required AddSKWalletParams params,
        required WalletSettingsInfo walletSettings,
        required List<FTokenInfo> ftokens}) =>
    RustLib.instance.api.crateApiWalletAddSkWallet(
        params: params, walletSettings: walletSettings, ftokens: ftokens);

Future<void> addNextBip39Account(
        {required BigInt walletIndex,
        required BigInt accountIndex,
        required String name,
        required String passphrase,
        required List<String> identifiers,
        String? password,
        String? sessionCipher}) =>
    RustLib.instance.api.crateApiWalletAddNextBip39Account(
        walletIndex: walletIndex,
        accountIndex: accountIndex,
        name: name,
        passphrase: passphrase,
        identifiers: identifiers,
        password: password,
        sessionCipher: sessionCipher);

Future<void> selectAccount(
        {required BigInt walletIndex, required BigInt accountIndex}) =>
    RustLib.instance.api.crateApiWalletSelectAccount(
        walletIndex: walletIndex, accountIndex: accountIndex);

class AddSKWalletParams {
  final String sk;
  final String password;
  final String walletName;
  final String biometricType;
  final List<String> identifiers;
  final BigInt provider;

  const AddSKWalletParams({
    required this.sk,
    required this.password,
    required this.walletName,
    required this.biometricType,
    required this.identifiers,
    required this.provider,
  });

  @override
  int get hashCode =>
      sk.hashCode ^
      password.hashCode ^
      walletName.hashCode ^
      biometricType.hashCode ^
      identifiers.hashCode ^
      provider.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is AddSKWalletParams &&
          runtimeType == other.runtimeType &&
          sk == other.sk &&
          password == other.password &&
          walletName == other.walletName &&
          biometricType == other.biometricType &&
          identifiers == other.identifiers &&
          provider == other.provider;
}

class Bip39AddWalletParams {
  final String password;
  final String mnemonicStr;
  final List<(BigInt, String)> accounts;
  final String passphrase;
  final String walletName;
  final String biometricType;
  final BigInt provider;
  final List<String> identifiers;

  const Bip39AddWalletParams({
    required this.password,
    required this.mnemonicStr,
    required this.accounts,
    required this.passphrase,
    required this.walletName,
    required this.biometricType,
    required this.provider,
    required this.identifiers,
  });

  @override
  int get hashCode =>
      password.hashCode ^
      mnemonicStr.hashCode ^
      accounts.hashCode ^
      passphrase.hashCode ^
      walletName.hashCode ^
      biometricType.hashCode ^
      provider.hashCode ^
      identifiers.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Bip39AddWalletParams &&
          runtimeType == other.runtimeType &&
          password == other.password &&
          mnemonicStr == other.mnemonicStr &&
          accounts == other.accounts &&
          passphrase == other.passphrase &&
          walletName == other.walletName &&
          biometricType == other.biometricType &&
          provider == other.provider &&
          identifiers == other.identifiers;
}
