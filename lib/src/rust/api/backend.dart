// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../models/account.dart';
import '../models/background.dart';
import '../models/ftoken.dart';
import '../models/notification.dart';
import '../models/provider.dart';
import '../models/settings.dart';
import '../models/wallet.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `decrypt`, `generate_key`

Future<(String, String)> loadOldDatabaseAndroid() =>
    RustLib.instance.api.crateApiBackendLoadOldDatabaseAndroid();

Future<(String, String)> loadOldDatabaseIos({required String baseDir}) =>
    RustLib.instance.api.crateApiBackendLoadOldDatabaseIos(baseDir: baseDir);

Future<String> tryRestoreRkstorage(
        {required String vaultJson, required String password}) =>
    RustLib.instance.api.crateApiBackendTryRestoreRkstorage(
        vaultJson: vaultJson, password: password);

Future<BackgroundState> loadService({required String path}) =>
    RustLib.instance.api.crateApiBackendLoadService(path: path);

Future<void> stopService() => RustLib.instance.api.crateApiBackendStopService();

Future<bool> isServiceRunning() =>
    RustLib.instance.api.crateApiBackendIsServiceRunning();

Future<void> stopBlockWorker() =>
    RustLib.instance.api.crateApiBackendStopBlockWorker();

Stream<BlockEvent> startBlockWorker({required BigInt walletIndex}) =>
    RustLib.instance.api
        .crateApiBackendStartBlockWorker(walletIndex: walletIndex);

Future<BackgroundState> getData() =>
    RustLib.instance.api.crateApiBackendGetData();

class BlockEvent {
  final BigInt? blockNumber;
  final String? error;

  const BlockEvent({
    this.blockNumber,
    this.error,
  });

  @override
  int get hashCode => blockNumber.hashCode ^ error.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is BlockEvent &&
          runtimeType == other.runtimeType &&
          blockNumber == other.blockNumber &&
          error == other.error;
}
