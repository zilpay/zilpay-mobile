Project Path: modals

Source Tree:

```
modals
├── list_selector.dart
├── secret_recovery_modal.dart
├── transaction_details_modal.dart
├── qr_scanner_modal.dart
├── backup_confirmation_modal.dart
├── manage_connections.dart
├── ledger_connect_dialog.dart
├── select_address.dart
├── manage_tokens.dart
├── add_chain.dart
├── transfer.dart
├── watch_asset_modal.dart
├── select_token.dart
├── password_change.dart
├── delete_wallet.dart
├── argon2.dart
├── add_contect.dart
├── app_connect.dart
├── wallet_header.dart
└── sign_message.dart

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/list_selector.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:zilpay/state/app_state.dart';

class ListItem {
  final String title;
  final String? subtitle;
  final String? iconPath;

  ListItem({
    required this.title,
    this.subtitle,
    this.iconPath,
  });
}

void showListSelectorModal({
  required BuildContext context,
  required String title,
  required List<ListItem> items,
  required int selectedIndex,
  required Function(int) onItemSelected,
}) {
  showModalBottomSheet<void>(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (BuildContext context) {
      return Padding(
        padding: EdgeInsets.only(
          bottom: MediaQuery.of(context).viewInsets.bottom,
        ),
        child: _ListSelectorModalContent(
          title: title,
          items: items,
          selectedIndex: selectedIndex,
          onItemSelected: onItemSelected,
        ),
      );
    },
  );
}

class _ListSelectorModalContent extends StatefulWidget {
  final String title;
  final List<ListItem> items;
  final int selectedIndex;
  final Function(int) onItemSelected;

  const _ListSelectorModalContent({
    required this.title,
    required this.items,
    required this.selectedIndex,
    required this.onItemSelected,
  });

  @override
  State<_ListSelectorModalContent> createState() =>
      _ListSelectorModalContentState();
}

class _ListSelectorModalContentState extends State<_ListSelectorModalContent> {
  late int _selectedIndex;

  @override
  void initState() {
    super.initState();
    _selectedIndex = widget.selectedIndex;
  }

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;
    final bottomPadding = MediaQuery.of(context).padding.bottom;

    return Container(
      constraints: BoxConstraints(
        maxHeight: MediaQuery.of(context).size.height * 0.7,
      ),
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
        border: Border.all(color: theme.modalBorder, width: 2),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.2),
            blurRadius: 10,
            offset: const Offset(0, -2),
          ),
        ],
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            width: 36,
            height: 4,
            margin: const EdgeInsets.symmetric(vertical: 16),
            decoration: BoxDecoration(
              color: theme.modalBorder,
              borderRadius: BorderRadius.circular(2),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(16),
            child: Text(
              widget.title,
              style: TextStyle(
                color: theme.textPrimary,
                fontSize: 20,
                fontWeight: FontWeight.w600,
              ),
            ),
          ),
          Divider(height: 1, color: theme.textSecondary.withValues(alpha: 0.1)),
          Flexible(
            child: ListView.separated(
              shrinkWrap: true,
              padding: EdgeInsets.zero,
              itemCount: widget.items.length,
              separatorBuilder: (context, index) => Divider(
                height: 1,
                color: theme.textSecondary.withValues(alpha: 0.1),
              ),
              itemBuilder: (context, index) {
                final item = widget.items[index];
                final isSelected = _selectedIndex == index;

                return InkWell(
                  onTap: () {
                    setState(() {
                      _selectedIndex = index;
                    });
                    widget.onItemSelected(index);
                    Navigator.pop(context);
                  },
                  child: Padding(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 16,
                      vertical: 12,
                    ),
                    child: Row(
                      children: [
                        if (item.iconPath != null) ...[
                          SvgPicture.asset(
                            item.iconPath!,
                            width: 24,
                            height: 24,
                            colorFilter: ColorFilter.mode(
                              theme.textPrimary,
                              BlendMode.srcIn,
                            ),
                          ),
                          const SizedBox(width: 16),
                        ],
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Text(
                                item.title,
                                style: TextStyle(
                                  color: theme.textPrimary,
                                  fontSize: 16,
                                  fontWeight: isSelected
                                      ? FontWeight.w600
                                      : FontWeight.w400,
                                ),
                              ),
                              if (item.subtitle != null) ...[
                                const SizedBox(height: 4),
                                Text(
                                  item.subtitle!,
                                  style: TextStyle(
                                    color: theme.textSecondary,
                                    fontSize: 14,
                                  ),
                                ),
                              ],
                            ],
                          ),
                        ),
                        if (isSelected)
                          SvgPicture.asset(
                            'assets/icons/ok.svg',
                            width: 24,
                            height: 24,
                            colorFilter: ColorFilter.mode(
                              theme.primaryPurple,
                              BlendMode.srcIn,
                            ),
                          ),
                      ],
                    ),
                  ),
                );
              },
            ),
          ),
          SizedBox(height: bottomPadding),
        ],
      ),
    );
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/secret_recovery_modal.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/mixins/wallet_type.dart';
import 'package:zilpay/state/app_state.dart';
import '../../components/button.dart';
import '../../theme/app_theme.dart';

void showSecretRecoveryModal({
  required BuildContext context,
  required AppTheme theme,
}) {
  showModalBottomSheet<void>(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (context) => _SecretRecoveryModal(theme: theme),
  );
}

class _SecretRecoveryModal extends StatelessWidget {
  final AppTheme theme;

  const _SecretRecoveryModal({required this.theme});

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Container(
        constraints: BoxConstraints(
          maxHeight: MediaQuery.sizeOf(context).height * 0.9,
        ),
        decoration: BoxDecoration(
          color: theme.cardBackground,
          borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
          border: Border.all(color: theme.modalBorder, width: 2),
        ),
        child: SingleChildScrollView(
          physics: const BouncingScrollPhysics(),
          padding: EdgeInsets.only(
            bottom: MediaQuery.viewInsetsOf(context).bottom + 16,
          ),
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const SizedBox(height: 16),
                _buildDragHandle(),
                const SizedBox(height: 16),
                _buildContent(context),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildDragHandle() {
    return Center(
      child: Container(
        width: 36,
        height: 4,
        decoration: BoxDecoration(
          color: theme.modalBorder,
          borderRadius: BorderRadius.circular(2),
        ),
      ),
    );
  }

  Widget _buildContent(BuildContext context) {
    return Consumer<AppState>(
      builder: (context, appState, _) {
        final walletType = appState.wallet!.walletType;
        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            if (walletType.contains(WalletType.SecretPhrase.name)) ...[
              _buildOption(
                context: context,
                title: 'Reveal Secret Recovery Phrase',
                description:
                    'If you ever change browsers or move computers, you will need '
                    'this Secret Recovery Phrase to access your accounts. Save '
                    'them somewhere safe and secret.',
                buttonText: 'Reveal',
                onPressed: () => _onRevealPhrase(context),
              ),
              const SizedBox(height: 24),
            ],
            if (walletType.contains(WalletType.SecretKey.name) ||
                walletType.contains(WalletType.SecretPhrase.name)) ...[
              _buildOption(
                context: context,
                title: 'Show Private Keys',
                description:
                    'Warning: Never disclose this key. Anyone with your private '
                    'keys can steal any assets held in your account.',
                buttonText: 'Export',
                onPressed: () => _onShowPrivateKeys(context),
              ),
              const SizedBox(height: 16),
            ],
          ],
        );
      },
    );
  }

  Widget _buildOption({
    required BuildContext context,
    required String title,
    required String description,
    required String buttonText,
    required VoidCallback onPressed,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: TextStyle(
            color: theme.textPrimary,
            fontSize: 18,
            fontWeight: FontWeight.w500,
          ),
        ),
        const SizedBox(height: 8),
        Text(
          description,
          style: TextStyle(
            color: theme.textSecondary,
            fontSize: 14,
          ),
        ),
        const SizedBox(height: 16),
        SizedBox(
          width: double.infinity,
          child: CustomButton(
            text: buttonText,
            onPressed: onPressed,
            backgroundColor: Colors.red.withValues(alpha: 0.1),
            textColor: Colors.red,
            height: 48,
          ),
        ),
      ],
    );
  }

  void _onRevealPhrase(BuildContext context) {
    Navigator.of(context).pushNamed('/reveal_bip39');
  }

  void _onShowPrivateKeys(BuildContext context) {
    Navigator.of(context).pushNamed('/reveal_sk');
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/transaction_details_modal.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:blockies/blockies.dart';
import 'package:zilpay/components/copy_content.dart';
import 'package:zilpay/components/image_cache.dart';
import 'package:zilpay/config/ftokens.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/mixins/preprocess_url.dart';
import 'package:zilpay/src/rust/api/utils.dart';
import 'package:zilpay/src/rust/models/ftoken.dart';
import 'package:zilpay/src/rust/models/transactions/history.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/theme/app_theme.dart';

void showTransactionDetailsModal({
  required BuildContext context,
  required HistoricalTransactionInfo transaction,
}) {
  showModalBottomSheet<void>(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (BuildContext context) {
      return Padding(
        padding: EdgeInsets.only(
          bottom: MediaQuery.of(context).viewInsets.bottom,
        ),
        child: _TransactionDetailsModalContent(
          transaction: transaction,
        ),
      );
    },
  );
}

class _TransactionDetailsModalContent extends StatelessWidget {
  final HistoricalTransactionInfo transaction;

  const _TransactionDetailsModalContent({
    required this.transaction,
  });

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);

    final double headerHeight = 84.0;
    final double itemHeight = 60.0;
    final double bottomPadding = MediaQuery.of(context).padding.bottom;
    final int infoItemsCount = _getInfoItemsCount();
    final double totalContentHeight =
        headerHeight + (itemHeight * infoItemsCount) + bottomPadding;
    final double maxHeight = MediaQuery.of(context).size.height * 0.9;
    final double containerHeight = totalContentHeight.clamp(0.0, maxHeight);

    return Container(
      height: containerHeight,
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
        border: Border.all(color: theme.modalBorder, width: 2),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.2),
            blurRadius: 10,
            offset: const Offset(0, -2),
          ),
        ],
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          _buildHeader(theme, adaptivePadding),
          Expanded(
            child: SingleChildScrollView(
              padding: EdgeInsets.symmetric(
                horizontal: adaptivePadding,
                vertical: adaptivePadding / 2,
              ),
              child: Column(
                children: [
                  _buildTokenIcon(appState),
                  const SizedBox(height: 8),
                  _buildDetailItem(
                    context,
                    'Status',
                    _getStatusWidget(theme),
                    theme,
                  ),
                  _buildDetailItem(
                    context,
                    'Transaction Hash',
                    transaction.transactionHash,
                    theme,
                    isCopyable: true,
                  ),
                  _buildDetailItem(
                    context,
                    'Amount',
                    _formatAmount(appState),
                    theme,
                  ),
                  _buildDetailItem(
                    context,
                    'Sender',
                    transaction.sender,
                    theme,
                    isCopyable: true,
                  ),
                  _buildDetailItem(
                    context,
                    'Recipient',
                    transaction.recipient,
                    theme,
                    isCopyable: true,
                  ),
                  if (transaction.contractAddress != null)
                    _buildDetailItem(
                      context,
                      'Contract Address',
                      transaction.contractAddress!,
                      theme,
                      isCopyable: true,
                    ),
                  _buildDetailItem(
                    context,
                    'Timestamp',
                    _formatTimestamp(),
                    theme,
                  ),
                  if (transaction.blockNumber != null)
                    _buildDetailItem(
                      context,
                      'Block Number',
                      transaction.blockNumber.toString(),
                      theme,
                    ),
                  _buildDetailItem(
                    context,
                    'Fee',
                    _formatFee(appState),
                    theme,
                  ),
                  if (transaction.gasUsed != null)
                    _buildDetailItem(
                      context,
                      'Gas Used',
                      transaction.gasUsed.toString(),
                      theme,
                    ),
                  if (transaction.gasLimit != null)
                    _buildDetailItem(
                      context,
                      'Gas Limit',
                      '${transaction.gasLimit} Wei',
                      theme,
                    ),
                  if (transaction.gasPrice != null)
                    _buildDetailItem(
                      context,
                      'Gas Price',
                      _formatGasPrice(transaction.gasPrice!),
                      theme,
                    ),
                  if (transaction.effectiveGasPrice != null)
                    _buildDetailItem(
                      context,
                      'Effective Gas Price',
                      _formatGasPrice(transaction.effectiveGasPrice!),
                      theme,
                    ),
                  if (transaction.blobGasUsed != null)
                    _buildDetailItem(
                      context,
                      'Blob Gas Used',
                      transaction.blobGasUsed.toString(),
                      theme,
                    ),
                  if (transaction.blobGasPrice != null)
                    _buildDetailItem(
                      context,
                      'Blob Gas Price',
                      _formatGasPrice(transaction.blobGasPrice!),
                      theme,
                    ),
                  _buildDetailItem(
                    context,
                    'Nonce',
                    transaction.nonce.toString(),
                    theme,
                  ),
                  _buildDetailItem(
                    context,
                    'Chain Type',
                    transaction.chainType,
                    theme,
                  ),
                  _buildDetailItem(
                    context,
                    'Network',
                    _getNetworkName(appState, transaction.chainHash),
                    theme,
                  ),
                  if (transaction.error != null)
                    _buildDetailItem(
                      context,
                      'Error',
                      transaction.error!,
                      theme,
                    ),
                ],
              ),
            ),
          ),
          SizedBox(height: bottomPadding),
        ],
      ),
    );
  }

  Widget _buildHeader(AppTheme theme, double padding) {
    return Column(
      children: [
        Container(
          width: 36,
          height: 4,
          margin: EdgeInsets.symmetric(vertical: padding),
          decoration: BoxDecoration(
            color: theme.modalBorder,
            borderRadius: BorderRadius.circular(2),
          ),
        ),
        Padding(
          padding: EdgeInsets.symmetric(horizontal: padding),
          child: Text(
            transaction.title ?? 'Transaction Details',
            style: TextStyle(
              color: theme.textPrimary,
              fontSize: 20,
              fontWeight: FontWeight.w600,
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildTokenIcon(AppState appState) {
    final theme = appState.currentTheme;
    FTokenInfo? token;
    try {
      token = appState.wallet!.tokens.firstWhere((t) =>
          t.symbol == transaction.tokenInfo?.symbol &&
          t.addrType == appState.account?.addrType);
    } catch (e) {
      token = null;
    }

    return Container(
      width: 50,
      height: 50,
      decoration: BoxDecoration(
        shape: BoxShape.circle,
        border: Border.all(
          color: theme.primaryPurple.withValues(alpha: 0.1),
          width: 2,
        ),
      ),
      child: ClipOval(
        child: AsyncImage(
          url: transaction.icon ??
              (token != null
                  ? processTokenLogo(
                      token,
                      theme.value,
                    )
                  : null),
          width: 50,
          height: 50,
          fit: BoxFit.contain,
          errorWidget: Blockies(
            seed: transaction.transactionHash,
            color: theme.secondaryPurple,
            bgColor: theme.primaryPurple,
            spotColor: theme.background,
            size: 8,
          ),
          loadingWidget: const Center(
            child: CircularProgressIndicator(
              strokeWidth: 2,
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildDetailItem(
    BuildContext context,
    String label,
    dynamic value,
    AppTheme theme, {
    bool isCopyable = false,
  }) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 6),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Expanded(
            flex: 2,
            child: Text(
              label,
              style: TextStyle(
                color: theme.textSecondary.withValues(alpha: 0.7),
                fontSize: 14,
                fontWeight: FontWeight.w500,
              ),
            ),
          ),
          Expanded(
            flex: 3,
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisAlignment: MainAxisAlignment.end,
              children: [
                if (isCopyable)
                  CopyContent(
                    address: value.toString(),
                    isShort: true,
                  )
                else
                  Expanded(
                    child: value is Widget
                        ? value
                        : Text(
                            value.toString(),
                            style: TextStyle(
                              color: theme.textPrimary,
                              fontSize: 14,
                              fontWeight: FontWeight.w400,
                            ),
                            textAlign: TextAlign.right,
                            overflow: TextOverflow.ellipsis,
                          ),
                  ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _getStatusWidget(AppTheme theme) {
    switch (transaction.status) {
      case TransactionStatusInfo.pending:
        return Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            const SizedBox(
              width: 16,
              height: 16,
              child: CircularProgressIndicator(
                strokeWidth: 2,
                valueColor: AlwaysStoppedAnimation<Color>(Colors.orange),
              ),
            ),
            const SizedBox(width: 8),
            Text(
              'Pending',
              style: TextStyle(
                color: Colors.orange,
                fontSize: 14,
                fontWeight: FontWeight.w400,
              ),
            ),
          ],
        );
      case TransactionStatusInfo.confirmed:
        return Text(
          'Confirmed',
          style: TextStyle(
            color: theme.success,
            fontSize: 14,
            fontWeight: FontWeight.w400,
          ),
        );
      case TransactionStatusInfo.rejected:
        return Text(
          'Rejected',
          style: TextStyle(
            color: theme.danger,
            fontSize: 14,
            fontWeight: FontWeight.w400,
          ),
        );
    }
  }

  String _formatAmount(AppState appState) {
    final token = appState.wallet?.tokens.first;
    final amount = transaction.tokenInfo?.value ?? transaction.amount;
    final decimals = (transaction.tokenInfo?.decimals ?? token?.decimals) ?? 1;
    final symbol = (transaction.tokenInfo?.symbol ?? token?.symbol) ?? "";

    return intlNumberFormating(
      value: amount,
      decimals: decimals,
      localeStr: '',
      symbolStr: symbol,
      threshold: baseThreshold,
      compact: false,
    );
  }

  String _formatFee(AppState appState) {
    final token = appState.wallet!.tokens.first;
    final decimals = transaction.chainType == "EVM" && token.decimals < 18
        ? 18
        : token.decimals;

    return intlNumberFormating(
      value: transaction.fee.toString(),
      decimals: decimals,
      localeStr: '',
      symbolStr: token.symbol,
      threshold: baseThreshold,
      compact: true,
    );
  }

  String _formatTimestamp() {
    final dateTime = DateTime.fromMillisecondsSinceEpoch(
      transaction.timestamp.toInt() * 1000,
    );

    String day = dateTime.day.toString().padLeft(2, '0');
    String month = dateTime.month.toString().padLeft(2, '0');
    String year = dateTime.year.toString();
    String hour = dateTime.hour.toString().padLeft(2, '0');
    String minute = dateTime.minute.toString().padLeft(2, '0');

    return '$day.$month.$year $hour:$minute';
  }

  String _formatGasPrice(BigInt price) {
    double gwei = price / BigInt.from(10).pow(9);
    if (gwei < 1) {
      return '$price Wei';
    } else {
      return '${gwei.toString()} Gwei';
    }
  }

  String _getNetworkName(AppState appState, BigInt chainHash) {
    final chain = appState.getChain(chainHash)?.chain;
    return chain ?? 'Unknown Network ($chainHash)';
  }

  int _getInfoItemsCount() {
    int count = 11; // Базовые обязательные поля + Network вместо ChainHash
    if (transaction.contractAddress != null) count++;
    if (transaction.blockNumber != null) count++;
    if (transaction.gasUsed != null) count++;
    if (transaction.gasLimit != null) count++;
    if (transaction.gasPrice != null) count++;
    if (transaction.effectiveGasPrice != null) count++;
    if (transaction.blobGasUsed != null) count++;
    if (transaction.blobGasPrice != null) count++;
    if (transaction.error != null) count++;
    return count;
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/qr_scanner_modal.dart`:

```dart
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:mobile_scanner/mobile_scanner.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/theme/app_theme.dart';

void showQRScannerModal({
  required BuildContext context,
  required Function(String) onScanned,
}) {
  showModalBottomSheet<void>(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (BuildContext context) {
      return FractionallySizedBox(
        heightFactor: 0.94,
        child: _QRScannerModalContent(onScanned: onScanned),
      );
    },
  );
}

class _QRScannerModalContent extends StatefulWidget {
  final Function(String) onScanned;

  const _QRScannerModalContent({required this.onScanned});

  @override
  State<_QRScannerModalContent> createState() => _QRScannerModalContentState();
}

class _QRScannerModalContentState extends State<_QRScannerModalContent>
    with WidgetsBindingObserver {
  MobileScannerController? controller;
  StreamSubscription<BarcodeCapture>? _subscription;
  bool hasError = false;
  String errorMessage = '';
  bool isPermissionGranted = false;
  bool isCameraInitialized = false;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    _requestCameraPermission();
  }

  Future<void> _requestCameraPermission() async {
    final status = await Permission.camera.request();
    if (status.isGranted) {
      setState(() {
        isPermissionGranted = true;
      });
      _initializeScanner();
    } else {
      setState(() {
        hasError = true;
        errorMessage = 'Camera permission denied';
      });
    }
  }

  Future<void> _initializeScanner() async {
    try {
      controller = MobileScannerController(
        facing: CameraFacing.back,
        detectionSpeed: DetectionSpeed.normal,
        formats: [BarcodeFormat.qrCode],
        autoStart: false,
      );

      await Future.delayed(const Duration(milliseconds: 300));

      if (!mounted) return;

      await controller!.start();

      _subscription = controller!.barcodes.listen(_handleBarcode);

      await Future.delayed(const Duration(milliseconds: 500));

      if (!mounted) return;

      setState(() {
        isCameraInitialized = true;
        hasError = false;
      });
    } catch (e) {
      if (!mounted) return;
      setState(() {
        hasError = true;
        errorMessage = 'Camera initialization error: ${e.toString()}';
      });
    }
  }

  void _handleBarcode(BarcodeCapture capture) {
    if (!mounted) return;

    final List<Barcode> barcodes = capture.barcodes;
    if (barcodes.isNotEmpty) {
      final String? code = barcodes.first.rawValue;
      if (code != null) {
        widget.onScanned(code);
        Navigator.pop(context);
      }
    }
  }

  Future<void> _toggleTorch() async {
    await controller?.toggleTorch();
    setState(() {});
  }

  Future<void> _openAppSettings() async {
    await openAppSettings();
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    _subscription?.cancel();
    controller?.dispose();
    super.dispose();
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    if (hasError || !isPermissionGranted || controller == null) return;

    switch (state) {
      case AppLifecycleState.resumed:
        _reactivateCamera();
        break;
      case AppLifecycleState.inactive:
      case AppLifecycleState.paused:
        _deactivateCamera();
        break;
      default:
        break;
    }
  }

  Future<void> _reactivateCamera() async {
    try {
      _subscription?.cancel();

      await controller?.start();

      if (!mounted) return;

      _subscription = controller?.barcodes.listen(_handleBarcode);

      setState(() {
        isCameraInitialized = true;
      });
    } catch (e) {
      if (!mounted) return;
      setState(() {
        hasError = true;
        errorMessage = 'Failed to restart camera: ${e.toString()}';
      });
    }
  }

  void _deactivateCamera() {
    _subscription?.cancel();
    controller?.stop();
    if (mounted) {
      setState(() {
        isCameraInitialized = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;

    return AnimatedContainer(
      duration: const Duration(milliseconds: 300),
      curve: Curves.easeInOut,
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
        border: Border.all(color: theme.modalBorder, width: 2),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.2),
            blurRadius: 10,
            offset: const Offset(0, -2),
          ),
        ],
      ),
      child: Column(
        children: [
          _buildHeader(theme),
          const SizedBox(height: 20),
          !isPermissionGranted
              ? _buildPermissionDeniedView()
              : hasError
                  ? _buildErrorView()
                  : _buildScannerView(theme),
          const SizedBox(height: 30),
        ],
      ),
    );
  }

  Widget _buildHeader(AppTheme theme) {
    return Column(
      children: [
        Container(
          width: 36,
          height: 4,
          margin: const EdgeInsets.symmetric(vertical: 16),
          decoration: BoxDecoration(
            color: theme.modalBorder,
            borderRadius: BorderRadius.circular(2),
          ),
        ),
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              const Text('Scan',
                  style: TextStyle(
                      color: Colors.white,
                      fontSize: 20,
                      fontWeight: FontWeight.w600)),
              IconButton(
                onPressed: () => Navigator.pop(context),
                icon: SvgPicture.asset(
                  'assets/icons/close.svg',
                  width: 24,
                  height: 24,
                  colorFilter:
                      ColorFilter.mode(theme.textPrimary, BlendMode.srcIn),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildPermissionDeniedView() {
    return Center(
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 24),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            SvgPicture.asset(
              'assets/icons/camera.svg',
              width: 64,
              height: 64,
              colorFilter:
                  const ColorFilter.mode(Colors.white54, BlendMode.srcIn),
            ),
            const SizedBox(height: 24),
            const Text('Camera Permission Required',
                style: TextStyle(
                    color: Colors.white,
                    fontSize: 20,
                    fontWeight: FontWeight.w600)),
            const SizedBox(height: 12),
            const Text('Please grant camera permission to use the scanner.',
                textAlign: TextAlign.center,
                style: TextStyle(color: Colors.white70, fontSize: 16)),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: _openAppSettings,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.white,
                padding:
                    const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12)),
              ),
              child: const Text('Open Settings',
                  style: TextStyle(
                      color: Colors.black,
                      fontSize: 16,
                      fontWeight: FontWeight.w600)),
            ),
            const SizedBox(height: 16),
            TextButton(
              onPressed: _requestCameraPermission,
              child: const Text('Retry',
                  style: TextStyle(color: Colors.white70, fontSize: 16)),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildErrorView() {
    return Center(
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 24),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            SvgPicture.asset(
              'assets/icons/error.svg',
              width: 64,
              height: 64,
              colorFilter:
                  const ColorFilter.mode(Colors.white54, BlendMode.srcIn),
            ),
            const SizedBox(height: 24),
            const Text('Camera Error',
                style: TextStyle(
                    color: Colors.white,
                    fontSize: 20,
                    fontWeight: FontWeight.w600)),
            const SizedBox(height: 12),
            Text(errorMessage,
                textAlign: TextAlign.center,
                style: const TextStyle(color: Colors.white70, fontSize: 16)),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: _initializeScanner,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.white,
                padding:
                    const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12)),
              ),
              child: const Text('Retry',
                  style: TextStyle(
                      color: Colors.black,
                      fontSize: 16,
                      fontWeight: FontWeight.w600)),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildScannerView(AppTheme theme) {
    return Expanded(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Container(
            width: MediaQuery.of(context).size.width * 0.8,
            height: MediaQuery.of(context).size.width * 0.8,
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(16),
              border: Border.all(color: Colors.white, width: 3),
            ),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(13),
              child: controller != null && isCameraInitialized
                  ? MobileScanner(
                      controller: controller!,
                      fit: BoxFit.cover,
                    )
                  : Container(
                      color: Colors.black,
                      child: const Center(
                        child: CircularProgressIndicator(
                          color: Colors.white,
                        ),
                      ),
                    ),
            ),
          ),
          const SizedBox(height: 24),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              IconButton(
                icon: controller?.torchEnabled == true
                    ? SvgPicture.asset(
                        'assets/icons/torch_on.svg',
                        width: 32,
                        height: 32,
                        colorFilter: ColorFilter.mode(
                            theme.textPrimary, BlendMode.srcIn),
                      )
                    : SvgPicture.asset(
                        'assets/icons/torch_off.svg',
                        width: 32,
                        height: 32,
                        colorFilter: ColorFilter.mode(
                            theme.textPrimary, BlendMode.srcIn),
                      ),
                onPressed: _toggleTorch,
              ),
            ],
          ),
        ],
      ),
    );
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/backup_confirmation_modal.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/theme/app_theme.dart';

void showBackupConfirmationModal({
  required BuildContext context,
  required Function(bool) onConfirmed,
}) {
  showModalBottomSheet<void>(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (BuildContext context) {
      return Padding(
        padding: EdgeInsets.only(
          bottom: MediaQuery.of(context).viewInsets.bottom,
        ),
        child: _BackupConfirmationContent(
          onConfirmed: onConfirmed,
        ),
      );
    },
  );
}

class _BackupConfirmationContent extends StatefulWidget {
  final Function(bool) onConfirmed;

  const _BackupConfirmationContent({
    required this.onConfirmed,
  });

  @override
  State<_BackupConfirmationContent> createState() =>
      _BackupConfirmationContentState();
}

class _BackupConfirmationContentState
    extends State<_BackupConfirmationContent> {
  final Map<String, bool> _confirmations = {
    'I have written down all': false,
    'I have safely stored the backup': false,
    'I am sure I won\'t lose the backup': false,
    'I understand not to share these words with anyone': false,
  };

  void _updateConfirmation(String key, bool value) {
    setState(() {
      _confirmations[key] = value;
    });

    if (_confirmations.values.every((confirmed) => confirmed)) {
      widget.onConfirmed(true);
      Navigator.of(context).pop();
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<AppState>(context).currentTheme;

    return Container(
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
        border: Border.all(color: theme.modalBorder, width: 2),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.2),
            blurRadius: 10,
            offset: const Offset(0, -2),
          ),
        ],
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            width: 36,
            height: 4,
            margin: const EdgeInsets.symmetric(vertical: 16),
            decoration: BoxDecoration(
              color: theme.modalBorder,
              borderRadius: BorderRadius.circular(2),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(16),
            child: Text(
              'Backup Confirmation',
              style: TextStyle(
                color: theme.textPrimary,
                fontSize: 20,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
          ..._confirmations.entries.map((entry) => _ConfirmationItem(
                text: entry.key,
                isConfirmed: entry.value,
                onConfirmed: (value) => _updateConfirmation(entry.key, value),
                theme: theme,
              )),
          const SizedBox(height: 24),
        ],
      ),
    );
  }
}

class _ConfirmationItem extends StatelessWidget {
  final String text;
  final bool isConfirmed;
  final Function(bool) onConfirmed;
  final AppTheme theme;

  const _ConfirmationItem({
    required this.text,
    required this.isConfirmed,
    required this.onConfirmed,
    required this.theme,
  });

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 2),
      child: Container(
        decoration: BoxDecoration(
          color: isConfirmed
              ? theme.background
              : theme.background.withValues(alpha: 0.2),
          borderRadius: BorderRadius.circular(12),
        ),
        child: CheckboxListTile(
          title: Text(
            text,
            style: TextStyle(
              color: theme.textSecondary,
              fontSize: 16,
            ),
          ),
          value: isConfirmed,
          onChanged: (value) => onConfirmed(value!),
          controlAffinity: ListTileControlAffinity.leading,
          activeColor: theme.primaryPurple,
        ),
      ),
    );
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/manage_connections.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:zilpay/components/image_cache.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/state/app_state.dart';

void showConnectedDappsModal({
  required BuildContext context,
  Function(String)? onDappDisconnect,
}) {
  showModalBottomSheet(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (BuildContext context) {
      return Padding(
        padding: EdgeInsets.only(
          bottom: MediaQuery.of(context).viewInsets.bottom,
        ),
        child: _ConnectedDappsModalContent(
          onDappDisconnect: onDappDisconnect,
        ),
      );
    },
  );
}

class _ConnectedDappsModalContent extends StatefulWidget {
  final Function(String)? onDappDisconnect;

  const _ConnectedDappsModalContent({
    this.onDappDisconnect,
  });

  @override
  State<_ConnectedDappsModalContent> createState() =>
      _ConnectedDappsModalContentState();
}

class _ConnectedDappsModalContentState
    extends State<_ConnectedDappsModalContent> {
  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<AppState>(context).currentTheme;
    final appState = Provider.of<AppState>(context);
    final connectedDapps = appState.connections;

    final filteredDapps = connectedDapps
        .where((dapp) =>
            dapp.domain.toLowerCase().contains(_searchQuery.toLowerCase()) ||
            dapp.title.toLowerCase().contains(_searchQuery.toLowerCase()))
        .toList();

    return Container(
      height: MediaQuery.of(context).size.height * 0.7,
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
        border: Border.all(color: theme.modalBorder, width: 2),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.2),
            blurRadius: 10,
            offset: const Offset(0, -2),
          ),
        ],
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            width: 36,
            height: 4,
            margin: EdgeInsets.symmetric(vertical: 16),
            decoration: BoxDecoration(
              color: theme.modalBorder,
              borderRadius: BorderRadius.circular(2),
            ),
          ),
          Padding(
            padding: EdgeInsets.all(16),
            child: SmartInput(
              controller: _searchController,
              hint: 'Search DApps',
              onChanged: (value) => setState(() => _searchQuery = value),
              borderColor: theme.textPrimary,
              focusedBorderColor: theme.primaryPurple,
              height: 48,
              fontSize: 16,
              padding: EdgeInsets.symmetric(horizontal: 16),
              leftIconPath: 'assets/icons/search.svg',
              rightIconPath: "assets/icons/close.svg",
              onRightIconTap: () {
                _searchController.text = "";
              },
            ),
          ),
          Expanded(
            child: filteredDapps.isEmpty
                ? Center(
                    child: Text(
                      'No connected DApps',
                      style: TextStyle(
                        color: theme.textSecondary,
                        fontSize: 16,
                      ),
                    ),
                  )
                : ListView.builder(
                    padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                    itemCount: filteredDapps.length,
                    itemBuilder: (context, index) {
                      final dapp = filteredDapps[index];
                      return Column(
                        children: [
                          _DappListItem(
                            name: dapp.title,
                            url: dapp.domain,
                            iconUrl: dapp.favicon ?? "",
                            lastConnected: fromLargeBigInt(dapp.lastConnected),
                            onDisconnect: () =>
                                widget.onDappDisconnect?.call(dapp.domain),
                          ),
                          if (index < filteredDapps.length - 1)
                            Divider(
                              height: 1,
                              color: theme.textSecondary.withValues(alpha: 0.1),
                            ),
                        ],
                      );
                    },
                  ),
          ),
          SizedBox(height: MediaQuery.of(context).padding.bottom),
        ],
      ),
    );
  }

  DateTime fromLargeBigInt(BigInt timestamp) {
    return DateTime.fromMillisecondsSinceEpoch(int.parse(timestamp.toString()));
  }
}

class _DappListItem extends StatelessWidget {
  final String name;
  final String url;
  final String iconUrl;
  final DateTime lastConnected;
  final VoidCallback? onDisconnect;

  const _DappListItem({
    required this.name,
    required this.url,
    required this.iconUrl,
    required this.lastConnected,
    this.onDisconnect,
  });

  @override
  Widget build(BuildContext context) {
    final appTheme = Provider.of<AppState>(context).currentTheme;
    const double iconSize = 40.0;

    return Container(
      margin: EdgeInsets.zero,
      padding: EdgeInsets.symmetric(vertical: 12),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          AsyncImage(
            url: iconUrl,
            width: iconSize,
            height: iconSize,
            fit: BoxFit.cover,
            loadingWidget: Container(
              width: iconSize,
              height: iconSize,
              decoration: BoxDecoration(
                color: appTheme.textSecondary.withValues(alpha: 0.1),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Center(
                child: SizedBox(
                  width: 20,
                  height: 20,
                  child: CircularProgressIndicator(
                    strokeWidth: 2,
                    color: appTheme.textSecondary.withValues(alpha: 0.5),
                  ),
                ),
              ),
            ),
            errorWidget: Container(
              width: iconSize,
              height: iconSize,
              decoration: BoxDecoration(
                color: appTheme.textSecondary.withValues(alpha: 0.1),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Center(
                child: Icon(
                  Icons.link,
                  size: 24,
                  color: appTheme.textSecondary.withValues(alpha: 0.5),
                ),
              ),
            ),
          ),
          SizedBox(width: 12),
          Expanded(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  name,
                  style: TextStyle(
                    color: appTheme.textPrimary,
                    fontSize: 16,
                    fontWeight: FontWeight.w500,
                    height: 1.2,
                  ),
                ),
                SizedBox(height: 4),
                Text(
                  url,
                  style: TextStyle(
                    color: appTheme.textSecondary,
                    fontSize: 14,
                    height: 1.2,
                  ),
                ),
                SizedBox(height: 2),
                Text(
                  'Connected ${_formatLastConnected(lastConnected)}',
                  style: TextStyle(
                    color: appTheme.textSecondary,
                    fontSize: 12,
                    height: 1.2,
                  ),
                ),
              ],
            ),
          ),
          IconButton(
            onPressed: onDisconnect,
            icon: SvgPicture.asset(
              'assets/icons/disconnect.svg',
              width: 24,
              height: 24,
              colorFilter: ColorFilter.mode(appTheme.danger, BlendMode.srcIn),
            ),
          ),
        ],
      ),
    );
  }

  String _formatLastConnected(DateTime date) {
    final now = DateTime.now();
    final difference = now.difference(date);

    if (difference.inDays > 0) {
      return '${difference.inDays}d ago';
    } else if (difference.inHours > 0) {
      return '${difference.inHours}h ago';
    } else if (difference.inMinutes > 0) {
      return '${difference.inMinutes}m ago';
    } else {
      return 'just now';
    }
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/ledger_connect_dialog.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:zilpay/components/biometric_switch.dart';
import 'package:zilpay/components/counter.dart';
import 'package:zilpay/components/load_button.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/services/biometric_service.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/state/app_state.dart';

class LedgerConnectDialog extends StatefulWidget {
  final String? walletName;
  final AuthMethod biometricType;
  final VoidCallback? onClose;
  final Future<void> Function(int, String, bool)? onConnect;

  const LedgerConnectDialog({
    super.key,
    this.onClose,
    this.onConnect,
    this.biometricType = AuthMethod.none,
    this.walletName = 'Ledger',
  });

  @override
  State<LedgerConnectDialog> createState() => _LedgerConnectDialog();
}

class _LedgerConnectDialog extends State<LedgerConnectDialog> {
  final _btnController = RoundedLoadingButtonController();
  final _walletNameController = TextEditingController();

  int _index = 0;
  bool _loading = false;
  bool _useBiometric = false;
  String _errorMessage = '';

  @override
  void initState() {
    super.initState();
    _walletNameController.text = widget.walletName!;
  }

  Future<void> _onConnect() async {
    if (_walletNameController.text.trim().isEmpty) {
      setState(() => _errorMessage = 'Wallet name cannot be empty');
      return;
    }

    if (_walletNameController.text.length > 24) {
      setState(() => _errorMessage = 'Wallet name is too long');
      return;
    }

    if (widget.onConnect != null) {
      try {
        setState(() {
          _loading = true;
          _errorMessage = '';
        });
        _btnController.start();

        await widget.onConnect!(
            _index, _walletNameController.text, _useBiometric);

        _btnController.success();
        await Future.delayed(const Duration(milliseconds: 300));
      } catch (e) {
        setState(() => _errorMessage = e.toString());
        _btnController.error();
        await Future.delayed(const Duration(milliseconds: 500));
      } finally {
        if (mounted) {
          setState(() => _loading = false);
          _btnController.reset();
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<AppState>(context).currentTheme;
    final viewInsets = MediaQuery.of(context).viewInsets;
    final screenHeight = MediaQuery.of(context).size.height;
    final maxHeight = screenHeight - (screenHeight * 0.1);

    return AnimatedContainer(
      duration: const Duration(milliseconds: 20),
      padding: EdgeInsets.only(bottom: viewInsets.bottom),
      child: Wrap(
        children: [
          Container(
            constraints: BoxConstraints(
              maxHeight: maxHeight,
            ),
            decoration: BoxDecoration(
              color: theme.background,
              borderRadius: const BorderRadius.only(
                topLeft: Radius.circular(16),
                topRight: Radius.circular(16),
              ),
            ),
            child: SingleChildScrollView(
              physics: const ClampingScrollPhysics(),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  const SizedBox(height: 8),
                  Container(
                    width: 36,
                    height: 4,
                    decoration: BoxDecoration(
                      color: Colors.grey[600],
                      borderRadius: BorderRadius.circular(2),
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.all(24),
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        const SizedBox(height: 16),
                        SmartInput(
                          controller: _walletNameController,
                          hint: "Wallet Name",
                          fontSize: 18,
                          height: 50,
                          padding: const EdgeInsets.symmetric(horizontal: 20),
                          focusedBorderColor: theme.primaryPurple,
                          disabled: _loading,
                          onChanged: (value) {
                            if (_errorMessage.isNotEmpty) {
                              setState(() => _errorMessage = '');
                            }
                          },
                        ),
                        if (_errorMessage.isNotEmpty) ...[
                          const SizedBox(height: 8),
                          Text(
                            _errorMessage,
                            style: TextStyle(
                              color: theme.danger,
                              fontSize: 14,
                              fontWeight: FontWeight.w500,
                            ),
                            textAlign: TextAlign.center,
                          ),
                        ],
                        const SizedBox(height: 16),
                        Counter(
                          iconSize: 32,
                          iconColor: theme.textPrimary,
                          animationDuration: const Duration(milliseconds: 300),
                          numberStyle: TextStyle(
                            fontSize: 32,
                            fontWeight: FontWeight.bold,
                            color: theme.textPrimary,
                          ),
                          initialValue: 0,
                          disabled: _loading,
                          onChanged: !_loading
                              ? (value) {
                                  setState(() {
                                    _index = value;
                                  });
                                }
                              : null,
                        ),
                        const SizedBox(height: 16),
                        BiometricSwitch(
                          biometricType: widget.biometricType,
                          value: _useBiometric,
                          disabled: _loading,
                          onChanged: (value) {
                            setState(() => _useBiometric = value);
                          },
                        ),
                        const SizedBox(height: 16),
                        SizedBox(
                          width: double.infinity,
                          child: RoundedLoadingButton(
                            controller: _btnController,
                            onPressed: _onConnect,
                            successIcon: SvgPicture.asset(
                              'assets/icons/ok.svg',
                              width: 24,
                              height: 24,
                              colorFilter: ColorFilter.mode(
                                theme.textPrimary,
                                BlendMode.srcIn,
                              ),
                            ),
                            child: Text(
                              'Connect',
                              style: TextStyle(
                                color: theme.textPrimary,
                                fontSize: 18,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                        ),
                        const SizedBox(height: 16),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/select_address.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/mixins/addr.dart';
import 'package:zilpay/mixins/jazzicon.dart';
import 'package:zilpay/modals/qr_scanner_modal.dart';
import 'package:zilpay/src/rust/api/methods.dart';
import 'package:zilpay/src/rust/api/qrcode.dart';
import 'package:zilpay/src/rust/models/qrcode.dart';
import 'package:zilpay/state/app_state.dart';

void showAddressSelectModal({
  required BuildContext context,
  required Function(QRcodeScanResultInfo, String) onAddressSelected,
}) {
  showModalBottomSheet<void>(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (context) => Padding(
      padding:
          EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom),
      child: _AddressSelectModalContent(onAddressSelected: onAddressSelected),
    ),
  );
}

class _AddressSelectModalContent extends StatefulWidget {
  final Function(QRcodeScanResultInfo, String) onAddressSelected;

  const _AddressSelectModalContent({required this.onAddressSelected});

  @override
  State<_AddressSelectModalContent> createState() =>
      _AddressSelectModalContentState();
}

class _AddressSelectModalContentState
    extends State<_AddressSelectModalContent> {
  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<AppState>(context).currentTheme;
    final appState = Provider.of<AppState>(context);

    return Container(
      constraints:
          BoxConstraints(maxHeight: MediaQuery.sizeOf(context).height * 0.9),
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
        border: Border.all(color: theme.modalBorder, width: 2),
      ),
      child: SafeArea(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              width: 36,
              height: 4,
              margin: const EdgeInsets.symmetric(vertical: 16),
              decoration: BoxDecoration(
                color: theme.modalBorder,
                borderRadius: BorderRadius.circular(2),
              ),
            ),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16),
              child: Text(
                'Select Address',
                style: TextStyle(
                  color: theme.textPrimary,
                  fontSize: 20,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(16),
              child: SmartInput(
                controller: _searchController,
                hint: 'Search / Address / ENS',
                leftIconPath: 'assets/icons/qrcode.svg',
                onChanged: (value) async {
                  try {
                    bool isAddress = await isCryptoAddress(addr: value);
                    if (isAddress && mounted) {
                      QRcodeScanResultInfo params =
                          QRcodeScanResultInfo(recipient: value);
                      widget.onAddressSelected(params, "Unknown");
                      // ignore: use_build_context_synchronously
                      Navigator.pop(context);
                    } else {
                      setState(() => _searchQuery = value.toLowerCase());
                    }
                  } catch (_) {
                    //
                  }
                },
                onLeftIconTap: () => showQRScannerModal(
                    context: context, onScanned: _parseQrcodRes),
                borderColor: theme.textPrimary,
                focusedBorderColor: theme.primaryPurple,
                height: 48,
                fontSize: 16,
                padding: const EdgeInsets.symmetric(horizontal: 16),
              ),
            ),
            Expanded(
              child: SingleChildScrollView(
                physics: const ClampingScrollPhysics(),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    _buildSection(appState, 'My Accounts',
                        _getFilteredMyAccounts(appState)),
                    _buildSection(appState, 'Address Book',
                        _getFilteredAddressBook(appState)),
                    _buildSection(
                        appState, 'History', _getFilteredHistory(appState)),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSection(AppState state, String title, List<AddressItem> items) {
    if (items.isEmpty) return const SizedBox.shrink();
    final theme = state.currentTheme;
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            title,
            style: TextStyle(
              color: theme.textSecondary,
              fontSize: 14,
              fontWeight: FontWeight.w600,
            ),
          ),
          const SizedBox(height: 8),
          ...List.generate(items.length, (index) {
            final item = items[index];
            return Column(
              children: [
                _buildAddressItem(state, item),
                if (index < items.length - 1)
                  Divider(
                    height: 1,
                    thickness: 1,
                    color: theme.textSecondary.withValues(alpha: 0.1),
                    endIndent: 16,
                  ),
              ],
            );
          }),
        ],
      ),
    );
  }

  Widget _buildAddressItem(AppState state, AddressItem item) {
    final theme = state.currentTheme;

    return InkWell(
      onTap: () {
        QRcodeScanResultInfo params =
            QRcodeScanResultInfo(recipient: item.address);
        widget.onAddressSelected(params, item.name);
        Navigator.pop(context);
      },
      child: Container(
        height: 72,
        padding: const EdgeInsets.all(12),
        child: Row(
          children: [
            ClipOval(
              child: SizedBox(
                width: 40,
                height: 40,
                child: Jazzicon(
                  diameter: 30,
                  seed: item.address,
                  theme: theme,
                  shapeCount: 4,
                ),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(
                    item.name,
                    style: TextStyle(
                      color: theme.textPrimary,
                      fontSize: 16,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                  Text(
                    shortenAddress(item.address),
                    style: TextStyle(
                      color: theme.textSecondary,
                      fontSize: 14,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _parseQrcodRes(String data) async {
    try {
      QRcodeScanResultInfo parsed = await parseQrcodeStr(data: data);
      if (mounted) widget.onAddressSelected(parsed, "Unknown");
    } catch (e) {
      debugPrint("error parse qrcode: $e");
    }
  }

  List<AddressItem> _getFilteredMyAccounts(AppState appState) {
    return appState.wallet?.accounts
            .where((account) =>
                account.name.toLowerCase().contains(_searchQuery) ||
                account.addr.toLowerCase().contains(_searchQuery))
            .map((account) =>
                AddressItem(name: account.name, address: account.addr))
            .toList() ??
        [];
  }

  List<AddressItem> _getFilteredAddressBook(AppState appState) {
    return appState.book
        .where((account) =>
            account.name.toLowerCase().contains(_searchQuery) ||
            account.addr.toLowerCase().contains(_searchQuery))
        .map(
            (account) => AddressItem(name: account.name, address: account.addr))
        .toList();
  }

  List<AddressItem> _getFilteredHistory(AppState appState) {
    return [];
  }
}

class AddressItem {
  final String name;
  final String address;

  AddressItem({required this.name, required this.address});
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/manage_tokens.dart`:

```dart
import 'package:blockies/blockies.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/enable_card.dart';
import 'package:zilpay/components/image_cache.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/mixins/preprocess_url.dart';
import 'package:zilpay/src/rust/api/token.dart';
import 'package:zilpay/state/app_state.dart';
import '../theme/app_theme.dart' as theme;

void showManageTokensModal({
  required BuildContext context,
  VoidCallback? onAddToken,
  Function(String)? onTokenToggle,
}) {
  showModalBottomSheet<void>(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (BuildContext context) {
      return Padding(
        padding: EdgeInsets.only(
          bottom: MediaQuery.of(context).viewInsets.bottom,
        ),
        child: _ManageTokensModalContent(
          onAddToken: onAddToken,
        ),
      );
    },
  );
}

class _ManageTokensModalContent extends StatefulWidget {
  final VoidCallback? onAddToken;

  const _ManageTokensModalContent({
    this.onAddToken,
  });

  @override
  State<_ManageTokensModalContent> createState() =>
      _ManageTokensModalContentState();
}

class _ManageTokensModalContentState extends State<_ManageTokensModalContent> {
  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<AppState>(context).currentTheme;
    final appState = Provider.of<AppState>(context);
    final tokens = appState.wallet?.tokens ?? [];

    final double headerHeight = 84.0;
    final double searchBarHeight = 80.0;
    final double tokenItemHeight = 56.0;
    final double bottomPadding = MediaQuery.of(context).padding.bottom;

    final double totalContentHeight = headerHeight +
        searchBarHeight +
        (tokens.length * tokenItemHeight) +
        bottomPadding;

    final double maxHeight = MediaQuery.of(context).size.height * 0.7;
    final double containerHeight = totalContentHeight.clamp(0.0, maxHeight);

    return Container(
      height: containerHeight,
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
        border: Border.all(color: theme.modalBorder, width: 2),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.2),
            blurRadius: 10,
            offset: const Offset(0, -2),
          ),
        ],
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            width: 36,
            height: 4,
            margin: const EdgeInsets.symmetric(vertical: 16),
            decoration: BoxDecoration(
              color: theme.modalBorder,
              borderRadius: BorderRadius.circular(2),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(16),
            child: SmartInput(
              controller: _searchController,
              hint: 'Search',
              leftIconPath: 'assets/icons/plus.svg',
              onLeftIconTap: widget.onAddToken,
              onChanged: (value) => setState(() => _searchQuery = value),
              borderColor: theme.textPrimary,
              focusedBorderColor: theme.primaryPurple,
              height: 48,
              fontSize: 16,
              padding: const EdgeInsets.symmetric(horizontal: 16),
            ),
          ),
          Expanded(
            child: ListView(
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              children: _buildTokenItems(theme, appState),
            ),
          ),
          SizedBox(height: bottomPadding),
        ],
      ),
    );
  }

  List<Widget> _buildTokenItems(theme.AppTheme theme, AppState appState) {
    if (appState.wallet == null) {
      return [];
    }

    return appState.wallet!.tokens
        .where((token) =>
            token.name.toLowerCase().contains(_searchQuery.toLowerCase()) ||
            token.symbol.toLowerCase().contains(_searchQuery.toLowerCase()))
        .where((token) => token.addrType == appState.account?.addrType)
        .map((token) {
      final isEnabled = !token.default_;
      return EnableCard(
        title: token.symbol,
        name: token.name,
        iconWidget: AsyncImage(
          url: processTokenLogo(token, theme.value),
          width: 32.0,
          height: 32.0,
          fit: BoxFit.contain,
          errorWidget: Blockies(
            seed: token.addr,
            color: theme.secondaryPurple,
            bgColor: theme.primaryPurple,
            spotColor: theme.background,
            size: 8,
          ),
          loadingWidget: const Center(
            child: CircularProgressIndicator(
              strokeWidth: 2,
            ),
          ),
        ),
        isDefault: token.default_,
        isEnabled: isEnabled,
        onToggle: (value) async {
          if (!value) {
            final int index =
                appState.wallet!.tokens.indexWhere((t) => t.addr == token.addr);

            if (index == -1) {
              return;
            }

            try {
              await rmFtoken(
                walletIndex: BigInt.from(appState.selectedWallet),
                tokenIndex: BigInt.from(index),
              );
              await appState.syncData();
            } catch (e) {
              debugPrint("remove token error: $e");
            }
          }
        },
      );
    }).toList();
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/add_chain.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/enable_card.dart';
import 'package:zilpay/components/image_cache.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/mixins/preprocess_url.dart';
import 'package:zilpay/src/rust/models/provider.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/components/swipe_button.dart';
import 'package:zilpay/theme/app_theme.dart';

void showAddChainModal({
  required BuildContext context,
  required String title,
  required String appIcon,
  required NetworkConfigInfo chain,
  required VoidCallback onConfirm,
  required VoidCallback onReject,
}) {
  showModalBottomSheet<List<String>>(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (context) => _AddChainModalContent(
      onConfirm: onConfirm,
      title: title,
      appIcon: appIcon,
      chain: chain,
    ),
  ).then((selectedRpcs) => onReject());
}

class _AddChainModalContent extends StatefulWidget {
  final String title;
  final String appIcon;
  final NetworkConfigInfo chain;
  final VoidCallback onConfirm;

  const _AddChainModalContent({
    required this.title,
    required this.appIcon,
    required this.chain,
    required this.onConfirm,
  });

  @override
  State<_AddChainModalContent> createState() => _AddChainModalContentState();
}

class _AddChainModalContentState extends State<_AddChainModalContent> {
  late List<bool> rpcSelections;

  @override
  void initState() {
    super.initState();
    rpcSelections = List.filled(widget.chain.rpc.length, true);
  }

  String _extractDomain(String url) {
    Uri uri = Uri.parse(url);
    return uri.host.isNotEmpty ? uri.host : url;
  }

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;
    final bottomPadding = MediaQuery.of(context).padding.bottom;
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);

    return Container(
      constraints:
          BoxConstraints(maxHeight: MediaQuery.of(context).size.height * 0.9),
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
        border: Border.all(color: theme.modalBorder, width: 2),
      ),
      child: Column(
        children: [
          Padding(
            padding: EdgeInsets.all(adaptivePadding),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.center,
              children: children(theme),
            ),
          ),
          Expanded(
            child: ListView.builder(
              padding: EdgeInsets.symmetric(horizontal: 16),
              itemCount: widget.chain.rpc.length,
              itemBuilder: (context, index) {
                final rpc = widget.chain.rpc[index];
                final domain = _extractDomain(rpc);
                return EnableCard(
                  title: domain,
                  name: rpc,
                  isDefault: false,
                  isEnabled: rpcSelections[index],
                  onToggle: (value) {
                    setState(() {
                      rpcSelections[index] = value;
                    });
                  },
                );
              },
            ),
          ),
          Container(
            padding: EdgeInsets.fromLTRB(16, 8, 16, 8 + bottomPadding),
            decoration: BoxDecoration(
              color: theme.cardBackground,
              boxShadow: const [
                BoxShadow(
                    color: Colors.black12,
                    blurRadius: 4,
                    offset: Offset(0, -2)),
              ],
            ),
            child: Column(
              children: [
                Text(
                  'Beware of network scams and security risks.',
                  style: TextStyle(color: theme.danger, fontSize: 14),
                ),
                SizedBox(height: adaptivePadding),
                Center(
                  child: SwipeButton(
                    text: 'Approve',
                    backgroundColor: theme.primaryPurple,
                    textColor: theme.textPrimary,
                    onSwipeComplete: () async {
                      widget.onConfirm();
                      final selected = widget.chain.rpc
                          .asMap()
                          .entries
                          .where((entry) => rpcSelections[entry.key])
                          .map((entry) => entry.value)
                          .toList();
                      Navigator.pop(context, selected);
                    },
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  List<Widget> children(AppTheme theme) {
    return [
      Container(
        width: 36,
        height: 4,
        margin: const EdgeInsets.symmetric(vertical: 8),
        decoration: BoxDecoration(
          color: theme.modalBorder,
          borderRadius: BorderRadius.circular(2),
        ),
      ),
      Text(
        widget.title,
        style: TextStyle(
          color: theme.textPrimary,
          fontSize: 20,
          fontWeight: FontWeight.w600,
        ),
      ),
      Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Container(
            width: 64,
            height: 64,
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              border: Border.all(color: theme.primaryPurple, width: 2),
            ),
            child: ClipOval(
              child: AsyncImage(
                url: widget.appIcon,
                width: 64,
                height: 64,
                fit: BoxFit.cover,
                loadingWidget: Center(
                  child: CircularProgressIndicator(
                    strokeWidth: 2,
                    color: theme.primaryPurple,
                  ),
                ),
                errorWidget: Icon(
                  Icons.broken_image,
                  color: theme.textSecondary,
                  size: 24,
                ),
              ),
            ),
          ),
          const SizedBox(width: 12),
          SvgPicture.asset(
            'assets/icons/right_circle_arrow.svg',
            width: 32,
            height: 32,
            colorFilter: ColorFilter.mode(theme.textPrimary, BlendMode.srcIn),
          ),
          const SizedBox(width: 12),
          Container(
            width: 64,
            height: 64,
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              border: Border.all(color: theme.primaryPurple, width: 2),
            ),
            child: ClipOval(
              child: AsyncImage(
                url: preprocessUrl(widget.chain.logo, theme.value),
                width: 64,
                height: 64,
                fit: BoxFit.cover,
                loadingWidget: Center(
                  child: CircularProgressIndicator(
                    strokeWidth: 2,
                    color: theme.primaryPurple,
                  ),
                ),
                errorWidget: SvgPicture.asset(
                  'assets/icons/warning.svg',
                  width: 24,
                  height: 24,
                  colorFilter: ColorFilter.mode(
                    theme.warning,
                    BlendMode.srcIn,
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
      const SizedBox(height: 8),
      Text(
        widget.chain.name,
        style: TextStyle(
          color: theme.textPrimary,
          fontSize: 18,
          fontWeight: FontWeight.w500,
        ),
        textAlign: TextAlign.center,
      ),
      const SizedBox(height: 16),
      Container(
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          border: Border.all(color: theme.textSecondary.withValues(alpha: 0.2)),
          borderRadius: BorderRadius.circular(8),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Details',
              style: TextStyle(
                color: theme.textPrimary,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 8),
            Text('Network Name: ${widget.chain.name}',
                style: TextStyle(color: theme.textSecondary)),
            Text('Currency Symbol: ${widget.chain.shortName}',
                style: TextStyle(color: theme.textSecondary)),
            Text('Chain ID: ${widget.chain.chainId}',
                style: TextStyle(color: theme.textSecondary)),
            if (widget.chain.explorers.isNotEmpty)
              Text('Block Explorer: ${widget.chain.explorers.first.url}',
                  style: TextStyle(color: theme.textSecondary)),
          ],
        ),
      ),
    ];
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/transfer.dart`:

```dart
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/gas_eip1559.dart';
import 'package:zilpay/components/image_cache.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/components/swipe_button.dart';
import 'package:zilpay/components/token_transfer_amount.dart';
import 'package:zilpay/mixins/amount.dart';
import 'package:zilpay/mixins/preprocess_url.dart';
import 'package:zilpay/services/auth_guard.dart';
import 'package:zilpay/services/biometric_service.dart';
import 'package:zilpay/services/device.dart';
import 'package:zilpay/src/rust/api/transaction.dart';
import 'package:zilpay/src/rust/models/gas.dart';
import 'package:zilpay/src/rust/models/connection.dart';
import 'package:zilpay/src/rust/models/transactions/base_token.dart';
import 'package:zilpay/src/rust/models/transactions/evm.dart';
import 'package:zilpay/src/rust/models/transactions/history.dart';
import 'package:zilpay/src/rust/models/transactions/request.dart';
import 'package:zilpay/src/rust/models/transactions/scilla.dart';
import 'package:zilpay/state/app_state.dart';

void showConfirmTransactionModal({
  required BuildContext context,
  required TransactionRequestInfo tx,
  required String to,
  required String amount,
  required int tokenIndex,
  ColorsInfo? colors,
  required Function(HistoricalTransactionInfo) onConfirm,
  VoidCallback? onDismiss,
}) {
  showModalBottomSheet<void>(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (context) => _ConfirmTransactionContent(
      tx: tx,
      tokenIndex: tokenIndex,
      amount: amount,
      to: to,
      colors: colors,
      onConfirm: (tx) {
        onConfirm(tx);
        if (onDismiss != null) {
          onDismiss();
        }
      },
    ),
  ).then((_) {
    if (onDismiss != null) {
      onDismiss();
    }
  });
}

class _ConfirmTransactionContent extends StatefulWidget {
  final TransactionRequestInfo tx;
  final String to;
  final int tokenIndex;
  final String amount;
  final ColorsInfo? colors;
  final Function(HistoricalTransactionInfo) onConfirm;

  const _ConfirmTransactionContent({
    required this.tx,
    required this.amount,
    required this.to,
    required this.tokenIndex,
    this.colors,
    required this.onConfirm,
  });

  @override
  State<_ConfirmTransactionContent> createState() =>
      _ConfirmTransactionContentState();
}

class _ConfirmTransactionContentState
    extends State<_ConfirmTransactionContent> {
  final _passwordController = TextEditingController();
  final _passwordInputKey = GlobalKey<SmartInputState>();
  final _authService = AuthService();
  late final AuthGuard _authGuard;
  RequiredTxParamsInfo _txParamsInfo = RequiredTxParamsInfo(
    gasPrice: BigInt.zero,
    maxPriorityFee: BigInt.zero,
    feeHistory: GasFeeHistoryInfo(
      maxFee: BigInt.zero,
      priorityFee: BigInt.zero,
      baseFee: BigInt.zero,
    ),
    txEstimateGas: BigInt.zero,
    blobBaseFee: BigInt.zero,
    nonce: BigInt.zero,
  );
  bool _loading = false;
  String? _error;
  BigInt _maxPriorityFee = BigInt.zero;
  BigInt _gasPrice = BigInt.zero;
  bool _obscurePassword = true;
  Timer? _timerPooling;

  bool get isEVM => widget.tx.evm != null;
  bool get isScilla => widget.tx.scilla != null;

  @override
  void initState() {
    super.initState();
    _authGuard = context.read<AuthGuard>();
    _initGasPolling();
  }

  @override
  void dispose() {
    _passwordController.dispose();
    _timerPooling?.cancel();
    super.dispose();
  }

  bool get _isDisabled {
    return (_txParamsInfo.gasPrice == BigInt.zero &&
            _txParamsInfo.maxPriorityFee == BigInt.zero &&
            _txParamsInfo.txEstimateGas == BigInt.zero) ||
        _loading;
  }

  void _initGasPolling() {
    _fetchGasFee(true);
    final appState = context.read<AppState>();
    final chainHash = appState.account?.chainHash ?? BigInt.zero;
    int diffBlockTime =
        appState.getChain(chainHash)?.diffBlockTime.toInt() ?? 20;

    if (diffBlockTime < 10) {
      diffBlockTime = 10;
    }

    _timerPooling = Timer.periodic(
        Duration(seconds: diffBlockTime), (_) => _fetchGasFee(false));
  }

  Future<void> _fetchGasFee(bool initial) async {
    if (!mounted) return;
    final appState = context.read<AppState>();
    try {
      if (initial) _error = null;
      final gas = await caclGasFee(
        params: widget.tx,
        walletIndex: BigInt.from(appState.selectedWallet),
        accountIndex: appState.wallet!.selectedAccount,
      );
      if (mounted) {
        setState(() => _txParamsInfo = gas);
      }
    } catch (e) {
      debugPrint('Gas fee error: $e');
      if (initial && mounted) {
        setState(() => _error = e.toString());
      }
    }
  }

  TransactionRequestInfo _prepareTx() => isEVM
      ? TransactionRequestInfo(
          metadata: widget.tx.metadata,
          evm: TransactionRequestEVM(
            nonce: _txParamsInfo.nonce,
            from: widget.tx.evm!.from,
            to: widget.tx.evm!.to,
            value: widget.tx.evm!.value,
            data: widget.tx.evm!.data,
            chainId: widget.tx.evm!.chainId,
            accessList: widget.tx.evm!.accessList,
            blobVersionedHashes: widget.tx.evm!.blobVersionedHashes,
            maxFeePerBlobGas: widget.tx.evm!.maxFeePerBlobGas,
            maxPriorityFeePerGas: _maxPriorityFee,
            gasLimit: _txParamsInfo.txEstimateGas,
            gasPrice: _gasPrice,
            maxFeePerGas: (_txParamsInfo.feeHistory.baseFee * BigInt.two) +
                _maxPriorityFee,
          ),
        )
      : TransactionRequestInfo(
          metadata: widget.tx.metadata,
          scilla: TransactionRequestScilla(
            chainId: widget.tx.scilla!.chainId,
            nonce: _txParamsInfo.nonce + BigInt.one,
            gasPrice: _gasPrice,
            gasLimit: widget.tx.scilla!.gasLimit,
            toAddr: widget.tx.scilla!.toAddr,
            amount: widget.tx.scilla!.amount,
            code: widget.tx.scilla!.code,
            data: widget.tx.scilla!.data,
          ),
        );

  Future<bool> _authenticate() async => _authService.authenticate(
      allowPinCode: true, reason: 'Please authenticate');

  Future<HistoricalTransactionInfo?> _signAndSend(
      AppState appState, TransactionRequestInfo tx) async {
    final device = DeviceInfoService();
    final identifiers = await device.getDeviceIdentifiers();
    final wallet = appState.wallet!;
    final walletIndex = BigInt.from(appState.selectedWallet);
    final accountIndex = wallet.selectedAccount;

    if (wallet.authType != AuthMethod.none.name) {
      if (!await _authenticate()) return null;
      final session =
          await _authGuard.getSession(sessionKey: wallet.walletAddress);
      return await signSendTransactions(
        walletIndex: walletIndex,
        accountIndex: accountIndex,
        identifiers: identifiers,
        tx: tx,
        sessionCipher: session,
      );
    } else {
      return await signSendTransactions(
        walletIndex: walletIndex,
        accountIndex: accountIndex,
        identifiers: identifiers,
        tx: tx,
        password: _passwordController.text,
      );
    }
  }

  bool _checkBalance(AppState appState) {
    try {
      final token = appState.wallet!.tokens[widget.tokenIndex];
      final balance =
          BigInt.parse(token.balances[appState.wallet!.selectedAccount] ?? '0');
      return balance >= toWei(widget.amount, token.decimals);
    } catch (_) {
      return false;
    }
  }

  Color? _parseColor(String? colorString) {
    if (colorString == null) return null;
    try {
      return Color(int.parse(colorString.replaceFirst('#', '0xff')));
    } catch (e) {
      return null;
    }
  }

  @override
  Widget build(BuildContext context) {
    final appState = context.watch<AppState>();
    final theme = appState.currentTheme;

    final backgroundColor =
        _parseColor(widget.colors?.background) ?? theme.cardBackground;
    final primaryColor =
        _parseColor(widget.colors?.primary) ?? theme.primaryPurple;
    final secondaryColor =
        _parseColor(widget.colors?.secondary) ?? theme.textSecondary;
    final textColor = _parseColor(widget.colors?.text) ?? theme.textPrimary;

    return Container(
      constraints:
          BoxConstraints(maxHeight: MediaQuery.sizeOf(context).height * 0.9),
      decoration: BoxDecoration(
        color: backgroundColor,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
        border: Border.all(color: theme.modalBorder, width: 2),
      ),
      child: SafeArea(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              width: 36,
              height: 4,
              margin: const EdgeInsets.symmetric(vertical: 16),
              decoration: BoxDecoration(
                color: theme.modalBorder,
                borderRadius: BorderRadius.circular(2),
              ),
            ),
            Flexible(
              child: SingleChildScrollView(
                physics: const BouncingScrollPhysics(),
                padding: EdgeInsets.only(
                    bottom: MediaQuery.viewInsetsOf(context).bottom),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    if (_error != null)
                      Container(
                        margin: const EdgeInsets.symmetric(
                            horizontal: 16, vertical: 8),
                        padding: const EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: theme.danger.withValues(alpha: 0.1),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: Row(
                          children: [
                            SvgPicture.asset(
                              'assets/icons/warning.svg',
                              width: 24,
                              height: 24,
                              colorFilter: ColorFilter.mode(
                                  theme.danger, BlendMode.srcIn),
                            ),
                            const SizedBox(width: 8),
                            Expanded(
                                child: Text(_error!,
                                    style: TextStyle(
                                        color: theme.danger, fontSize: 14))),
                          ],
                        ),
                      ),
                    _buildTokenLogo(appState, primaryColor),
                    const SizedBox(height: 4),
                    _buildTransferDetails(appState, textColor, secondaryColor),
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 16),
                      child: GasEIP1559(
                        timeDiffBlock:
                            appState.chain?.diffBlockTime.toInt() ?? 10,
                        txParamsInfo: _txParamsInfo,
                        disabled: _isDisabled,
                        onChangeGasPrice: (gasPrice) =>
                            setState(() => _gasPrice = gasPrice),
                        onChangeMaxPriorityFee: (maxPriorityFee) =>
                            setState(() => _maxPriorityFee = maxPriorityFee),
                        primaryColor: primaryColor,
                        textColor: textColor,
                        secondaryColor: secondaryColor,
                      ),
                    ),
                    if (appState.wallet!.authType == AuthMethod.none.name)
                      Padding(
                        padding: const EdgeInsets.all(12),
                        child: SmartInput(
                          key: _passwordInputKey,
                          controller: _passwordController,
                          hint: 'Password',
                          fontSize: 18,
                          height: 56,
                          padding: const EdgeInsets.symmetric(horizontal: 20),
                          focusedBorderColor: primaryColor,
                          disabled: _isDisabled,
                          obscureText: _obscurePassword,
                          rightIconPath: _obscurePassword
                              ? 'assets/icons/close_eye.svg'
                              : 'assets/icons/open_eye.svg',
                          onRightIconTap: () => setState(
                              () => _obscurePassword = !_obscurePassword),
                          textColor: textColor,
                        ),
                      )
                    else
                      const SizedBox(height: 16),
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 16),
                      child: SwipeButton(
                        text: _error != null ? 'Unable to confirm' : 'Confirm',
                        disabled: _isDisabled,
                        onSwipeComplete: () async {
                          setState(() => _loading = true);
                          try {
                            if (!_checkBalance(appState)) {
                              throw Exception('Insufficient balance');
                            }
                            final tx = _prepareTx();
                            HistoricalTransactionInfo? sendedTx =
                                await _signAndSend(appState, tx);

                            if (mounted && sendedTx != null) {
                              widget.onConfirm(sendedTx);
                            }
                          } catch (e) {
                            setState(() => _error = e.toString());
                          } finally {
                            setState(() => _loading = false);
                          }
                        },
                        backgroundColor: primaryColor,
                        textColor: textColor,
                      ),
                    ),
                    SizedBox(
                        height: MediaQuery.viewInsetsOf(context).bottom > 0
                            ? 16
                            : 32),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTokenLogo(AppState state, Color primaryColor) {
    const imageSize = 54.0;
    final theme = state.currentTheme;
    final icon = widget.tx.metadata.icon;

    if (icon != null) {
      return Container(
        width: imageSize,
        height: imageSize,
        decoration: BoxDecoration(
          shape: BoxShape.circle,
          border:
              Border.all(color: primaryColor.withValues(alpha: 0.1), width: 2),
        ),
        child: ClipOval(
            child: AsyncImage(
                url: icon,
                width: imageSize,
                height: imageSize,
                fit: BoxFit.contain)),
      );
    }

    try {
      final token = state.wallet!.tokens
          .firstWhere((t) => t.symbol == widget.tx.metadata.tokenInfo?.symbol);
      return Container(
        width: imageSize,
        height: imageSize,
        decoration: BoxDecoration(
          shape: BoxShape.circle,
          border:
              Border.all(color: primaryColor.withValues(alpha: 0.1), width: 2),
        ),
        child: ClipOval(
          child: AsyncImage(
            url: processTokenLogo(token, theme.value),
            width: imageSize,
            height: imageSize,
            fit: BoxFit.contain,
          ),
        ),
      );
    } catch (_) {
      return const SizedBox.shrink();
    }
  }

  Widget _buildTransferDetails(
      AppState appState, Color textColor, Color secondaryColor) {
    try {
      final ftoken = appState.wallet!.tokens[widget.tokenIndex];
      BaseTokenInfo token = widget.tx.metadata.tokenInfo ??
          BaseTokenInfo(
              value: '', symbol: ftoken.symbol, decimals: ftoken.decimals);

      final signer = appState.account ?? (throw Exception('No active account'));
      return Padding(
        padding: const EdgeInsets.all(16),
        child: TokenTransferAmount(
          fromAddress: signer.addr,
          fromName: signer.name,
          toAddress: widget.to,
          amount: widget.amount,
          symbol: token.symbol,
          textColor: textColor,
          secondaryColor: secondaryColor,
        ),
      );
    } catch (e) {
      setState(() => _error = 'Failed to load transfer details');
      return const SizedBox.shrink();
    }
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/watch_asset_modal.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/image_cache.dart';
import 'package:zilpay/components/swipe_button.dart';
import 'package:zilpay/config/ftokens.dart';
import 'package:zilpay/src/rust/api/token.dart';
import 'package:zilpay/src/rust/api/utils.dart';
import 'package:zilpay/src/rust/models/ftoken.dart';
import 'package:zilpay/state/app_state.dart';

void showWatchAssetModal({
  required BuildContext context,
  required String tokenName,
  required String tokenSymbol,
  String? tokenIconUrl,
  required String tokenAddress,
  required String appTitle,
  required String appIcon,
  required Function(FTokenInfo) onConfirm,
  required Function() onCancel,
}) {
  showModalBottomSheet<void>(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (BuildContext context) {
      return Padding(
        padding:
            EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom),
        child: _WatchAssetModalContent(
          tokenAddress: tokenAddress,
          tokenName: tokenName,
          tokenSymbol: tokenSymbol,
          tokenIconUrl: tokenIconUrl,
          appTitle: appTitle,
          appIcon: appIcon,
          onConfirm: onConfirm,
          onCancel: onCancel,
        ),
      );
    },
  ).then((_) => onCancel.call());
}

class _WatchAssetModalContent extends StatefulWidget {
  final String tokenName;
  final String tokenSymbol;
  final String? tokenIconUrl;
  final String tokenAddress;
  final String appTitle;
  final String appIcon;
  final Function(FTokenInfo) onConfirm;
  final Function() onCancel;

  const _WatchAssetModalContent({
    required this.tokenName,
    required this.tokenAddress,
    required this.tokenSymbol,
    required this.appTitle,
    required this.appIcon,
    required this.onConfirm,
    required this.onCancel,
    this.tokenIconUrl,
  });

  @override
  State<_WatchAssetModalContent> createState() =>
      _WatchAssetModalContentState();
}

class _WatchAssetModalContentState extends State<_WatchAssetModalContent>
    with SingleTickerProviderStateMixin {
  bool _isLoadingBalance = true;
  FTokenInfo? _ftoken;
  String? _errorMessage;
  late AnimationController _controller;
  late Animation<double> _animation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 250),
      vsync: this,
    )..repeat(reverse: true);
    _animation = Tween<double>(begin: 0, end: 1).animate(_controller);
    _loadBalance();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  Future<void> _loadBalance() async {
    final appState = Provider.of<AppState>(context, listen: false);
    try {
      FTokenInfo meta = await fetchTokenMeta(
        addr: widget.tokenAddress,
        walletIndex: BigInt.from(appState.selectedWallet),
      );

      if (mounted) {
        setState(() {
          _ftoken = FTokenInfo(
            name: meta.name,
            symbol: meta.symbol,
            decimals: meta.decimals,
            addr: meta.addr,
            addrType: meta.addrType,
            balances: meta.balances,
            default_: meta.default_,
            native: false,
            chainHash: meta.chainHash,
            logo: widget.tokenIconUrl ?? appState.wallet?.tokens.first.logo,
          );
          _isLoadingBalance = false;
          _errorMessage = null;
        });
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _errorMessage = e.toString();
          _isLoadingBalance = false;
        });
        Future.delayed(const Duration(seconds: 5), () {
          if (mounted) _loadBalance();
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;
    final bottomPadding = MediaQuery.of(context).padding.bottom;
    final primaryColor = theme.primaryPurple;
    final secondaryColor = theme.textSecondary;
    final textColor = theme.textPrimary;
    final selectedAccount = appState.wallet?.selectedAccount ?? BigInt.zero;
    final balance = _ftoken?.balances[selectedAccount] != null
        ? intlNumberFormating(
            value: _ftoken!.balances[selectedAccount]!,
            decimals: _ftoken?.decimals ?? 1,
            localeStr: '',
            symbolStr: _ftoken?.symbol ?? widget.tokenSymbol,
            threshold: baseThreshold,
            compact: true,
          )
        : "-";

    return SingleChildScrollView(
      child: Container(
        decoration: BoxDecoration(
          color: theme.cardBackground,
          borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
          border: Border.all(color: theme.modalBorder, width: 2),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withValues(alpha: 0.2),
              blurRadius: 10,
              offset: const Offset(0, -2),
            ),
          ],
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              width: 36,
              height: 4,
              margin: const EdgeInsets.symmetric(vertical: 16),
              decoration: BoxDecoration(
                color: theme.modalBorder,
                borderRadius: BorderRadius.circular(2),
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  Text(
                    'Add suggested token',
                    style: TextStyle(
                        color: textColor,
                        fontSize: 20,
                        fontWeight: FontWeight.w600),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'Review and add the following token suggested by the app.',
                    style: TextStyle(color: secondaryColor, fontSize: 14),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 16),
                  Container(
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: [
                          secondaryColor.withValues(alpha: 0.1),
                          primaryColor.withValues(alpha: 0.05),
                        ],
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                      ),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Column(
                      children: [
                        if (widget.appIcon.isNotEmpty)
                          Container(
                            width: 48,
                            height: 48,
                            margin: const EdgeInsets.only(bottom: 12),
                            decoration: BoxDecoration(
                              shape: BoxShape.circle,
                              border: Border.all(color: primaryColor, width: 2),
                              boxShadow: [
                                BoxShadow(
                                  color: primaryColor.withValues(alpha: 0.3),
                                  blurRadius: 8,
                                  offset: const Offset(0, 2),
                                ),
                              ],
                            ),
                            child: ClipOval(
                              child: AsyncImage(
                                url: widget.appIcon,
                                width: 48,
                                height: 48,
                                fit: BoxFit.cover,
                                loadingWidget: CircularProgressIndicator(
                                    strokeWidth: 2, color: secondaryColor),
                                errorWidget: Icon(Icons.link,
                                    color: secondaryColor, size: 24),
                              ),
                            ),
                          ),
                        Text(
                          widget.appTitle,
                          style: TextStyle(
                              color: textColor,
                              fontSize: 18,
                              fontWeight: FontWeight.w500),
                          textAlign: TextAlign.center,
                        ),
                      ],
                    ),
                  ),
                  if (_errorMessage != null) ...[
                    const SizedBox(height: 16),
                    Container(
                      padding: const EdgeInsets.all(12),
                      decoration: BoxDecoration(
                        color: Colors.red.withValues(alpha: 0.1),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Text(
                        _errorMessage!,
                        style: const TextStyle(color: Colors.red, fontSize: 14),
                        textAlign: TextAlign.center,
                      ),
                    ),
                  ],
                  const SizedBox(height: 16),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text('Token',
                          style:
                              TextStyle(color: secondaryColor, fontSize: 14)),
                      Text('Balance',
                          style:
                              TextStyle(color: secondaryColor, fontSize: 14)),
                    ],
                  ),
                  const SizedBox(height: 8),
                  _isLoadingBalance
                      ? AnimatedBuilder(
                          animation: _animation,
                          builder: (context, child) {
                            double w = MediaQuery.of(context).size.width - 32;
                            double start = 10;
                            double end = w - 250 - 10;
                            double left =
                                start + (_animation.value * (end - start));
                            return SizedBox(
                              height: 64,
                              child: Stack(
                                alignment: Alignment.center,
                                children: [
                                  child!,
                                  Positioned(
                                    left: left,
                                    child: Container(
                                      height: 64,
                                      width: 250,
                                      decoration: BoxDecoration(
                                        gradient: LinearGradient(
                                          colors: [
                                            Colors.transparent,
                                            Colors.white.withValues(alpha: 0.4),
                                            Colors.transparent,
                                          ],
                                          stops: [0.0, 0.5, 1.0],
                                          begin: Alignment.centerLeft,
                                          end: Alignment.centerRight,
                                        ),
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            );
                          },
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            crossAxisAlignment: CrossAxisAlignment.center,
                            children: [
                              Row(
                                children: [
                                  AsyncImage(
                                    url: widget.tokenIconUrl,
                                    width: 40,
                                    height: 40,
                                    fit: BoxFit.cover,
                                  ),
                                  const SizedBox(width: 12),
                                  Text(
                                    _ftoken?.name ?? widget.tokenName,
                                    style: TextStyle(
                                        color: textColor,
                                        fontSize: 16,
                                        fontWeight: FontWeight.w500),
                                  ),
                                ],
                              ),
                              Text(
                                balance,
                                style:
                                    TextStyle(color: textColor, fontSize: 16),
                              ),
                            ],
                          ),
                        )
                      : Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          crossAxisAlignment: CrossAxisAlignment.center,
                          children: [
                            Row(
                              children: [
                                AsyncImage(
                                  url: widget.tokenIconUrl,
                                  width: 40,
                                  height: 40,
                                  fit: BoxFit.cover,
                                ),
                                const SizedBox(width: 12),
                                Text(
                                  widget.tokenName,
                                  style: TextStyle(
                                      color: textColor,
                                      fontSize: 16,
                                      fontWeight: FontWeight.w500),
                                ),
                              ],
                            ),
                            Text(
                              balance,
                              style: TextStyle(color: textColor, fontSize: 16),
                            ),
                          ],
                        ),
                ],
              ),
            ),
            Padding(
              padding: EdgeInsets.fromLTRB(16, 0, 16, 8 + bottomPadding),
              child: Column(
                children: [
                  SwipeButton(
                    text: _isLoadingBalance ? 'Balance...' : 'Add',
                    disabled: _isLoadingBalance || _errorMessage != null,
                    backgroundColor: primaryColor,
                    textColor: textColor,
                    onSwipeComplete: () async {
                      if (_ftoken != null) {
                        widget.onConfirm(_ftoken!);
                      }

                      Navigator.pop(context);
                    },
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/select_token.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/components/token_select_item.dart';
import 'package:zilpay/src/rust/models/ftoken.dart';
import 'package:zilpay/state/app_state.dart';
import '../theme/app_theme.dart' as theme;

void showTokenSelectModal({
  required BuildContext context,
  required Function(int) onTokenSelected,
}) {
  showModalBottomSheet<void>(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (BuildContext context) {
      return Padding(
        padding: EdgeInsets.only(
          bottom: MediaQuery.of(context).viewInsets.bottom,
        ),
        child: _TokenSelectModalContent(
          onTokenSelected: onTokenSelected,
        ),
      );
    },
  );
}

class _TokenSelectModalContent extends StatefulWidget {
  final Function(int) onTokenSelected;

  const _TokenSelectModalContent({
    required this.onTokenSelected,
  });

  @override
  State<_TokenSelectModalContent> createState() =>
      _TokenSelectModalContentState();
}

class _TokenSelectModalContentState extends State<_TokenSelectModalContent> {
  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<AppState>(context).currentTheme;
    final appState = Provider.of<AppState>(context);
    final tokens = appState.wallet?.tokens ?? [];

    final double headerHeight = 84.0;
    final double searchBarHeight = 80.0;
    final double tokenItemHeight = 72.0;
    final double bottomPadding = MediaQuery.of(context).padding.bottom;

    final double totalContentHeight = headerHeight +
        searchBarHeight +
        (tokens.length * tokenItemHeight) +
        bottomPadding;

    final double maxHeight = MediaQuery.of(context).size.height * 0.7;
    final double containerHeight = totalContentHeight.clamp(0.0, maxHeight);

    return Container(
      height: containerHeight,
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
        border: Border.all(color: theme.modalBorder, width: 2),
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            width: 36,
            height: 4,
            margin: const EdgeInsets.symmetric(vertical: 16),
            decoration: BoxDecoration(
              color: theme.modalBorder,
              borderRadius: BorderRadius.circular(2),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(16),
            child: SmartInput(
              controller: _searchController,
              hint: 'Search',
              leftIconPath: 'assets/icons/search.svg',
              onChanged: (value) => setState(() => _searchQuery = value),
              borderColor: theme.textPrimary,
              focusedBorderColor: theme.primaryPurple,
              height: 48,
              fontSize: 16,
              padding: const EdgeInsets.symmetric(horizontal: 16),
            ),
          ),
          Expanded(
            child: ListView.separated(
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              itemCount: _getFilteredTokens(appState).length,
              separatorBuilder: (context, index) => Divider(
                height: 1,
                color: theme.textSecondary.withValues(alpha: 0.1),
              ),
              itemBuilder: (context, index) {
                return _buildTokenItem(
                  theme,
                  appState,
                  _getFilteredTokens(appState)[index],
                );
              },
            ),
          ),
          SizedBox(height: bottomPadding),
        ],
      ),
    );
  }

  List<FTokenInfo> _getFilteredTokens(AppState appState) {
    if (appState.wallet == null) {
      return [];
    }

    final tokens = appState.wallet!.tokens;
    return tokens
        .where((token) => token.addrType == appState.account?.addrType)
        .where((token) =>
            token.name.toLowerCase().contains(_searchQuery.toLowerCase()) ||
            token.symbol.toLowerCase().contains(_searchQuery.toLowerCase()))
        .toList();
  }

  Widget _buildTokenItem(
    theme.AppTheme theme,
    AppState appState,
    FTokenInfo token,
  ) {
    final tokens = appState.wallet!.tokens;
    final tokenIndex = tokens.indexOf(token);
    final bigBalance = token.balances[appState.wallet!.selectedAccount] ?? '0';

    return TokenSelectItem(
      ftoken: token,
      balance: bigBalance,
      onTap: () {
        widget.onTokenSelected(tokenIndex);
        Navigator.pop(context);
      },
    );
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/password_change.dart`:

```dart
import 'package:flutter/material.dart';
import '../../components/button.dart';
import '../../components/smart_input.dart';
import '../../theme/app_theme.dart';

void showChangePasswordModal({
  required BuildContext context,
  required AppTheme theme,
  VoidCallback? onDismiss,
}) {
  showModalBottomSheet<void>(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (context) => ChangePasswordModal(theme: theme),
  ).then((_) => onDismiss?.call());
}

class ChangePasswordModal extends StatefulWidget {
  final AppTheme theme;

  const ChangePasswordModal({
    super.key,
    required this.theme,
  });

  @override
  State<ChangePasswordModal> createState() => _ChangePasswordModalState();
}

class _ChangePasswordModalState extends State<ChangePasswordModal> {
  final _currentPasswordController = TextEditingController();
  final _newPasswordController = TextEditingController();
  final _confirmPasswordController = TextEditingController();

  final _currentPasswordInputKey = GlobalKey<SmartInputState>();
  final _newPasswordInputKey = GlobalKey<SmartInputState>();
  final _confirmPasswordInputKey = GlobalKey<SmartInputState>();

  bool _obscureCurrentPassword = true;
  bool _obscureNewPassword = true;
  bool _obscureConfirmPassword = true;
  bool _disabled = false;
  String _errorMessage = '';

  static const double _inputHeight = 50.0;

  @override
  void dispose() {
    _currentPasswordController.dispose();
    _newPasswordController.dispose();
    _confirmPasswordController.dispose();
    super.dispose();
  }

  bool _validatePasswords() {
    if (_currentPasswordController.text.isEmpty) {
      _currentPasswordInputKey.currentState?.shake();
      setState(() {
        _errorMessage = 'Current password cannot be empty';
        _disabled = false;
      });
      return false;
    }

    if (_newPasswordController.text.length < 6) {
      _newPasswordInputKey.currentState?.shake();
      setState(() {
        _errorMessage = 'Password must be at least 6 characters';
        _disabled = false;
      });
      return false;
    }

    if (_newPasswordController.text != _confirmPasswordController.text) {
      _confirmPasswordInputKey.currentState?.shake();
      setState(() {
        _errorMessage = 'Passwords do not match';
        _disabled = false;
      });
      return false;
    }

    return true;
  }

  void _handleChangePassword(BuildContext context) {
    setState(() {
      _errorMessage = '';
      _disabled = true;
    });

    if (!_validatePasswords()) {
      return;
    }

    debugPrint('Change password clicked');
    Navigator.pop(context);
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      constraints:
          BoxConstraints(maxHeight: MediaQuery.sizeOf(context).height * 0.9),
      decoration: BoxDecoration(
        color: widget.theme.cardBackground,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
        border: Border.all(color: widget.theme.modalBorder, width: 2),
      ),
      child: SafeArea(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              width: 36,
              height: 4,
              margin: const EdgeInsets.symmetric(vertical: 16),
              decoration: BoxDecoration(
                color: widget.theme.modalBorder,
                borderRadius: BorderRadius.circular(2),
              ),
            ),
            Flexible(
              child: SingleChildScrollView(
                physics: const BouncingScrollPhysics(),
                padding: EdgeInsets.only(
                    bottom: MediaQuery.viewInsetsOf(context).bottom),
                child: Padding(
                  padding: const EdgeInsets.fromLTRB(16, 0, 16, 16),
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Change Password',
                        style: TextStyle(
                          color: widget.theme.textPrimary,
                          fontSize: 18,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        'Enter your current password and choose a new password to update your wallet security.',
                        style: TextStyle(
                          color: widget.theme.textSecondary,
                          fontSize: 14,
                        ),
                      ),
                      const SizedBox(height: 24),
                      SmartInput(
                        key: _currentPasswordInputKey,
                        controller: _currentPasswordController,
                        hint: 'Current Password',
                        height: _inputHeight,
                        fontSize: 18,
                        disabled: _disabled,
                        padding: const EdgeInsets.symmetric(horizontal: 20),
                        obscureText: _obscureCurrentPassword,
                        rightIconPath: _obscureCurrentPassword
                            ? "assets/icons/close_eye.svg"
                            : "assets/icons/open_eye.svg",
                        onRightIconTap: () => setState(() =>
                            _obscureCurrentPassword = !_obscureCurrentPassword),
                        onChanged: (_) => _errorMessage.isNotEmpty
                            ? setState(() => _errorMessage = '')
                            : null,
                      ),
                      const SizedBox(height: 16),
                      SmartInput(
                        key: _newPasswordInputKey,
                        controller: _newPasswordController,
                        hint: 'New Password',
                        height: _inputHeight,
                        fontSize: 18,
                        disabled: _disabled,
                        padding: const EdgeInsets.symmetric(horizontal: 20),
                        obscureText: _obscureNewPassword,
                        rightIconPath: _obscureNewPassword
                            ? "assets/icons/close_eye.svg"
                            : "assets/icons/open_eye.svg",
                        onRightIconTap: () => setState(
                            () => _obscureNewPassword = !_obscureNewPassword),
                        onChanged: (_) => _errorMessage.isNotEmpty
                            ? setState(() => _errorMessage = '')
                            : null,
                      ),
                      const SizedBox(height: 16),
                      SmartInput(
                        key: _confirmPasswordInputKey,
                        controller: _confirmPasswordController,
                        hint: 'Confirm New Password',
                        height: _inputHeight,
                        fontSize: 18,
                        disabled: _disabled,
                        padding: const EdgeInsets.symmetric(horizontal: 20),
                        obscureText: _obscureConfirmPassword,
                        rightIconPath: _obscureConfirmPassword
                            ? "assets/icons/close_eye.svg"
                            : "assets/icons/open_eye.svg",
                        onRightIconTap: () => setState(() =>
                            _obscureConfirmPassword = !_obscureConfirmPassword),
                        onChanged: (_) => _errorMessage.isNotEmpty
                            ? setState(() => _errorMessage = '')
                            : null,
                      ),
                      if (_errorMessage.isNotEmpty) ...[
                        const SizedBox(height: 8),
                        Text(
                          _errorMessage,
                          style: TextStyle(
                            color: widget.theme.danger,
                            fontSize: 14,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      ],
                      const SizedBox(height: 24),
                      SizedBox(
                        width: double.infinity,
                        child: CustomButton(
                          text: 'Change Password',
                          onPressed: () => _handleChangePassword(context),
                          backgroundColor: widget.theme.primaryPurple,
                          textColor: widget.theme.textPrimary,
                          height: 48,
                        ),
                      ),
                      const SizedBox(height: 24),
                    ],
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/delete_wallet.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:zilpay/components/load_button.dart';
import 'package:zilpay/services/device.dart';
import 'package:zilpay/src/rust/api/wallet.dart';
import 'package:zilpay/state/app_state.dart';
import '../../components/smart_input.dart';

void showDeleteWalletModal({
  required BuildContext context,
  required AppState state,
  VoidCallback? onDismiss,
}) {
  showModalBottomSheet<void>(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (context) => DeleteWalletModal(
      state: state,
    ),
  ).then((_) => onDismiss?.call());
}

class DeleteWalletModal extends StatefulWidget {
  final AppState state;

  const DeleteWalletModal({
    super.key,
    required this.state,
  });

  @override
  State<DeleteWalletModal> createState() => _DeleteWalletModalState();
}

class _DeleteWalletModalState extends State<DeleteWalletModal> {
  final _passwordController = TextEditingController();
  final _passwordInputKey = GlobalKey<SmartInputState>();
  final _btnController = RoundedLoadingButtonController();

  bool _obscurePassword = true;
  bool _isDisabled = false;
  String _errorMessage = '';

  static const double _inputHeight = 50.0;

  @override
  void dispose() {
    _passwordController.dispose();
    super.dispose();
  }

  Future<void> _handleDeleteWallet() async {
    if (_passwordController.text.isEmpty) return;

    _btnController.start();

    try {
      setState(() {
        _errorMessage = '';
        _isDisabled = true;
      });

      final device = DeviceInfoService();
      final identifiers = await device.getDeviceIdentifiers();

      await deleteWallet(
        walletIndex: BigInt.from(widget.state.selectedWallet),
        identifiers: identifiers,
        password: _passwordController.text,
      );
      await widget.state.syncData();
      if (!mounted) return;
      _btnController.success();
      await Navigator.of(context).pushNamed('/login');
    } catch (e) {
      if (mounted) {
        setState(() {
          _errorMessage = e.toString();
          _isDisabled = false;
        });
      }
      _btnController.error();
      await Future.delayed(const Duration(seconds: 1));
      _btnController.reset();
    } finally {
      await widget.state.syncData();
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = widget.state.currentTheme;

    return Container(
      constraints:
          BoxConstraints(maxHeight: MediaQuery.sizeOf(context).height * 0.9),
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
        border: Border.all(color: theme.modalBorder, width: 2),
      ),
      child: SafeArea(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            Container(
              width: 36,
              height: 4,
              margin: const EdgeInsets.symmetric(vertical: 16),
              decoration: BoxDecoration(
                color: theme.modalBorder,
                borderRadius: BorderRadius.circular(2),
              ),
            ),
            Flexible(
              child: SingleChildScrollView(
                physics: const BouncingScrollPhysics(),
                padding: EdgeInsets.only(
                    bottom: MediaQuery.viewInsetsOf(context).bottom),
                child: Padding(
                  padding: const EdgeInsets.fromLTRB(16, 0, 16, 16),
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Delete Wallet',
                        style: TextStyle(
                          color: theme.danger,
                          fontSize: 18,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        'Warning: This action cannot be undone. Your wallet can only be recovered using your secret phrase. If you don\'t have access to it, you will permanently lose all funds associated with this account.',
                        style: TextStyle(
                          color: theme.warning,
                          fontSize: 14,
                        ),
                      ),
                      const SizedBox(height: 16),
                      Text(
                        'Please make sure you have access to your secret phrase before proceeding.',
                        style: TextStyle(
                          color: theme.danger,
                          fontSize: 14,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                      const SizedBox(height: 24),
                      SmartInput(
                        key: _passwordInputKey,
                        controller: _passwordController,
                        hint: 'Enter Password',
                        height: _inputHeight,
                        fontSize: 18,
                        disabled: _isDisabled,
                        padding: const EdgeInsets.symmetric(horizontal: 20),
                        obscureText: _obscurePassword,
                        rightIconPath: _obscurePassword
                            ? "assets/icons/close_eye.svg"
                            : "assets/icons/open_eye.svg",
                        onRightIconTap: () => setState(
                            () => _obscurePassword = !_obscurePassword),
                        onChanged: (_) => _errorMessage.isNotEmpty
                            ? setState(() => _errorMessage = '')
                            : null,
                      ),
                      if (_errorMessage.isNotEmpty) ...[
                        const SizedBox(height: 8),
                        Text(
                          _errorMessage,
                          style: TextStyle(
                            color: theme.danger,
                            fontSize: 14,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      ],
                      const SizedBox(height: 24),
                      SizedBox(
                        width: double.infinity,
                        child: RoundedLoadingButton(
                          color: theme.danger,
                          onPressed: _handleDeleteWallet,
                          controller: _btnController,
                          successIcon: SvgPicture.asset(
                            'assets/icons/ok.svg',
                            width: 24,
                            height: 24,
                            colorFilter: ColorFilter.mode(
                                theme.textPrimary, BlendMode.srcIn),
                          ),
                          child: Text(
                            'Submit',
                            style: TextStyle(
                              color: theme.textPrimary,
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      ),
                      const SizedBox(height: 24),
                    ],
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/argon2.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/button.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/components/option_list.dart';
import 'package:zilpay/config/argon.dart';
import 'package:zilpay/src/rust/models/settings.dart';
import 'package:zilpay/state/app_state.dart';

void showArgonSettingsModal({
  required BuildContext context,
  required Function(WalletArgonParamsInfo) onParamsSelected,
  required WalletArgonParamsInfo argonParams,
}) {
  showModalBottomSheet<void>(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (BuildContext context) {
      return Padding(
        padding: EdgeInsets.only(
          bottom: MediaQuery.of(context).viewInsets.bottom,
        ),
        child: _ArgonSettingsModalContent(
          onParamsSelected: onParamsSelected,
          argonParams: argonParams,
        ),
      );
    },
  );
}

class _ArgonSettingsModalContent extends StatefulWidget {
  final Function(WalletArgonParamsInfo) onParamsSelected;
  final WalletArgonParamsInfo argonParams;

  const _ArgonSettingsModalContent({
    required this.onParamsSelected,
    required this.argonParams,
  });

  @override
  State<_ArgonSettingsModalContent> createState() =>
      _ArgonSettingsModalContentState();
}

class _ArgonSettingsModalContentState
    extends State<_ArgonSettingsModalContent> {
  final TextEditingController _secretController = TextEditingController();
  bool _obscurePassword = true;

  late int selectedParamIndex;

  final List<Map<String, String>> argonDescriptions = [
    {
      'title': 'Low Memory',
      'subtitle': '64KB RAM, 3 iterations',
      'description': 'Minimal memory usage, suitable for low-end devices.',
    },
    {
      'title': 'OWASP Default',
      'subtitle': '6.5MB RAM, 2 iterations',
      'description': 'Recommended by OWASP for general use.',
    },
    {
      'title': 'Secure',
      'subtitle': '256MB RAM, 4 iterations',
      'description': 'High security with increased memory and iterations.',
    },
  ];

  @override
  void initState() {
    super.initState();
    // Initialize with the provided argonParams
    selectedParamIndex = _getInitialParamIndex();
    _secretController.text = widget.argonParams.secret;
  }

  int _getInitialParamIndex() {
    // Logic to determine initial index based on provided argonParams
    if (widget.argonParams ==
        Argon2DefaultParams.lowMemory(secret: widget.argonParams.secret)) {
      return 0;
    } else if (widget.argonParams ==
        Argon2DefaultParams.secure(secret: widget.argonParams.secret)) {
      return 2;
    }
    return 1; // OWASP Default
  }

  @override
  void dispose() {
    _secretController.dispose();
    super.dispose();
  }

  WalletArgonParamsInfo _getSelectedParams() {
    final secret = _secretController.text;
    switch (selectedParamIndex) {
      case 0:
        return Argon2DefaultParams.lowMemory(secret: secret);
      case 1:
        return Argon2DefaultParams.owaspDefault(secret: secret);
      case 2:
        return Argon2DefaultParams.secure(secret: secret);
      default:
        return Argon2DefaultParams.owaspDefault(secret: secret);
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<AppState>(context).currentTheme;
    final bottomPadding = MediaQuery.of(context).padding.bottom;

    return Container(
      constraints: BoxConstraints(
        maxHeight: MediaQuery.of(context).size.height * 0.8,
      ),
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
        border: Border.all(color: theme.modalBorder, width: 2),
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            width: 36,
            height: 4,
            margin: const EdgeInsets.symmetric(vertical: 16),
            decoration: BoxDecoration(
              color: theme.modalBorder,
              borderRadius: BorderRadius.circular(2),
            ),
          ),
          Expanded(
            child: SingleChildScrollView(
              padding: const EdgeInsets.symmetric(horizontal: 16),
              physics: const BouncingScrollPhysics(),
              child: OptionsList(
                options: List.generate(
                  argonDescriptions.length,
                  (index) => OptionItem(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          argonDescriptions[index]['title']!,
                          style: TextStyle(
                            color: theme.textPrimary,
                            fontSize: 16,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                        const SizedBox(height: 4),
                        Text(
                          argonDescriptions[index]['subtitle']!,
                          style: TextStyle(
                            color: theme.primaryPurple,
                            fontSize: 14,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                        const SizedBox(height: 8),
                        Text(
                          argonDescriptions[index]['description']!,
                          style: TextStyle(
                            color: theme.textSecondary,
                            fontSize: 14,
                          ),
                        ),
                      ],
                    ),
                    isSelected: selectedParamIndex == index,
                    onSelect: () => setState(() => selectedParamIndex = index),
                  ),
                ),
                unselectedOpacity: 0.5,
              ),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(16),
            child: SmartInput(
              controller: _secretController,
              obscureText: _obscurePassword,
              rightIconPath: _obscurePassword
                  ? "assets/icons/close_eye.svg"
                  : "assets/icons/open_eye.svg",
              hint: 'Enter secret (optional)',
              borderColor: theme.textPrimary,
              focusedBorderColor: theme.primaryPurple,
              height: 48,
              fontSize: 16,
              padding: const EdgeInsets.symmetric(horizontal: 16),
              onRightIconTap: () {
                setState(() {
                  _obscurePassword = !_obscurePassword;
                });
              },
            ),
          ),
          Padding(
            padding: EdgeInsets.fromLTRB(16, 0, 16, 8 + bottomPadding),
            child: SizedBox(
              width: double.infinity,
              child: CustomButton(
                text: 'Confirm',
                onPressed: () {
                  widget.onParamsSelected(_getSelectedParams());
                  Navigator.pop(context);
                },
                backgroundColor: theme.primaryPurple,
                borderRadius: 30.0,
                height: 50.0,
              ),
            ),
          ),
        ],
      ),
    );
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/add_contect.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:zilpay/src/rust/api/book.dart';
import 'package:zilpay/state/app_state.dart';
import '../../components/button.dart';
import '../../components/smart_input.dart';

void showAddContactModal({
  required BuildContext context,
  required AppState state,
  VoidCallback? onDismiss,
}) {
  showModalBottomSheet<void>(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (context) => AddAddressModal(
      state: state,
    ),
  ).then((_) => onDismiss?.call());
}

class AddAddressModal extends StatefulWidget {
  final AppState state;

  const AddAddressModal({
    super.key,
    required this.state,
  });

  @override
  State<AddAddressModal> createState() => _AddAddressModalState();
}

class _AddAddressModalState extends State<AddAddressModal> {
  final _nameController = TextEditingController();
  final _addressController = TextEditingController();
  final _nameInputKey = GlobalKey<SmartInputState>();
  final _addressInputKey = GlobalKey<SmartInputState>();

  bool _isDisabled = false;
  String _errorMessage = '';

  static const double _inputHeight = 50.0;

  @override
  void dispose() {
    _nameController.dispose();
    _addressController.dispose();
    super.dispose();
  }

  bool _validateInputs() {
    if (_nameController.text.isEmpty) {
      _nameInputKey.currentState?.shake();
      setState(() {
        _errorMessage = 'Name cannot be empty';
        _isDisabled = false;
      });
      return false;
    }
    if (_addressController.text.isEmpty) {
      _addressInputKey.currentState?.shake();
      setState(() {
        _errorMessage = 'Address cannot be empty';
        _isDisabled = false;
      });
      return false;
    }
    return true;
  }

  Future<void> _handleAddAddress() async {
    setState(() {
      _errorMessage = '';
      _isDisabled = true;
    });

    if (!_validateInputs()) return;

    try {
      await addNewBookAddress(
        name: _nameController.text,
        addr: _addressController.text,
        net: BigInt.zero,
      );
      await widget.state.syncBook();
      if (!mounted) return;
      Navigator.pop(context);
    } catch (e) {
      if (mounted) {
        setState(() {
          _errorMessage = e.toString();
          _isDisabled = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = widget.state.currentTheme;

    return Container(
      constraints:
          BoxConstraints(maxHeight: MediaQuery.sizeOf(context).height * 0.9),
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
        border: Border.all(color: theme.modalBorder, width: 2),
      ),
      child: SafeArea(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              width: 36,
              height: 4,
              margin: const EdgeInsets.symmetric(vertical: 16),
              decoration: BoxDecoration(
                color: theme.modalBorder,
                borderRadius: BorderRadius.circular(2),
              ),
            ),
            Flexible(
              child: SingleChildScrollView(
                physics: const BouncingScrollPhysics(),
                padding: EdgeInsets.only(
                    bottom: MediaQuery.viewInsetsOf(context).bottom),
                child: Padding(
                  padding: const EdgeInsets.fromLTRB(16, 0, 16, 16),
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Add Contact',
                        style: TextStyle(
                          color: theme.textPrimary,
                          fontSize: 18,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        'Enter the contact name and wallet address to add to your address book.',
                        style: TextStyle(
                          color: theme.textSecondary,
                          fontSize: 14,
                        ),
                      ),
                      const SizedBox(height: 24),
                      SmartInput(
                        key: _nameInputKey,
                        controller: _nameController,
                        hint: 'Name',
                        height: _inputHeight,
                        fontSize: 18,
                        disabled: _isDisabled,
                        padding: const EdgeInsets.symmetric(horizontal: 20),
                        onChanged: (_) {
                          if (_errorMessage.isNotEmpty) {
                            setState(() => _errorMessage = '');
                          }
                        },
                      ),
                      const SizedBox(height: 8),
                      SmartInput(
                        key: _addressInputKey,
                        controller: _addressController,
                        hint: 'Wallet Address',
                        height: _inputHeight,
                        fontSize: 18,
                        disabled: _isDisabled,
                        padding: const EdgeInsets.symmetric(horizontal: 20),
                        onChanged: (_) {
                          if (_errorMessage.isNotEmpty) {
                            setState(() => _errorMessage = '');
                          }
                        },
                      ),
                      if (_errorMessage.isNotEmpty) ...[
                        const SizedBox(height: 8),
                        Text(
                          _errorMessage,
                          style: TextStyle(
                            color: theme.danger,
                            fontSize: 14,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      ],
                      const SizedBox(height: 16),
                      SizedBox(
                        width: double.infinity,
                        child: CustomButton(
                          text: 'Add Contact',
                          onPressed: _handleAddAddress,
                          backgroundColor: theme.primaryPurple,
                          textColor: theme.textPrimary,
                          height: 48,
                        ),
                      ),
                      const SizedBox(height: 24),
                    ],
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/app_connect.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/address_avatar.dart';
import 'package:zilpay/components/hoverd_svg.dart';
import 'package:zilpay/components/image_cache.dart';
import 'package:zilpay/components/swipe_button.dart';
import 'package:zilpay/src/rust/models/connection.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/theme/app_theme.dart';
import 'package:zilpay/components/enable_card.dart';

void showAppConnectModal({
  required BuildContext context,
  required String title,
  required String uuid,
  required String iconUrl,
  ColorsInfo? colors,
  required Function(List<int>) onConfirm,
  required VoidCallback onReject,
}) {
  showModalBottomSheet<bool>(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (BuildContext context) {
      return _AppConnectModalContent(
        title: title,
        uuid: uuid,
        iconUrl: iconUrl,
        colors: colors,
        onConfirm: onConfirm,
      );
    },
  ).then((result) {
    if (result == null) {
      onReject();
    }
  });
}

class _AppConnectModalContent extends StatefulWidget {
  final String title;
  final String uuid;
  final String iconUrl;
  final ColorsInfo? colors;
  final Function(List<int>) onConfirm;

  const _AppConnectModalContent({
    required this.title,
    required this.uuid,
    required this.iconUrl,
    this.colors,
    required this.onConfirm,
  });

  @override
  State<_AppConnectModalContent> createState() =>
      _AppConnectModalContentState();
}

class _AppConnectModalContentState extends State<_AppConnectModalContent> {
  Map<int, bool> _selectedAccounts = {};

  @override
  void initState() {
    super.initState();
    final appState = Provider.of<AppState>(context, listen: false);
    if (appState.wallet != null) {
      _selectedAccounts = Map.fromEntries(appState.wallet!.accounts
          .asMap()
          .entries
          .map((entry) => MapEntry(entry.key, true)));
    }
  }

  Color? _parseColor(String? colorString) {
    if (colorString == null) return null;
    try {
      return Color(int.parse(colorString.replaceFirst('#', '0xff')));
    } catch (e) {
      return null;
    }
  }

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;
    final primaryColor =
        _parseColor(widget.colors?.primary) ?? theme.primaryPurple;
    final secondaryColor =
        _parseColor(widget.colors?.secondary) ?? theme.textSecondary;
    final textColor = _parseColor(widget.colors?.text) ?? theme.textPrimary;

    return Container(
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
        border: Border.all(color: theme.modalBorder, width: 2),
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            width: 36,
            height: 4,
            margin: EdgeInsets.symmetric(vertical: 16),
            decoration: BoxDecoration(
              color: theme.modalBorder,
              borderRadius: BorderRadius.circular(2),
            ),
          ),
          Padding(
            padding: EdgeInsets.only(top: 16),
            child: Container(
              width: 64,
              height: 64,
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(16),
                border: Border.all(
                    color: primaryColor.withValues(alpha: 0.2), width: 2),
              ),
              child: ClipRRect(
                borderRadius: BorderRadius.circular(14),
                child: AsyncImage(
                  url: widget.iconUrl,
                  width: 64,
                  height: 64,
                  fit: BoxFit.cover,
                  errorWidget: Container(
                    color: secondaryColor.withValues(alpha: 0.1),
                    child: HoverSvgIcon(
                      assetName: 'assets/icons/warning.svg',
                      width: 64,
                      height: 64,
                      onTap: () {},
                      color: secondaryColor,
                    ),
                  ),
                  loadingWidget: Center(
                    child: CircularProgressIndicator(
                        strokeWidth: 2, color: primaryColor),
                  ),
                ),
              ),
            ),
          ),
          Padding(
            padding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            child: Text(
              widget.title,
              style: TextStyle(
                  color: textColor, fontSize: 20, fontWeight: FontWeight.w600),
              textAlign: TextAlign.center,
            ),
          ),
          _buildAccountList(appState, theme),
          Padding(
            padding: EdgeInsets.all(16),
            child: SwipeButton(
              text: 'Swipe to Connect',
              disabled: !_selectedAccounts.values.any((selected) => selected),
              backgroundColor: primaryColor,
              textColor: textColor,
              onSwipeComplete: () async {
                final selectedIndices = _selectedAccounts.entries
                    .where((entry) => entry.value)
                    .map((entry) => entry.key)
                    .toList();
                widget.onConfirm(selectedIndices);
                Navigator.pop(context, true);
              },
            ),
          ),
          SizedBox(height: MediaQuery.of(context).padding.bottom),
        ],
      ),
    );
  }

  Widget _buildAccountList(AppState appState, AppTheme theme) {
    final secondaryColor =
        _parseColor(widget.colors?.secondary) ?? theme.textSecondary;

    if (appState.wallet == null || appState.wallet!.accounts.isEmpty) {
      return Padding(
        padding: EdgeInsets.all(16),
        child: Text(
          'No accounts available',
          style: TextStyle(color: secondaryColor, fontSize: 14),
        ),
      );
    }

    return Container(
      constraints:
          BoxConstraints(maxHeight: MediaQuery.of(context).size.height * 0.4),
      padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: ListView.builder(
        shrinkWrap: true,
        itemCount: appState.wallet!.accounts.length,
        itemBuilder: (context, index) {
          final account = appState.wallet!.accounts[index];
          final isSelected = _selectedAccounts[index] ?? false;

          return EnableCard(
            title: account.name,
            name: account.addr,
            iconWidget: AvatarAddress(
              avatarSize: 32.0,
              account: account,
            ),
            isDefault: false,
            isEnabled: isSelected,
            onToggle: (value) {
              setState(() {
                _selectedAccounts[index] = value;
              });
            },
          );
        },
      ),
    );
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/wallet_header.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:blockies/blockies.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/hoverd_svg.dart';
import 'package:zilpay/components/image_cache.dart';
import 'package:zilpay/components/wallet_card.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/mixins/preprocess_url.dart';
import 'package:zilpay/mixins/wallet_type.dart';
import 'package:zilpay/src/rust/api/wallet.dart';
import 'package:zilpay/state/app_state.dart';

void showWalletModal({
  required BuildContext context,
  VoidCallback? onManageWallet,
}) {
  showModalBottomSheet<void>(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (_) => _WalletModalContent(onManageWallet: onManageWallet),
  );
}

class _WalletModalContent extends StatefulWidget {
  final VoidCallback? onManageWallet;

  const _WalletModalContent({this.onManageWallet});

  @override
  State<_WalletModalContent> createState() => _WalletModalContentState();
}

class _WalletModalContentState extends State<_WalletModalContent> {
  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    if (appState.wallet == null) return const SizedBox.shrink();

    return PopScope(
      child: GestureDetector(
        onHorizontalDragEnd: (details) {
          if (details.primaryVelocity! > 0) Navigator.pop(context);
        },
        child: Container(
          decoration: BoxDecoration(
            color: appState.currentTheme.cardBackground,
            borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
            border:
                Border.all(color: appState.currentTheme.modalBorder, width: 2),
          ),
          child: SingleChildScrollView(
            physics: const ClampingScrollPhysics(),
            child: _buildMainContent(appState),
          ),
        ),
      ),
    );
  }

  Widget _buildMainContent(AppState appState) {
    final theme = appState.currentTheme;
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);
    final wallet = appState.wallet!;

    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        Container(
          width: 36,
          height: 4,
          margin: EdgeInsets.symmetric(vertical: adaptivePadding),
          decoration: BoxDecoration(
            color: theme.modalBorder,
            borderRadius: BorderRadius.circular(2),
          ),
        ),
        GestureDetector(
          behavior: HitTestBehavior.opaque,
          onTap: widget.onManageWallet,
          child: Column(
            children: [
              if (appState.chain != null)
                Container(
                  width: 50,
                  height: 50,
                  margin: const EdgeInsets.only(top: 8),
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    border: Border.all(
                        color: theme.primaryPurple.withValues(alpha: 0.1),
                        width: 2),
                  ),
                  child: AsyncImage(
                    url: preprocessUrl(appState.chain!.logo, theme.value),
                    width: 32,
                    height: 32,
                    fit: BoxFit.contain,
                    errorWidget: Blockies(
                      seed: wallet.walletAddress,
                      color: theme.secondaryPurple,
                      bgColor: theme.primaryPurple,
                      spotColor: theme.background,
                      size: 8,
                    ),
                    loadingWidget:
                        const CircularProgressIndicator(strokeWidth: 2),
                  ),
                ),
              Text(
                wallet.walletName,
                style: TextStyle(
                  color: theme.textPrimary,
                  fontSize: 24,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ],
          ),
        ),
        ConstrainedBox(
          constraints: BoxConstraints(
              maxHeight: MediaQuery.sizeOf(context).height * 0.5),
          child: ListView.builder(
            shrinkWrap: true,
            physics: const ClampingScrollPhysics(),
            itemCount: wallet.accounts.length,
            padding: EdgeInsets.symmetric(
                horizontal: adaptivePadding, vertical: adaptivePadding),
            itemBuilder: (_, index) => WalletCard(
              account: wallet.accounts[index],
              onTap: () => _selectWallet(index),
              isSelected: wallet.selectedAccount == BigInt.from(index),
            ),
          ),
        ),
        if (!wallet.walletType.contains(WalletType.SecretKey.name))
          Container(
            height: 64,
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            decoration: BoxDecoration(
              border: Border(
                  top: BorderSide(
                      color: theme.textPrimary.withValues(alpha: 0.1))),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                HoverSvgIcon(
                  assetName: "assets/icons/plus.svg",
                  color: theme.textPrimary,
                  width: 40,
                  height: 40,
                  onTap: () => Navigator.pushNamed(context, "/add_account"),
                ),
                if (wallet.selectedAccount != BigInt.zero)
                  HoverSvgIcon(
                    assetName: "assets/icons/minus.svg",
                    color: theme.danger,
                    width: 40,
                    height: 40,
                    onTap: _deleteSelectedAccount,
                  ),
              ],
            ),
          ),
        SizedBox(height: MediaQuery.paddingOf(context).bottom),
      ],
    );
  }

  Future<void> _selectWallet(int index) async {
    final appState = Provider.of<AppState>(context, listen: false);
    try {
      await appState.updateSelectedAccount(
        BigInt.from(appState.selectedWallet),
        BigInt.from(index),
      );
      if (mounted) Navigator.pop(context);
    } catch (e) {
      debugPrint("select wallet error: $e");
    }
  }

  Future<void> _deleteSelectedAccount() async {
    final appState = Provider.of<AppState>(context, listen: false);
    try {
      await deleteAccount(
        walletIndex: BigInt.from(appState.selectedWallet),
        accountIndex: appState.wallet!.selectedAccount,
      );
      await appState.syncData();
    } catch (e) {
      debugPrint("try remove account: $e");
    }
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/sign_message.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/components/swipe_button.dart';
import 'package:zilpay/mixins/eip712.dart';
import 'package:zilpay/services/auth_guard.dart';
import 'package:zilpay/services/biometric_service.dart';
import 'package:zilpay/services/device.dart';
import 'package:zilpay/src/rust/api/transaction.dart';
import 'package:zilpay/src/rust/models/connection.dart';
import 'package:zilpay/state/app_state.dart';
import 'dart:convert';

void showSignMessageModal({
  required BuildContext context,
  String? message,
  TypedDataEip712? typedData,
  required String appTitle,
  required String appIcon,
  ColorsInfo? colors,
  required Function(String, String) onMessageSigned,
  VoidCallback? onDismiss,
}) {
  showModalBottomSheet<void>(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (context) => _SignMessageModalContent(
      message: message,
      typedData: typedData,
      appTitle: appTitle,
      appIcon: appIcon,
      colors: colors,
      onMessageSigned: onMessageSigned,
      onDismiss: onDismiss,
    ),
  ).then((_) => onDismiss?.call());
}

class _SignMessageModalContent extends StatefulWidget {
  final String? message;
  final TypedDataEip712? typedData;
  final String appTitle;
  final String appIcon;
  final ColorsInfo? colors;
  final Function(String, String) onMessageSigned;
  final VoidCallback? onDismiss;

  const _SignMessageModalContent({
    required this.appTitle,
    required this.appIcon,
    this.message,
    this.typedData,
    this.colors,
    required this.onMessageSigned,
    this.onDismiss,
  });

  @override
  State<_SignMessageModalContent> createState() =>
      _SignMessageModalContentState();
}

class _SignMessageModalContentState extends State<_SignMessageModalContent> {
  final _passwordController = TextEditingController();
  final _passwordInputKey = GlobalKey<SmartInputState>();
  late final AuthService _authService = AuthService();
  late final AuthGuard _authGuard;
  bool _loading = false;
  bool _obscurePassword = true;
  String? _error;

  @override
  void initState() {
    super.initState();
    _authGuard = context.read<AuthGuard>();
  }

  @override
  void dispose() {
    _passwordController.dispose();
    super.dispose();
  }

  Future<bool> _authenticate() async => _authService.authenticate(
        allowPinCode: true,
        reason: 'Please authenticate to sign the message',
      );

  Future<void> _signMessage(AppState appState) async {
    try {
      final device = DeviceInfoService();
      final identifiers = await device.getDeviceIdentifiers();
      final wallet = appState.wallet!;
      final walletIndex = BigInt.from(appState.selectedWallet);
      final accountIndex = wallet.selectedAccount;
      String? session;

      if (wallet.authType != AuthMethod.none.name) {
        if (!await _authenticate()) return;
        session = await _authGuard.getSession(sessionKey: wallet.walletAddress);
      }

      if (widget.typedData != null) {
        final typedDataJson = jsonEncode(widget.typedData!.toJson());
        final (pubkey, sig) = await signTypedDataEip712(
          walletIndex: walletIndex,
          accountIndex: accountIndex,
          identifiers: identifiers,
          typedDataJson: typedDataJson,
          password: _passwordController.text.isNotEmpty
              ? _passwordController.text
              : null,
          sessionCipher: session,
          passphrase: "",
        );
        widget.onMessageSigned(pubkey, sig);
      } else if (widget.message != null) {
        final (pubkey, sig) = await signMessage(
          walletIndex: walletIndex,
          accountIndex: accountIndex,
          identifiers: identifiers,
          message: widget.message!,
          password: _passwordController.text.isNotEmpty
              ? _passwordController.text
              : null,
          sessionCipher: session,
          passphrase: "",
        );
        widget.onMessageSigned(pubkey, sig);
      }

      if (mounted) Navigator.pop(context);
    } catch (e) {
      if (mounted) setState(() => _error = 'Failed to sign: $e');
    }
  }

  void _handleSignMessage(AppState appState) async {
    setState(() => _loading = true);
    await _signMessage(appState);
    if (mounted) setState(() => _loading = false);
  }

  Color? _parseColor(String? colorString) {
    if (colorString == null) return null;
    try {
      return Color(int.parse(colorString.replaceFirst('#', '0xff')));
    } catch (e) {
      return null;
    }
  }

  @override
  Widget build(BuildContext context) {
    final appState = context.watch<AppState>();
    final theme = appState.currentTheme;
    final backgroundColor =
        _parseColor(widget.colors?.background) ?? theme.cardBackground;
    final primaryColor =
        _parseColor(widget.colors?.primary) ?? theme.primaryPurple;
    final secondaryColor =
        _parseColor(widget.colors?.secondary) ?? theme.textSecondary;
    final textColor = _parseColor(widget.colors?.text) ?? theme.textPrimary;

    return Container(
      constraints:
          BoxConstraints(maxHeight: MediaQuery.sizeOf(context).height * 0.9),
      decoration: BoxDecoration(
        color: backgroundColor,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
        border: Border.all(color: theme.modalBorder, width: 2),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.2),
            blurRadius: 10,
            offset: const Offset(0, -2),
          ),
        ],
      ),
      child: SafeArea(
        child: Stack(
          children: [
            SingleChildScrollView(
              padding: const EdgeInsets.only(bottom: 80),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Container(
                    width: 36,
                    height: 4,
                    margin: const EdgeInsets.symmetric(vertical: 16),
                    decoration: BoxDecoration(
                      color: theme.modalBorder,
                      borderRadius: BorderRadius.circular(2),
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.all(16),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        Text(
                          'Sign Message',
                          style: TextStyle(
                            color: textColor,
                            fontSize: 20,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                        const SizedBox(height: 8),
                        Text(
                          'Review and sign the following message with your wallet.',
                          style: TextStyle(color: secondaryColor, fontSize: 14),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(height: 16),
                        Container(
                          padding: const EdgeInsets.all(16),
                          decoration: BoxDecoration(
                            gradient: LinearGradient(
                              colors: [
                                secondaryColor.withValues(alpha: 0.1),
                                primaryColor.withValues(alpha: 0.05),
                              ],
                              begin: Alignment.topLeft,
                              end: Alignment.bottomRight,
                            ),
                            borderRadius: BorderRadius.circular(12),
                            border: Border.all(
                                color: primaryColor.withValues(alpha: 0.2)),
                          ),
                          child: Column(
                            children: [
                              if (widget.appIcon.isNotEmpty)
                                Container(
                                  width: 48,
                                  height: 48,
                                  margin: const EdgeInsets.only(bottom: 12),
                                  decoration: BoxDecoration(
                                    shape: BoxShape.circle,
                                    border: Border.all(
                                        color: primaryColor, width: 2),
                                    boxShadow: [
                                      BoxShadow(
                                        color:
                                            primaryColor.withValues(alpha: 0.3),
                                        blurRadius: 8,
                                        offset: const Offset(0, 2),
                                      ),
                                    ],
                                  ),
                                  child: ClipOval(
                                    child: Image.network(
                                      widget.appIcon,
                                      fit: BoxFit.cover,
                                      errorBuilder: (_, __, ___) => Icon(
                                        Icons.message,
                                        color: secondaryColor,
                                        size: 24,
                                      ),
                                      loadingBuilder: (_, child, progress) =>
                                          progress == null
                                              ? child
                                              : CircularProgressIndicator(
                                                  strokeWidth: 2,
                                                  color: secondaryColor,
                                                ),
                                    ),
                                  ),
                                ),
                              Text(
                                widget.appTitle,
                                style: TextStyle(
                                  color: textColor,
                                  fontSize: 18,
                                  fontWeight: FontWeight.w500,
                                ),
                                textAlign: TextAlign.center,
                              ),
                              const SizedBox(height: 12),
                              if (widget.typedData != null) ...[
                                Container(
                                  padding: const EdgeInsets.all(12),
                                  decoration: BoxDecoration(
                                    color: primaryColor.withValues(alpha: 0.1),
                                    borderRadius: BorderRadius.circular(8),
                                  ),
                                  child: Column(
                                    crossAxisAlignment:
                                        CrossAxisAlignment.start,
                                    children: [
                                      Text(
                                        'Domain: ${widget.typedData!.domain.name}',
                                        style: TextStyle(
                                          color: textColor,
                                          fontSize: 16,
                                          fontWeight: FontWeight.bold,
                                        ),
                                      ),
                                      const SizedBox(height: 4),
                                      Text(
                                        'Chain ID: ${widget.typedData!.domain.chainId}',
                                        style: TextStyle(
                                          color: secondaryColor,
                                          fontSize: 14,
                                        ),
                                      ),
                                      Text(
                                        'Contract: ${widget.typedData!.domain.verifyingContract}',
                                        style: TextStyle(
                                          color: secondaryColor,
                                          fontSize: 14,
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                                const SizedBox(height: 12),
                                Container(
                                  constraints:
                                      const BoxConstraints(maxHeight: 200),
                                  child: SingleChildScrollView(
                                    child: Column(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.start,
                                      children: [
                                        Text(
                                          'Type: ${widget.typedData!.primaryType}',
                                          style: TextStyle(
                                            color: textColor,
                                            fontSize: 16,
                                            fontWeight: FontWeight.bold,
                                          ),
                                        ),
                                        const SizedBox(height: 8),
                                        ...widget.typedData!.message.entries
                                            .map(
                                          (e) => Padding(
                                            padding: const EdgeInsets.only(
                                                bottom: 4),
                                            child: Row(
                                              crossAxisAlignment:
                                                  CrossAxisAlignment.start,
                                              children: [
                                                Text(
                                                  '${e.key}: ',
                                                  style: TextStyle(
                                                    color: primaryColor,
                                                    fontSize: 14,
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                                Expanded(
                                                  child: Text(
                                                    e.value is Map
                                                        ? jsonEncode(e.value)
                                                        : e.value.toString(),
                                                    style: TextStyle(
                                                      color: textColor,
                                                      fontSize: 14,
                                                    ),
                                                  ),
                                                ),
                                              ],
                                            ),
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                              ] else ...[
                                Container(
                                  constraints:
                                      const BoxConstraints(maxHeight: 200),
                                  child: SingleChildScrollView(
                                    child: Text(
                                      widget.message ?? 'No data',
                                      style: TextStyle(
                                          color: textColor, fontSize: 16),
                                      textAlign: TextAlign.center,
                                    ),
                                  ),
                                ),
                              ],
                            ],
                          ),
                        ),
                        if (_error != null)
                          Padding(
                            padding: const EdgeInsets.only(top: 16),
                            child: Container(
                              padding: const EdgeInsets.all(12),
                              decoration: BoxDecoration(
                                color: theme.danger.withValues(alpha: 0.1),
                                borderRadius: BorderRadius.circular(8),
                              ),
                              child: Row(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  SvgPicture.asset(
                                    'assets/icons/warning.svg',
                                    width: 24,
                                    height: 24,
                                    colorFilter: ColorFilter.mode(
                                        theme.danger, BlendMode.srcIn),
                                  ),
                                  const SizedBox(width: 8),
                                  Text(
                                    _error!,
                                    style: TextStyle(
                                        color: theme.danger, fontSize: 14),
                                    textAlign: TextAlign.center,
                                  ),
                                ],
                              ),
                            ),
                          ),
                        if (appState.wallet!.authType == AuthMethod.none.name)
                          Padding(
                            padding: const EdgeInsets.only(top: 16),
                            child: SmartInput(
                              key: _passwordInputKey,
                              controller: _passwordController,
                              hint: 'Password',
                              fontSize: 18,
                              height: 56,
                              padding:
                                  const EdgeInsets.symmetric(horizontal: 20),
                              focusedBorderColor: primaryColor,
                              disabled: _loading,
                              obscureText: _obscurePassword,
                              rightIconPath: _obscurePassword
                                  ? 'assets/icons/close_eye.svg'
                                  : 'assets/icons/open_eye.svg',
                              onRightIconTap: () => setState(
                                  () => _obscurePassword = !_obscurePassword),
                              onChanged: (_) => setState(() => _error = null),
                            ),
                          ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
            Positioned(
              bottom: 0,
              left: 0,
              right: 0,
              child: Container(
                padding: EdgeInsets.only(
                    bottom: MediaQuery.viewInsetsOf(context).bottom),
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Center(
                    child: SwipeButton(
                      text: _loading ? 'Processing...' : 'Sign Message',
                      disabled: _loading,
                      backgroundColor: primaryColor,
                      textColor: textColor,
                      onSwipeComplete: () async {
                        _handleSignMessage(appState);
                      },
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

```