Project Path: modals

Source Tree:

```
modals
├── sign_tx.dart
├── secret_recovery_modal.dart
├── transaction_details_modal.dart
├── qr_scanner_modal.dart
├── backup_confirmation_modal.dart
├── manage_connections.dart
├── ledger_connect_dialog.dart
├── select_address.dart
├── manage_tokens.dart
├── transfer.dart
├── select_token.dart
├── password_change.dart
├── delete_wallet.dart
├── argon2.dart
├── add_contect.dart
├── app_connect.dart
├── wallet_header.dart
├── custom_network_modal.dart
└── node_selection_modal.dart

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/secret_recovery_modal.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/mixins/wallet_type.dart';
import 'package:zilpay/state/app_state.dart';
import '../../components/button.dart';
import '../../theme/app_theme.dart';

class SecretRecoveryModal extends StatelessWidget {
  final AppTheme theme;

  const SecretRecoveryModal({
    super.key,
    required this.theme,
  });

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final walletType = appState.wallet!.walletType;

    return Column(
      mainAxisSize: MainAxisSize.min,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Center(
          child: Container(
            width: 32,
            height: 4,
            margin: const EdgeInsets.only(top: 8, bottom: 16),
            decoration: BoxDecoration(
              color: theme.textSecondary.withValues(alpha: 0.3),
              borderRadius: BorderRadius.circular(2),
            ),
          ),
        ),
        Padding(
          padding: EdgeInsets.fromLTRB(
            16,
            0,
            16,
            MediaQuery.of(context).viewInsets.bottom + 16,
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              if (walletType.contains(WalletType.SecretPhrase.name)) ...[
                _buildOption(
                  title: 'Reveal Secret Recovery Phrase',
                  description: 'If you ever change browsers or move computers, '
                      'you will need this Secret Recovery Phrase to access '
                      'your accounts. Save them somewhere safe and secret.',
                  onPressed: () => _onRevealPhrase(context),
                  buttonText: 'Reveal',
                ),
                const SizedBox(height: 24)
              ],
              if (walletType.contains(WalletType.SecretKey.name) ||
                  walletType.contains(WalletType.SecretPhrase.name)) ...[
                _buildOption(
                  title: 'Show Private Keys',
                  description:
                      'Warning: Never disclose this key. Anyone with your '
                      'private keys can steal any assets held in your account.',
                  onPressed: () => _onShowPrivateKeys(context),
                  buttonText: 'Export',
                ),
                const SizedBox(height: 16),
              ]
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildOption({
    required String title,
    required String description,
    required VoidCallback onPressed,
    required String buttonText,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: TextStyle(
            color: theme.textPrimary,
            fontSize: 18,
            fontWeight: FontWeight.w500,
          ),
        ),
        const SizedBox(height: 8),
        Text(
          description,
          style: TextStyle(
            color: theme.textSecondary,
            fontSize: 14,
          ),
        ),
        const SizedBox(height: 16),
        SizedBox(
          width: double.infinity,
          child: CustomButton(
            text: buttonText,
            onPressed: onPressed,
            backgroundColor: Colors.red.withValues(alpha: 0.1),
            textColor: Colors.red,
            height: 48,
          ),
        ),
      ],
    );
  }

  void _onRevealPhrase(BuildContext context) {
    Navigator.of(context).pushNamed('/reveal_bip39');
  }

  void _onShowPrivateKeys(BuildContext context) {
    Navigator.of(context).pushNamed('/reveal_sk');
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/transaction_details_modal.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:intl/intl.dart';
import 'package:blockies/blockies.dart';
import 'package:zilpay/components/copy_content.dart';
import 'package:zilpay/components/image_cache.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/mixins/colors.dart';
import 'package:zilpay/mixins/icon.dart';
import 'package:zilpay/src/rust/models/ftoken.dart';
import 'package:zilpay/src/rust/models/transactions/history.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/theme/app_theme.dart';

void showTransactionDetailsModal({
  required BuildContext context,
  required HistoricalTransactionInfo transaction,
}) {
  showModalBottomSheet<void>(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (BuildContext context) {
      return Padding(
        padding: EdgeInsets.only(
          bottom: MediaQuery.of(context).viewInsets.bottom,
        ),
        child: _TransactionDetailsModalContent(
          transaction: transaction,
        ),
      );
    },
  );
}

class _TransactionDetailsModalContent extends StatelessWidget {
  final HistoricalTransactionInfo transaction;

  const _TransactionDetailsModalContent({
    required this.transaction,
  });

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);

    final double headerHeight = 84.0;
    final double itemHeight = 60.0;
    final double bottomPadding = MediaQuery.of(context).padding.bottom;
    final int infoItemsCount = _getInfoItemsCount();
    final double totalContentHeight =
        headerHeight + (itemHeight * infoItemsCount) + bottomPadding;
    final double maxHeight = MediaQuery.of(context).size.height * 0.9;
    final double containerHeight = totalContentHeight.clamp(0.0, maxHeight);

    return Container(
      height: containerHeight,
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: const BorderRadius.vertical(
          top: Radius.circular(20),
        ),
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          _buildHeader(theme, adaptivePadding),
          Expanded(
            child: SingleChildScrollView(
              padding: EdgeInsets.symmetric(
                horizontal: adaptivePadding,
                vertical: adaptivePadding / 2,
              ),
              child: Column(
                children: [
                  _buildTokenIcon(appState),
                  const SizedBox(height: 8),
                  _buildDetailItem(
                    context,
                    'Status',
                    _getStatusWidget(theme),
                    theme,
                  ),
                  _buildDetailItem(
                    context,
                    'Transaction Hash',
                    transaction.transactionHash,
                    theme,
                    isCopyable: true,
                  ),
                  _buildDetailItem(
                    context,
                    'Amount',
                    _formatAmount(appState),
                    theme,
                  ),
                  _buildDetailItem(
                    context,
                    'Sender',
                    transaction.sender,
                    theme,
                    isCopyable: true,
                  ),
                  _buildDetailItem(
                    context,
                    'Recipient',
                    transaction.recipient,
                    theme,
                    isCopyable: true,
                  ),
                  if (transaction.contractAddress != null)
                    _buildDetailItem(
                      context,
                      'Contract Address',
                      transaction.contractAddress!,
                      theme,
                      isCopyable: true,
                    ),
                  _buildDetailItem(
                    context,
                    'Timestamp',
                    _formatTimestamp(),
                    theme,
                  ),
                  if (transaction.blockNumber != null)
                    _buildDetailItem(
                      context,
                      'Block Number',
                      transaction.blockNumber.toString(),
                      theme,
                    ),
                  _buildDetailItem(
                    context,
                    'Fee',
                    _formatFee(appState),
                    theme,
                  ),
                  if (transaction.gasUsed != null)
                    _buildDetailItem(
                      context,
                      'Gas Used',
                      transaction.gasUsed.toString(),
                      theme,
                    ),
                  if (transaction.gasLimit != null)
                    _buildDetailItem(
                      context,
                      'Gas Limit',
                      '${transaction.gasLimit} Wei',
                      theme,
                    ),
                  if (transaction.gasPrice != null)
                    _buildDetailItem(
                      context,
                      'Gas Price',
                      _formatGasPrice(transaction.gasPrice!),
                      theme,
                    ),
                  if (transaction.effectiveGasPrice != null)
                    _buildDetailItem(
                      context,
                      'Effective Gas Price',
                      _formatGasPrice(transaction.effectiveGasPrice!),
                      theme,
                    ),
                  if (transaction.blobGasUsed != null)
                    _buildDetailItem(
                      context,
                      'Blob Gas Used',
                      transaction.blobGasUsed.toString(),
                      theme,
                    ),
                  if (transaction.blobGasPrice != null)
                    _buildDetailItem(
                      context,
                      'Blob Gas Price',
                      _formatGasPrice(transaction.blobGasPrice!),
                      theme,
                    ),
                  _buildDetailItem(
                    context,
                    'Nonce',
                    transaction.nonce.toString(),
                    theme,
                  ),
                  _buildDetailItem(
                    context,
                    'Chain Type',
                    transaction.chainType,
                    theme,
                  ),
                  _buildDetailItem(
                    context,
                    'Network',
                    _getNetworkName(appState, transaction.chainHash),
                    theme,
                  ),
                  if (transaction.error != null)
                    _buildDetailItem(
                      context,
                      'Error',
                      transaction.error!,
                      theme,
                    ),
                ],
              ),
            ),
          ),
          SizedBox(height: bottomPadding),
        ],
      ),
    );
  }

  Widget _buildHeader(AppTheme theme, double padding) {
    return Column(
      children: [
        Container(
          width: 36,
          height: 4,
          margin: EdgeInsets.symmetric(vertical: padding),
          decoration: BoxDecoration(
            color: theme.textSecondary.withValues(alpha: 0.5),
            borderRadius: BorderRadius.circular(2),
          ),
        ),
        Padding(
          padding: EdgeInsets.symmetric(horizontal: padding),
          child: Text(
            transaction.title ?? 'Transaction Details',
            style: TextStyle(
              color: theme.textPrimary,
              fontSize: 20,
              fontWeight: FontWeight.w600,
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildTokenIcon(AppState appState) {
    final theme = appState.currentTheme;
    FTokenInfo? token;
    try {
      token = appState.wallet!.tokens.firstWhere((t) =>
          t.symbol == transaction.tokenInfo?.symbol &&
          t.addrType == appState.account?.addrType);
    } catch (e) {
      token = null;
    }

    return Container(
      width: 50,
      height: 50,
      decoration: BoxDecoration(
        shape: BoxShape.circle,
        border: Border.all(
          color: theme.primaryPurple.withValues(alpha: 0.1),
          width: 2,
        ),
      ),
      child: ClipOval(
        child: AsyncImage(
          url: transaction.icon ??
              (token != null
                  ? viewTokenIcon(
                      token,
                      appState.chain!.chainId,
                      theme.value,
                    )
                  : null),
          width: 50,
          height: 50,
          fit: BoxFit.contain,
          errorWidget: Blockies(
            seed: transaction.transactionHash,
            color: getWalletColor(0),
            bgColor: theme.primaryPurple,
            spotColor: theme.background,
            size: 8,
          ),
          loadingWidget: const Center(
            child: CircularProgressIndicator(
              strokeWidth: 2,
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildDetailItem(
    BuildContext context,
    String label,
    dynamic value,
    AppTheme theme, {
    bool isCopyable = false,
  }) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 6),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Expanded(
            flex: 2,
            child: Text(
              label,
              style: TextStyle(
                color: theme.textSecondary.withValues(alpha: 0.7),
                fontSize: 14,
                fontWeight: FontWeight.w500,
              ),
            ),
          ),
          Expanded(
            flex: 3,
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisAlignment: MainAxisAlignment.end,
              children: [
                if (isCopyable)
                  CopyContent(
                    address: value.toString(),
                    isShort: true,
                  )
                else
                  Expanded(
                    child: value is Widget
                        ? value
                        : Text(
                            value.toString(),
                            style: TextStyle(
                              color: theme.textPrimary,
                              fontSize: 14,
                              fontWeight: FontWeight.w400,
                            ),
                            textAlign: TextAlign.right,
                            overflow: TextOverflow.ellipsis,
                          ),
                  ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _getStatusWidget(AppTheme theme) {
    switch (transaction.status) {
      case TransactionStatusInfo.pending:
        return Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            const SizedBox(
              width: 16,
              height: 16,
              child: CircularProgressIndicator(
                strokeWidth: 2,
                valueColor: AlwaysStoppedAnimation<Color>(Colors.orange),
              ),
            ),
            const SizedBox(width: 8),
            Text(
              'Pending',
              style: TextStyle(
                color: Colors.orange,
                fontSize: 14,
                fontWeight: FontWeight.w400,
              ),
            ),
          ],
        );
      case TransactionStatusInfo.confirmed:
        return Text(
          'Confirmed',
          style: TextStyle(
            color: theme.success,
            fontSize: 14,
            fontWeight: FontWeight.w400,
          ),
        );
      case TransactionStatusInfo.rejected:
        return Text(
          'Rejected',
          style: TextStyle(
            color: theme.danger,
            fontSize: 14,
            fontWeight: FontWeight.w400,
          ),
        );
    }
  }

  String _formatAmount(AppState appState) {
    if (transaction.tokenInfo != null) {
      final formatter = NumberFormat('#,##0.##################');
      final decimals = transaction.tokenInfo!.decimals;
      final value =
          double.parse(transaction.tokenInfo?.value ?? transaction.amount) /
              BigInt.from(10).pow(decimals).toDouble();
      return '${formatter.format(value)} ${transaction.tokenInfo!.symbol}';
    }
    return transaction.amount;
  }

  String _formatFee(AppState appState) {
    final formatter = NumberFormat('#,##0.##################');
    final token = appState.wallet!.tokens.first;
    final decimals = transaction.chainType == "EVM" && token.decimals < 18
        ? 18
        : token.decimals;
    final value =
        transaction.fee.toDouble() / BigInt.from(10).pow(decimals).toDouble();
    return '${formatter.format(value)} ${token.symbol}';
  }

  String _formatTimestamp() {
    final dateTime = DateTime.fromMillisecondsSinceEpoch(
        transaction.timestamp.toInt() * 1000);
    return DateFormat('MMM dd, yyyy HH:mm:ss').format(dateTime);
  }

  String _formatGasPrice(BigInt price) {
    double gwei = price / BigInt.from(10).pow(9);
    if (gwei < 1) {
      return '$price Wei';
    } else {
      return '${gwei.toString()} Gwei';
    }
  }

  String _getNetworkName(AppState appState, BigInt chainHash) {
    final chain = appState.getChain(chainHash)?.chain;
    return chain ?? 'Unknown Network ($chainHash)';
  }

  int _getInfoItemsCount() {
    int count = 11; // Базовые обязательные поля + Network вместо ChainHash
    if (transaction.contractAddress != null) count++;
    if (transaction.blockNumber != null) count++;
    if (transaction.gasUsed != null) count++;
    if (transaction.gasLimit != null) count++;
    if (transaction.gasPrice != null) count++;
    if (transaction.effectiveGasPrice != null) count++;
    if (transaction.blobGasUsed != null) count++;
    if (transaction.blobGasPrice != null) count++;
    if (transaction.error != null) count++;
    return count;
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/qr_scanner_modal.dart`:

```dart
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:mobile_scanner/mobile_scanner.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/theme/app_theme.dart';

void showQRScannerModal({
  required BuildContext context,
  required Function(String) onScanned,
}) {
  showModalBottomSheet<void>(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (BuildContext context) {
      return SizedBox(
        height: MediaQuery.of(context).size.height * 0.94,
        child: _QRScannerModalContent(
          onScanned: onScanned,
        ),
      );
    },
  );
}

class _QRScannerModalContent extends StatefulWidget {
  final Function(String) onScanned;

  const _QRScannerModalContent({
    required this.onScanned,
  });

  @override
  State<_QRScannerModalContent> createState() => _QRScannerModalContentState();
}

class _QRScannerModalContentState extends State<_QRScannerModalContent>
    with WidgetsBindingObserver {
  late MobileScannerController controller;
  StreamSubscription<Object?>? _subscription;
  bool hasError = false;
  String errorMessage = '';

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);

    controller = MobileScannerController(
      formats: [BarcodeFormat.qrCode],
    );

    _initializeScanner();
  }

  Future<void> _initializeScanner() async {
    try {
      _subscription = controller.barcodes.listen(_handleBarcode);
      await controller.start();
      if (!mounted) return;

      setState(() {
        hasError = !controller.value.isInitialized;
        errorMessage = 'Camera permission denied';
      });
    } catch (e) {
      if (!mounted) return;
      setState(() {
        hasError = true;
        errorMessage = e.toString();
      });
    }
  }

  void _handleBarcode(Object? capture) {
    if (capture == null) return;

    if (capture is BarcodeCapture) {
      final String? code = capture.barcodes.first.rawValue;
      if (code != null) {
        widget.onScanned(code);
        Navigator.pop(context);
      }
    }
  }

  Future<void> _openAppSettings() async {
    if (!mounted) return;
    await controller.stop();

    // ignore: use_build_context_synchronously
    if (Theme.of(context).platform == TargetPlatform.iOS) {
      await openAppSettings();
    } else {
      await openAppSettings();
    }
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    unawaited(_subscription?.cancel());
    _subscription = null;
    controller.dispose();
    super.dispose();
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    if (hasError) return;

    switch (state) {
      case AppLifecycleState.resumed:
        _subscription = controller.barcodes.listen(_handleBarcode);
        unawaited(controller.start());
        break;
      case AppLifecycleState.inactive:
        unawaited(_subscription?.cancel());
        _subscription = null;
        unawaited(controller.stop());
        break;
      default:
        break;
    }
  }

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;

    return Container(
      decoration: const BoxDecoration(
        color: Colors.black,
        borderRadius: BorderRadius.vertical(
          top: Radius.circular(20),
        ),
      ),
      child: Column(
        children: [
          _buildHeader(theme),
          const SizedBox(height: 20),
          // Modified scanner container
          hasError ? _buildErrorView() : _buildScannerView(theme),
          const SizedBox(height: 30),
        ],
      ),
    );
  }

  Widget _buildHeader(AppTheme theme) {
    return Column(
      children: [
        Container(
          width: 36,
          height: 4,
          margin: const EdgeInsets.symmetric(vertical: 16),
          decoration: BoxDecoration(
            color: Colors.white.withValues(alpha: 0.5),
            borderRadius: BorderRadius.circular(2),
          ),
        ),
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              const Text(
                'Scan',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 20,
                  fontWeight: FontWeight.w600,
                ),
              ),
              IconButton(
                  onPressed: () => Navigator.pop(context),
                  icon: SvgPicture.asset(
                    'assets/icons/close.svg',
                    width: 24,
                    height: 24,
                    colorFilter: ColorFilter.mode(
                      theme.textPrimary,
                      BlendMode.srcIn,
                    ),
                  )),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildErrorView() {
    return Center(
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 24),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(
              Icons.camera_alt_outlined,
              color: Colors.white54,
              size: 64,
            ),
            const SizedBox(height: 24),
            const Text(
              'Camera Access Required',
              style: TextStyle(
                color: Colors.white,
                fontSize: 20,
                fontWeight: FontWeight.w600,
              ),
            ),
            const SizedBox(height: 12),
            Text(
              errorMessage,
              textAlign: TextAlign.center,
              style: const TextStyle(
                color: Colors.white70,
                fontSize: 16,
              ),
            ),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: _openAppSettings,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(
                  horizontal: 24,
                  vertical: 12,
                ),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
              child: const Text(
                'Open Settings',
                style: TextStyle(
                  color: Colors.black,
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildScannerView(AppTheme theme) {
    return Center(
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            width: MediaQuery.of(context).size.width * 0.8,
            height: MediaQuery.of(context).size.width * 0.8,
            margin: const EdgeInsets.symmetric(horizontal: 24),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(16),
            ),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(16),
              child: MobileScanner(
                controller: controller,
                overlayBuilder: (context, constraints) {
                  return Container(
                    decoration: BoxDecoration(
                      border: Border.all(
                        color: Colors.white,
                        width: 3,
                      ),
                      borderRadius: BorderRadius.circular(16),
                    ),
                  );
                },
              ),
            ),
          ),
        ],
      ),
    );
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/backup_confirmation_modal.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/theme/app_theme.dart';

void showBackupConfirmationModal({
  required BuildContext context,
  required Function(bool) onConfirmed,
}) {
  showModalBottomSheet<void>(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (BuildContext context) {
      return Padding(
        padding: EdgeInsets.only(
          bottom: MediaQuery.of(context).viewInsets.bottom,
        ),
        child: _BackupConfirmationContent(
          onConfirmed: onConfirmed,
        ),
      );
    },
  );
}

class _BackupConfirmationContent extends StatefulWidget {
  final Function(bool) onConfirmed;

  const _BackupConfirmationContent({
    required this.onConfirmed,
  });

  @override
  State<_BackupConfirmationContent> createState() =>
      _BackupConfirmationContentState();
}

class _BackupConfirmationContentState
    extends State<_BackupConfirmationContent> {
  final Map<String, bool> _confirmations = {
    'I have written down all': false,
    'I have safely stored the backup': false,
    'I am sure I won\'t lose the backup': false,
    'I understand not to share these words with anyone': false,
  };

  void _updateConfirmation(String key, bool value) {
    setState(() {
      _confirmations[key] = value;
    });

    if (_confirmations.values.every((confirmed) => confirmed)) {
      widget.onConfirmed(true);
      Navigator.of(context).pop();
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<AppState>(context).currentTheme;

    return Container(
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: const BorderRadius.vertical(
          top: Radius.circular(20),
        ),
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            width: 36,
            height: 4,
            margin: const EdgeInsets.symmetric(vertical: 16),
            decoration: BoxDecoration(
              color: theme.textSecondary.withValues(alpha: 0.5),
              borderRadius: BorderRadius.circular(2),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(16),
            child: Text(
              'Backup Confirmation',
              style: TextStyle(
                color: theme.textPrimary,
                fontSize: 20,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
          ..._confirmations.entries.map((entry) => _ConfirmationItem(
                text: entry.key,
                isConfirmed: entry.value,
                onConfirmed: (value) => _updateConfirmation(entry.key, value),
                theme: theme,
              )),
          const SizedBox(height: 24),
        ],
      ),
    );
  }
}

class _ConfirmationItem extends StatelessWidget {
  final String text;
  final bool isConfirmed;
  final Function(bool) onConfirmed;
  final AppTheme theme;

  const _ConfirmationItem({
    required this.text,
    required this.isConfirmed,
    required this.onConfirmed,
    required this.theme,
  });

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 2),
      child: Container(
        decoration: BoxDecoration(
          color: isConfirmed
              ? theme.background
              : theme.background.withValues(alpha: 0.2),
          borderRadius: BorderRadius.circular(12),
        ),
        child: CheckboxListTile(
          title: Text(
            text,
            style: TextStyle(
              color: theme.textSecondary,
              fontSize: 16,
            ),
          ),
          value: isConfirmed,
          onChanged: (value) => onConfirmed(value!),
          controlAffinity: ListTileControlAffinity.leading,
          activeColor: theme.primaryPurple,
        ),
      ),
    );
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/manage_connections.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/state/app_state.dart';
import '../theme/app_theme.dart' as theme;

void showConnectedDappsModal({
  required BuildContext context,
  Function(String)? onDappDisconnect,
}) {
  showModalBottomSheet(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (BuildContext context) {
      return Padding(
        padding: EdgeInsets.only(
          bottom: MediaQuery.of(context).viewInsets.bottom,
        ),
        child: _ConnectedDappsModalContent(
          onDappDisconnect: onDappDisconnect,
        ),
      );
    },
  );
}

class _ConnectedDappsModalContent extends StatefulWidget {
  final Function(String)? onDappDisconnect;

  const _ConnectedDappsModalContent({
    this.onDappDisconnect,
  });

  @override
  State<_ConnectedDappsModalContent> createState() =>
      _ConnectedDappsModalContentState();
}

class _ConnectedDappsModalContentState
    extends State<_ConnectedDappsModalContent> {
  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<AppState>(context).currentTheme;
    final appState = Provider.of<AppState>(context);
    final connectedDapps = appState.connections;

    // Calculate container height based on content
    final double headerHeight = 84.0;
    final double searchBarHeight = 80.0;
    final double dappItemHeight = 72.0;
    final double bottomPadding = MediaQuery.of(context).padding.bottom;

    // Calculate total content height
    final double totalContentHeight = headerHeight +
        searchBarHeight +
        (connectedDapps.length * dappItemHeight) +
        bottomPadding;

    // Limit height to 70% of screen height
    final double maxHeight = MediaQuery.of(context).size.height * 0.7;
    final double containerHeight = totalContentHeight.clamp(0.0, maxHeight);

    return Container(
      height: containerHeight,
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: const BorderRadius.vertical(
          top: Radius.circular(20),
        ),
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          // Drag Handle
          Container(
            width: 36,
            height: 4,
            margin: const EdgeInsets.symmetric(vertical: 16),
            decoration: BoxDecoration(
              color: theme.textSecondary.withValues(alpha: 0.5),
              borderRadius: BorderRadius.circular(2),
            ),
          ),

          // Search Bar
          Padding(
            padding: const EdgeInsets.all(16),
            child: SmartInput(
              controller: _searchController,
              hint: 'Search DApps',
              onChanged: (value) => setState(() => _searchQuery = value),
              borderColor: theme.textPrimary,
              focusedBorderColor: theme.primaryPurple,
              height: 48,
              fontSize: 16,
              padding: const EdgeInsets.symmetric(horizontal: 16),
            ),
          ),

          // DApps List
          Expanded(
            child: ListView(
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              children: _buildDappItems(theme, appState),
            ),
          ),

          // Bottom Padding
          SizedBox(height: bottomPadding),
        ],
      ),
    );
  }

  List<Widget> _buildDappItems(theme.AppTheme theme, AppState appState) {
    if (appState.wallet == null) {
      return [];
    }

    final filteredDapps = appState.connections
        .where((dapp) =>
            dapp.domain.toLowerCase().contains(_searchQuery.toLowerCase()) ||
            dapp.title.toLowerCase().contains(_searchQuery.toLowerCase()))
        .toList();

    final List<Widget> items = [];
    for (var i = 0; i < filteredDapps.length; i++) {
      final dapp = filteredDapps[i];
      items.add(
        _DappListItem(
          name: dapp.title,
          url: dapp.domain,
          iconUrl: dapp.favicon ?? "",
          lastConnected: fromLargeBigInt(dapp.lastConnected),
          onDisconnect: () => widget.onDappDisconnect?.call(dapp.domain),
        ),
      );

      // Add divider if not the last item
      if (i < filteredDapps.length - 1) {
        items.add(
          Divider(
            height: 1,
            color: theme.textSecondary.withValues(alpha: 0.1),
          ),
        );
      }
    }

    return items;
  }

  DateTime fromLargeBigInt(BigInt timestamp) {
    return DateTime.fromMillisecondsSinceEpoch(int.parse(timestamp.toString()));
  }
}

class _DappListItem extends StatelessWidget {
  final String name;
  final String url;
  final String iconUrl;
  final DateTime lastConnected;
  final VoidCallback? onDisconnect;

  const _DappListItem({
    required this.name,
    required this.url,
    required this.iconUrl,
    required this.lastConnected,
    this.onDisconnect,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<AppState>(context).currentTheme;
    const double iconSize = 40.0;

    return Container(
      margin: EdgeInsets.zero,
      padding: const EdgeInsets.symmetric(vertical: 12),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          Container(
            width: iconSize,
            height: iconSize,
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(12),
            ),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(12),
              child: Image.network(
                iconUrl,
                width: iconSize,
                height: iconSize,
                fit: BoxFit.cover,
                errorBuilder: (context, error, stackTrace) {
                  return Container(
                    width: iconSize,
                    height: iconSize,
                    decoration: BoxDecoration(
                      color: theme.textSecondary.withValues(alpha: 0.1),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Center(
                      child: Icon(
                        Icons.link,
                        size: 24,
                        color: theme.textSecondary.withValues(alpha: 0.5),
                      ),
                    ),
                  );
                },
                loadingBuilder: (context, child, loadingProgress) {
                  if (loadingProgress == null) return child;
                  return Container(
                    width: iconSize,
                    height: iconSize,
                    decoration: BoxDecoration(
                      color: theme.textSecondary.withValues(alpha: 0.1),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Center(
                      child: SizedBox(
                        width: 20,
                        height: 20,
                        child: CircularProgressIndicator(
                          strokeWidth: 2,
                          color: theme.textSecondary.withValues(alpha: 0.5),
                          value: loadingProgress.expectedTotalBytes != null
                              ? loadingProgress.cumulativeBytesLoaded /
                                  loadingProgress.expectedTotalBytes!
                              : null,
                        ),
                      ),
                    ),
                  );
                },
              ),
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  name,
                  style: TextStyle(
                    color: theme.textPrimary,
                    fontSize: 16,
                    fontWeight: FontWeight.w500,
                    height: 1.2,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  url,
                  style: TextStyle(
                    color: theme.textSecondary,
                    fontSize: 14,
                    height: 1.2,
                  ),
                ),
                const SizedBox(height: 2),
                Text(
                  'Connected ${_formatLastConnected(lastConnected)}',
                  style: TextStyle(
                    color: theme.textSecondary,
                    fontSize: 12,
                    height: 1.2,
                  ),
                ),
              ],
            ),
          ),
          IconButton(
            onPressed: onDisconnect,
            icon: SvgPicture.asset(
              'assets/icons/disconnect.svg',
              width: 24,
              height: 24,
              colorFilter: ColorFilter.mode(theme.danger, BlendMode.srcIn),
            ),
          ),
        ],
      ),
    );
  }

  String _formatLastConnected(DateTime date) {
    final now = DateTime.now();
    final difference = now.difference(date);

    if (difference.inDays > 0) {
      return '${difference.inDays}d ago';
    } else if (difference.inHours > 0) {
      return '${difference.inHours}h ago';
    } else if (difference.inMinutes > 0) {
      return '${difference.inMinutes}m ago';
    } else {
      return 'just now';
    }
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/ledger_connect_dialog.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:zilpay/components/biometric_switch.dart';
import 'package:zilpay/components/counter.dart';
import 'package:zilpay/components/load_button.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/services/biometric_service.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/state/app_state.dart';

class LedgerConnectDialog extends StatefulWidget {
  final String? walletName;
  final AuthMethod biometricType;
  final VoidCallback? onClose;
  final Future<void> Function(int, String, bool)? onConnect;

  const LedgerConnectDialog({
    super.key,
    this.onClose,
    this.onConnect,
    this.biometricType = AuthMethod.none,
    this.walletName = 'Ledger',
  });

  @override
  State<LedgerConnectDialog> createState() => _LedgerConnectDialog();
}

class _LedgerConnectDialog extends State<LedgerConnectDialog> {
  final _btnController = RoundedLoadingButtonController();
  final _walletNameController = TextEditingController();

  int _index = 0;
  bool _loading = false;
  bool _useBiometric = false;
  String _errorMessage = '';

  @override
  void initState() {
    super.initState();
    _walletNameController.text = widget.walletName!;
  }

  Future<void> _onConnect() async {
    if (_walletNameController.text.trim().isEmpty) {
      setState(() => _errorMessage = 'Wallet name cannot be empty');
      return;
    }

    if (_walletNameController.text.length > 24) {
      setState(() => _errorMessage = 'Wallet name is too long');
      return;
    }

    if (widget.onConnect != null) {
      try {
        setState(() {
          _loading = true;
          _errorMessage = '';
        });
        _btnController.start();

        await widget.onConnect!(
            _index, _walletNameController.text, _useBiometric);

        _btnController.success();
        await Future.delayed(const Duration(milliseconds: 300));
      } catch (e) {
        setState(() => _errorMessage = e.toString());
        _btnController.error();
        await Future.delayed(const Duration(milliseconds: 500));
      } finally {
        if (mounted) {
          setState(() => _loading = false);
          _btnController.reset();
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<AppState>(context).currentTheme;
    final viewInsets = MediaQuery.of(context).viewInsets;
    final screenHeight = MediaQuery.of(context).size.height;
    final maxHeight = screenHeight - (screenHeight * 0.1);

    return AnimatedContainer(
      duration: const Duration(milliseconds: 20),
      padding: EdgeInsets.only(bottom: viewInsets.bottom),
      child: Wrap(
        children: [
          Container(
            constraints: BoxConstraints(
              maxHeight: maxHeight,
            ),
            decoration: BoxDecoration(
              color: theme.background,
              borderRadius: const BorderRadius.only(
                topLeft: Radius.circular(16),
                topRight: Radius.circular(16),
              ),
            ),
            child: SingleChildScrollView(
              physics: const ClampingScrollPhysics(),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  const SizedBox(height: 8),
                  Container(
                    width: 36,
                    height: 4,
                    decoration: BoxDecoration(
                      color: Colors.grey[600],
                      borderRadius: BorderRadius.circular(2),
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.all(24),
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        const SizedBox(height: 16),
                        SmartInput(
                          controller: _walletNameController,
                          hint: "Wallet Name",
                          fontSize: 18,
                          height: 50,
                          padding: const EdgeInsets.symmetric(horizontal: 20),
                          focusedBorderColor: theme.primaryPurple,
                          disabled: _loading,
                          onChanged: (value) {
                            if (_errorMessage.isNotEmpty) {
                              setState(() => _errorMessage = '');
                            }
                          },
                        ),
                        if (_errorMessage.isNotEmpty) ...[
                          const SizedBox(height: 8),
                          Text(
                            _errorMessage,
                            style: TextStyle(
                              color: theme.danger,
                              fontSize: 14,
                              fontWeight: FontWeight.w500,
                            ),
                            textAlign: TextAlign.center,
                          ),
                        ],
                        const SizedBox(height: 16),
                        Counter(
                          iconSize: 32,
                          iconColor: theme.textPrimary,
                          animationDuration: const Duration(milliseconds: 300),
                          numberStyle: TextStyle(
                            fontSize: 32,
                            fontWeight: FontWeight.bold,
                            color: theme.textPrimary,
                          ),
                          initialValue: 0,
                          disabled: _loading,
                          onChanged: !_loading
                              ? (value) {
                                  setState(() {
                                    _index = value;
                                  });
                                }
                              : null,
                        ),
                        const SizedBox(height: 16),
                        BiometricSwitch(
                          biometricType: widget.biometricType,
                          value: _useBiometric,
                          disabled: _loading,
                          onChanged: (value) {
                            setState(() => _useBiometric = value);
                          },
                        ),
                        const SizedBox(height: 16),
                        SizedBox(
                          width: double.infinity,
                          child: RoundedLoadingButton(
                            controller: _btnController,
                            onPressed: _onConnect,
                            successIcon: SvgPicture.asset(
                              'assets/icons/ok.svg',
                              width: 24,
                              height: 24,
                              colorFilter: ColorFilter.mode(
                                theme.textPrimary,
                                BlendMode.srcIn,
                              ),
                            ),
                            child: Text(
                              'Connect',
                              style: TextStyle(
                                color: theme.textPrimary,
                                fontSize: 18,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                        ),
                        const SizedBox(height: 16),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/select_address.dart`:

```dart
import 'package:blockies/blockies.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/address_avatar.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/mixins/addr.dart';
import 'package:zilpay/mixins/colors.dart';
import 'package:zilpay/modals/qr_scanner_modal.dart';
import 'package:zilpay/src/rust/api/methods.dart';
import 'package:zilpay/src/rust/api/qrcode.dart';
import 'package:zilpay/src/rust/models/qrcode.dart';
import 'package:zilpay/state/app_state.dart';

void showAddressSelectModal({
  required BuildContext context,
  required Function(QRcodeScanResultInfo, String) onAddressSelected,
}) {
  showModalBottomSheet<void>(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (BuildContext context) {
      return Padding(
        padding: EdgeInsets.only(
          bottom: MediaQuery.of(context).viewInsets.bottom,
        ),
        child: _AddressSelectModalContent(
          onAddressSelected: onAddressSelected,
        ),
      );
    },
  );
}

class _AddressSelectModalContent extends StatefulWidget {
  final Function(QRcodeScanResultInfo, String) onAddressSelected;

  const _AddressSelectModalContent({
    required this.onAddressSelected,
  });

  @override
  State<_AddressSelectModalContent> createState() =>
      _AddressSelectModalContentState();
}

class _AddressSelectModalContentState
    extends State<_AddressSelectModalContent> {
  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<AppState>(context).currentTheme;
    final appState = Provider.of<AppState>(context);

    final double headerHeight = 84.0;
    final double searchBarHeight = 80.0;
    final double sectionHeaderHeight = 40.0;
    final double addressItemHeight = 72.0;
    final double bottomPadding = MediaQuery.of(context).padding.bottom;

    // Calculate total height based on all sections
    final double totalContentHeight = headerHeight +
        searchBarHeight +
        (sectionHeaderHeight * 3) + // 3 section headers
        (addressItemHeight *
            (_getFilteredMyAccounts(appState).length +
                _getFilteredAddressBook(appState).length +
                _getFilteredHistory(appState).length)) +
        bottomPadding;

    final double maxHeight = MediaQuery.of(context).size.height * 0.8;
    final double containerHeight = totalContentHeight.clamp(0.0, maxHeight);

    return Container(
      height: containerHeight,
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: const BorderRadius.vertical(
          top: Radius.circular(20),
        ),
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            width: 36,
            height: 4,
            margin: const EdgeInsets.symmetric(vertical: 16),
            decoration: BoxDecoration(
              color: theme.textSecondary.withValues(alpha: 0.5),
              borderRadius: BorderRadius.circular(2),
            ),
          ),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            child: Text(
              'Select Address',
              style: TextStyle(
                color: theme.textPrimary,
                fontSize: 20,
                fontWeight: FontWeight.w600,
              ),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(16),
            child: SmartInput(
              controller: _searchController,
              hint: 'Search / Address / ENS',
              leftIconPath: 'assets/icons/qrcode.svg',
              onChanged: (value) async {
                bool isAddress = await isCryptoAddress(addr: value);

                if (isAddress) {
                  QRcodeScanResultInfo params =
                      QRcodeScanResultInfo(recipient: value);
                  widget.onAddressSelected(params, "Unknown");
                  if (!mounted) return;
                  // ignore: use_build_context_synchronously
                  Navigator.pop(context);
                } else {
                  setState(() => _searchQuery = value);
                }
              },
              onLeftIconTap: () async {
                showQRScannerModal(
                  context: context,
                  onScanned: _parseQrcodRes,
                );
              },
              borderColor: theme.textPrimary,
              focusedBorderColor: theme.primaryPurple,
              height: 48,
              fontSize: 16,
              padding: const EdgeInsets.symmetric(horizontal: 16),
            ),
          ),
          Expanded(
            child: ListView(
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              children: [
                _buildSection(
                  appState,
                  'My Accounts',
                  _getFilteredMyAccounts(appState),
                ),
                _buildSection(
                  appState,
                  'Address Book',
                  _getFilteredAddressBook(appState),
                ),
                _buildSection(
                  appState,
                  'History',
                  _getFilteredHistory(appState),
                ),
              ],
            ),
          ),
          SizedBox(height: bottomPadding),
        ],
      ),
    );
  }

  Widget _buildSection(
    AppState state,
    String title,
    List<AddressItem> items,
  ) {
    final theme = state.currentTheme;

    if (items.isEmpty) return const SizedBox.shrink();

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.symmetric(vertical: 8),
          child: Text(
            title,
            style: TextStyle(
              color: theme.textSecondary,
              fontSize: 14,
              fontWeight: FontWeight.w600,
            ),
          ),
        ),
        ...List.generate(items.length, (index) {
          final item = items[index];
          return Column(
            children: [
              _buildAddressItem(state, item),
              if (index < items.length - 1)
                Divider(
                  height: 1,
                  thickness: 1,
                  color: theme.textSecondary.withValues(alpha: 0.1),
                  endIndent: 16,
                ),
            ],
          );
        }),
        const SizedBox(height: 16),
      ],
    );
  }

  Widget _buildAddressItem(AppState state, AddressItem item) {
    final theme = state.currentTheme;
    final account =
        state.wallet?.accounts.firstWhere((a) => a.addr == item.address);

    return InkWell(
      onTap: () {
        QRcodeScanResultInfo params =
            QRcodeScanResultInfo(recipient: item.address);
        widget.onAddressSelected(params, item.name);
        Navigator.pop(context);
      },
      child: Container(
        height: 72,
        padding: const EdgeInsets.all(12),
        child: Row(
          children: [
            if (account != null)
              AvatarAddress(
                avatarSize: 50,
                account: account,
              )
            else
              ClipOval(
                child: SizedBox(
                  width: 40,
                  height: 40,
                  child: Blockies(
                    seed: item.address,
                    color: getWalletColor(0),
                    bgColor: theme.primaryPurple,
                    spotColor: theme.background,
                    size: 8,
                  ),
                ),
              ),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(
                    item.name,
                    style: TextStyle(
                      color: theme.textPrimary,
                      fontSize: 16,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                  Text(
                    shortenAddress(item.address),
                    style: TextStyle(
                      color: theme.textSecondary,
                      fontSize: 14,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _parseQrcodRes(String data) async {
    try {
      QRcodeScanResultInfo parsed = await parseQrcodeStr(data: data);

      widget.onAddressSelected(parsed, "Unknown");
    } catch (e) {
      debugPrint("error parse qrcode: $e");
    }
  }

  List<AddressItem> _getFilteredMyAccounts(AppState appState) {
    if (appState.wallet == null) {
      return [];
    }

    final accounts = appState.wallet!.accounts;

    return accounts
        .where((account) =>
            account.name.toLowerCase().contains(_searchQuery.toLowerCase()) ||
            account.addr.toLowerCase().contains(_searchQuery.toLowerCase()))
        .map((account) => AddressItem(
              name: account.name,
              address: account.addr,
            ))
        .toList();
  }

  List<AddressItem> _getFilteredAddressBook(AppState appState) {
    return appState.book
        .where((account) =>
            account.name.toLowerCase().contains(_searchQuery.toLowerCase()) ||
            account.addr.toLowerCase().contains(_searchQuery.toLowerCase()))
        .map((account) => AddressItem(
              name: account.name,
              address: account.addr,
            ))
        .toList();
  }

  List<AddressItem> _getFilteredHistory(AppState appState) {
    // Implement filtering logic for history
    return []; // Return filtered list of historical addresses
  }
}

class AddressItem {
  final String name;
  final String address;

  AddressItem({
    required this.name,
    required this.address,
  });
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/manage_tokens.dart`:

```dart
import 'package:blockies/blockies.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/image_cache.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/mixins/colors.dart';
import 'package:zilpay/mixins/icon.dart';
import 'package:zilpay/src/rust/api/token.dart';
import 'package:zilpay/state/app_state.dart';
import '../theme/app_theme.dart' as theme;

void showManageTokensModal({
  required BuildContext context,
  VoidCallback? onAddToken,
  Function(String)? onTokenToggle,
}) {
  showModalBottomSheet<void>(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (BuildContext context) {
      return Padding(
        padding: EdgeInsets.only(
          bottom: MediaQuery.of(context).viewInsets.bottom,
        ),
        child: _ManageTokensModalContent(
          onAddToken: onAddToken,
        ),
      );
    },
  );
}

class _ManageTokensModalContent extends StatefulWidget {
  final VoidCallback? onAddToken;

  const _ManageTokensModalContent({
    this.onAddToken,
  });

  @override
  State<_ManageTokensModalContent> createState() =>
      _ManageTokensModalContentState();
}

class _ManageTokensModalContentState extends State<_ManageTokensModalContent> {
  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<AppState>(context).currentTheme;
    final appState = Provider.of<AppState>(context);
    final tokens = appState.wallet?.tokens ?? [];

    final double headerHeight = 84.0;
    final double searchBarHeight = 80.0; // Search bar + padding
    final double tokenItemHeight = 56.0; // Height per token item
    final double bottomPadding = MediaQuery.of(context).padding.bottom;

    // Calculate total content height
    final double totalContentHeight = headerHeight +
        searchBarHeight +
        (tokens.length * tokenItemHeight) +
        bottomPadding;

    final double maxHeight = MediaQuery.of(context).size.height * 0.7;
    final double containerHeight = totalContentHeight.clamp(0.0, maxHeight);

    return Container(
      height: containerHeight,
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: const BorderRadius.vertical(
          top: Radius.circular(20),
        ),
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            width: 36,
            height: 4,
            margin: const EdgeInsets.symmetric(vertical: 16),
            decoration: BoxDecoration(
              color: theme.textSecondary.withValues(alpha: 0.5),
              borderRadius: BorderRadius.circular(2),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(16),
            child: SmartInput(
              controller: _searchController,
              hint: 'Search',
              leftIconPath: 'assets/icons/plus.svg',
              onLeftIconTap: widget.onAddToken,
              onChanged: (value) => setState(() => _searchQuery = value),
              borderColor: theme.textPrimary,
              focusedBorderColor: theme.primaryPurple,
              height: 48,
              fontSize: 16,
              padding: const EdgeInsets.symmetric(horizontal: 16),
            ),
          ),
          Expanded(
            child: ListView(
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              children: _buildTokenItems(theme, appState),
            ),
          ),
          SizedBox(height: bottomPadding),
        ],
      ),
    );
  }

  List<Widget> _buildTokenItems(theme.AppTheme theme, AppState appState) {
    if (appState.wallet == null) {
      return [];
    }

    return appState.wallet!.tokens
        .where((token) =>
            token.name.toLowerCase().contains(_searchQuery.toLowerCase()) ||
            token.symbol.toLowerCase().contains(_searchQuery.toLowerCase()))
        .where((token) => token.addrType == appState.account?.addrType)
        .map((token) => _TokenListItem(
              symbol: token.symbol,
              name: token.name,
              addr: token.addr,
              isDefault: token.default_,
              iconUrl: viewTokenIcon(
                token,
                appState.chain!.chainId,
                theme.value,
              ),
              onToggle: (value) async {
                if (!value) {
                  final int index = appState.wallet!.tokens
                      .indexWhere((t) => t.addr == token.addr);

                  if (index == -1) {
                    return;
                  }

                  try {
                    await rmFtoken(
                      walletIndex: BigInt.from(appState.selectedWallet),
                      tokenIndex: BigInt.from(index),
                    );
                    await appState.syncData();
                  } catch (e) {
                    debugPrint("remove token error: $e");
                  }
                }
              },
              isEnabled: !token.default_,
            ))
        .toList();
  }
}

class _TokenListItem extends StatelessWidget {
  final String symbol;
  final String name;
  final String addr;
  final String iconUrl;
  final Function(bool)? onToggle;
  final bool isEnabled;
  final bool isDefault;

  const _TokenListItem({
    required this.symbol,
    required this.name,
    required this.addr,
    required this.iconUrl,
    required this.isEnabled,
    required this.isDefault,
    this.onToggle,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<AppState>(context).currentTheme;
    const double iconSize = 32.0;

    return Container(
      margin: const EdgeInsets.only(bottom: 8),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          Container(
            width: iconSize,
            height: iconSize,
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(16),
            ),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(16),
              child: AsyncImage(
                url: iconUrl,
                width: iconSize,
                height: iconSize,
                fit: BoxFit.contain,
                errorWidget: Blockies(
                  seed: addr,
                  color: getWalletColor(0),
                  bgColor: theme.primaryPurple,
                  spotColor: theme.background,
                  size: 8,
                ),
                loadingWidget: const Center(
                  child: CircularProgressIndicator(
                    strokeWidth: 2,
                  ),
                ),
              ),
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Text(
                      symbol,
                      style: TextStyle(
                        color: theme.textPrimary,
                        fontSize: 16,
                        fontWeight: FontWeight.w500,
                        height: 1.2,
                      ),
                    ),
                    if (isDefault) ...[
                      const SizedBox(width: 8),
                      Container(
                        padding: const EdgeInsets.symmetric(
                          horizontal: 6,
                          vertical: 2,
                        ),
                        decoration: BoxDecoration(
                          color: theme.textSecondary.withValues(alpha: 0.1),
                          borderRadius: BorderRadius.circular(4),
                        ),
                        child: Text(
                          'Default',
                          style: TextStyle(
                            color: theme.textSecondary,
                            fontSize: 12,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      ),
                    ],
                  ],
                ),
                const SizedBox(height: 2),
                Text(
                  name,
                  style: TextStyle(
                    color: theme.textSecondary,
                    fontSize: 14,
                    height: 1.2,
                  ),
                ),
              ],
            ),
          ),
          Switch(
            value: isDefault ? true : isEnabled,
            onChanged: onToggle,
            activeColor: isDefault ? theme.textSecondary : theme.success,
          ),
        ],
      ),
    );
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/transfer.dart`:

```dart
import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/gas_eip1559.dart';
import 'package:zilpay/components/image_cache.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/components/swipe_button.dart';
import 'package:zilpay/components/token_transfer_amount.dart';
import 'package:zilpay/mixins/amount.dart';
import 'package:zilpay/mixins/icon.dart';
import 'package:zilpay/services/auth_guard.dart';
import 'package:zilpay/services/biometric_service.dart';
import 'package:zilpay/services/device.dart';
import 'package:zilpay/src/rust/api/transaction.dart';
import 'package:zilpay/src/rust/models/gas.dart';
import 'package:zilpay/src/rust/models/transactions/evm.dart';
import 'package:zilpay/src/rust/models/transactions/request.dart';
import 'package:zilpay/src/rust/models/transactions/scilla.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/theme/app_theme.dart';

void showConfirmTransactionModal({
  required BuildContext context,
  required TransactionRequestInfo tx,
  required String to,
  required String amount,
  required int tokenIndex,
  required VoidCallback onConfirm,
}) {
  showModalBottomSheet<void>(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (context) => _ConfirmTransactionContent(
      tx: tx,
      tokenIndex: tokenIndex,
      amount: amount,
      to: to,
      onConfirm: onConfirm,
    ),
  );
}

class _ConfirmTransactionContent extends StatefulWidget {
  final TransactionRequestInfo tx;
  final String to;
  final int tokenIndex;
  final String amount;
  final VoidCallback onConfirm;

  const _ConfirmTransactionContent({
    required this.tx,
    required this.amount,
    required this.to,
    required this.tokenIndex,
    required this.onConfirm,
  });

  @override
  State<_ConfirmTransactionContent> createState() =>
      _ConfirmTransactionContentState();
}

class _ConfirmTransactionContentState
    extends State<_ConfirmTransactionContent> {
  final _passwordController = TextEditingController();
  final _passwordInputKey = GlobalKey<SmartInputState>();
  final AuthService _authService = AuthService();
  late final AuthGuard _authGuard;

  RequiredTxParamsInfo _txParamsInfo = RequiredTxParamsInfo(
    gasPrice: BigInt.zero,
    maxPriorityFee: BigInt.zero,
    feeHistory: GasFeeHistoryInfo(
      maxFee: BigInt.zero,
      priorityFee: BigInt.zero,
      baseFee: BigInt.zero,
    ),
    txEstimateGas: BigInt.zero,
    blobBaseFee: BigInt.zero,
    nonce: BigInt.zero,
  );
  bool _loading = false;
  String? _error;
  BigInt _maxPriorityFee = BigInt.zero;
  BigInt _gasPrice = BigInt.zero;
  bool _obscurePassword = true;
  Timer? _timerPooling;

  bool get isEVM => widget.tx.evm != null;
  bool get isScilla => widget.tx.scilla != null;
  bool get hasError => _error != null;

  @override
  void initState() {
    super.initState();
    _authGuard = Provider.of<AuthGuard>(context, listen: false);

    _handleModalOpen(true);

    AppState appState = Provider.of<AppState>(context, listen: false);
    final chainHash = appState.account?.chainHash ?? BigInt.zero;
    int? diffBlockTime = appState.getChain(chainHash)?.diffBlockTime.toInt();

    if (diffBlockTime == null || diffBlockTime == 0) {
      diffBlockTime = 10;
    }

    _timerPooling =
        Timer.periodic(Duration(seconds: diffBlockTime), (Timer timer) async {
      if (!mounted) {
        timer.cancel();
        return;
      }

      await _handleModalOpen(false);
    });
  }

  @override
  void dispose() {
    _passwordController.dispose();
    if (_timerPooling != null) {
      _timerPooling!.cancel();
    }
    super.dispose();
  }

  TransactionRequestInfo _prepareEvmTransaction() {
    final newTx = TransactionRequestEVM(
      nonce: _txParamsInfo.nonce,
      from: widget.tx.evm!.from,
      to: widget.tx.evm!.to,
      value: widget.tx.evm!.value,
      data: widget.tx.evm!.data,
      chainId: widget.tx.evm!.chainId,
      accessList: widget.tx.evm!.accessList,
      blobVersionedHashes: widget.tx.evm!.blobVersionedHashes,
      maxFeePerBlobGas: widget.tx.evm!.maxFeePerBlobGas,
      maxPriorityFeePerGas: _maxPriorityFee,
      gasLimit: _txParamsInfo.txEstimateGas,
      gasPrice: _gasPrice,
      maxFeePerGas:
          (_txParamsInfo.feeHistory.baseFee * BigInt.from(2)) + _maxPriorityFee,
    );

    return TransactionRequestInfo(
      metadata: widget.tx.metadata,
      evm: newTx,
    );
  }

  TransactionRequestInfo _prepareScillaTransaction() {
    final newTx = TransactionRequestScilla(
      chainId: widget.tx.scilla!.chainId,
      nonce: _txParamsInfo.nonce + BigInt.one,
      gasPrice: _gasPrice,
      gasLimit: widget.tx.scilla!.gasLimit,
      toAddr: widget.tx.scilla!.toAddr,
      amount: widget.tx.scilla!.amount,
      code: widget.tx.scilla!.code,
      data: widget.tx.scilla!.data,
    );

    return TransactionRequestInfo(
      metadata: widget.tx.metadata,
      scilla: newTx,
    );
  }

  Future<bool> _authenticateWithBiometrics() async {
    return await _authService.authenticate(
      allowPinCode: true,
      reason: 'Please authenticate',
    );
  }

  Future<void> _handleTransactionSigning(
      AppState appState, TransactionRequestInfo tx) async {
    final device = DeviceInfoService();
    final identifiers = await device.getDeviceIdentifiers();

    if (appState.wallet!.authType != AuthMethod.none.name) {
      final biometricAuth = await _authenticateWithBiometrics();
      if (!biometricAuth) return;

      final session = await _authGuard.getSession(
        sessionKey: appState.wallet!.walletAddress,
      );

      await signSendTransactions(
        walletIndex: BigInt.from(appState.selectedWallet),
        accountIndex: appState.wallet!.selectedAccount,
        identifiers: identifiers,
        tx: tx,
        password: null,
        passphrase: null,
        sessionCipher: session,
      );
    } else {
      await signSendTransactions(
        walletIndex: BigInt.from(appState.selectedWallet),
        accountIndex: appState.wallet!.selectedAccount,
        identifiers: identifiers,
        tx: tx,
        password: _passwordController.text,
        passphrase: null,
        sessionCipher: null,
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;
    final keyboardHeight = MediaQuery.of(context).viewInsets.bottom;

    return Container(
      constraints: BoxConstraints(
        maxHeight: MediaQuery.of(context).size.height * 0.9,
      ),
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: const BorderRadius.only(
          topLeft: Radius.circular(20),
          topRight: Radius.circular(20),
        ),
      ),
      child: SafeArea(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            _buildDragHandle(theme),
            Flexible(
              child: SingleChildScrollView(
                physics: const BouncingScrollPhysics(),
                child: Padding(
                  padding: EdgeInsets.only(bottom: keyboardHeight),
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      if (hasError) _buildErrorMessage(theme),
                      _buildTokenLogo(appState),
                      const SizedBox(height: 4),
                      _buildTransferDetails(appState),
                      _buildGasSettings(),
                      _buildAuthenticationInput(appState, theme),
                      _buildConfirmButton(),
                      SizedBox(height: keyboardHeight > 0 ? 16 : 32),
                    ],
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDragHandle(AppTheme theme) {
    return Container(
      width: 36,
      height: 4,
      margin: const EdgeInsets.symmetric(vertical: 16),
      decoration: BoxDecoration(
        color: theme.textSecondary.withValues(alpha: 0.5),
        borderRadius: BorderRadius.circular(2),
      ),
    );
  }

  Widget _buildErrorMessage(AppTheme theme) {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: theme.danger.withValues(alpha: 0.1),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Row(
        children: [
          SvgPicture.asset(
            "assets/icons/warning.svg",
            width: 24,
            height: 24,
            colorFilter: ColorFilter.mode(
              theme.danger,
              BlendMode.srcIn,
            ),
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              _error!,
              style: TextStyle(
                color: theme.danger,
                fontSize: 14,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildGasSettings() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16),
      child: GasEIP1559(
        txParamsInfo: _txParamsInfo,
        disabled: _txParamsInfo.gasPrice == BigInt.zero || _loading,
        onChangeGasPrice: (gasPrice) {
          setState(() {
            _gasPrice = gasPrice;
          });
        },
        onChangeMaxPriorityFee: (BigInt maxPriorityFee) {
          setState(() {
            _maxPriorityFee = maxPriorityFee;
          });
        },
      ),
    );
  }

  Widget _buildAuthenticationInput(AppState appState, AppTheme theme) {
    if (appState.wallet!.authType != AuthMethod.none.name) {
      return const SizedBox(height: 16);
    }

    return Container(
      padding: const EdgeInsets.all(12),
      child: SmartInput(
        key: _passwordInputKey,
        controller: _passwordController,
        hint: "Password",
        fontSize: 18,
        height: 56,
        padding: const EdgeInsets.symmetric(horizontal: 20),
        focusedBorderColor: theme.primaryPurple,
        disabled: _txParamsInfo.gasPrice == BigInt.zero || _loading,
        obscureText: _obscurePassword,
        rightIconPath: _obscurePassword
            ? "assets/icons/close_eye.svg"
            : "assets/icons/open_eye.svg",
        onRightIconTap: () {
          setState(() {
            _obscurePassword = !_obscurePassword;
          });
        },
      ),
    );
  }

  Widget _buildConfirmButton() {
    final appState = Provider.of<AppState>(context);

    Future<void> handleConfirmation() async {
      try {
        setState(() {
          _loading = true;
          _error = null;
        });

        if (!_hasEnoughBalance()) {
          throw Exception('Insufficient balance for this transaction');
        }

        final tx =
            isEVM ? _prepareEvmTransaction() : _prepareScillaTransaction();
        await _handleTransactionSigning(appState, tx);

        if (mounted) {
          widget.onConfirm();
        }
      } catch (e) {
        setState(() {
          _error = e.toString();
        });
      } finally {
        setState(() {
          _loading = false;
        });
      }
    }

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16),
      child: SwipeButton(
        text: hasError ? "Unable to confirm" : "Confirm",
        disabled: _txParamsInfo.gasPrice == BigInt.zero || _loading,
        onSwipeComplete: handleConfirmation,
      ),
    );
  }

  Widget _buildTokenLogo(AppState state) {
    const double imageSize = 54;
    final theme = state.currentTheme;

    try {
      final token = state.wallet!.tokens
          .firstWhere((t) => t.symbol == widget.tx.metadata.tokenInfo?.symbol);
      final chainId = state.chain?.chainId ?? BigInt.zero;

      return Container(
        width: imageSize,
        height: imageSize,
        decoration: BoxDecoration(
          shape: BoxShape.circle,
          border: Border.all(
            color: theme.primaryPurple.withValues(alpha: 0.1),
            width: 2,
          ),
        ),
        child: ClipOval(
          child: AsyncImage(
            url: viewTokenIcon(
              token,
              chainId,
              theme.value,
            ),
            width: imageSize,
            height: imageSize,
            fit: BoxFit.contain,
          ),
        ),
      );
    } catch (e) {
      setState(() {
        _error = 'Invalid token information';
      });
      return const SizedBox.shrink();
    }
  }

  Widget _buildTransferDetails(AppState appState) {
    try {
      final token = appState.wallet!.tokens[widget.tokenIndex];
      final signer = appState.account;

      if (signer == null) {
        throw Exception('No active account found');
      }

      return Container(
        padding: const EdgeInsets.all(16),
        child: TokenTransferAmount(
          fromAddress: signer.addr,
          fromName: signer.name,
          toAddress: widget.to,
          amount: widget.amount,
          symbol: token.symbol,
        ),
      );
    } catch (e) {
      setState(() {
        _error = 'Failed to load transfer details';
      });
      return const SizedBox.shrink();
    }
  }

  Future<void> _handleModalOpen(bool errorhanlde) async {
    if (_loading) {
      return;
    }

    final appState = Provider.of<AppState>(context, listen: false);

    try {
      if (errorhanlde) {
        setState(() {
          _error = null;
        });
      }

      RequiredTxParamsInfo gas = await caclGasFee(
        params: widget.tx,
        walletIndex: BigInt.from(appState.selectedWallet),
        accountIndex: appState.wallet!.selectedAccount,
      );

      if (mounted && gas.gasPrice != BigInt.zero) {
        setState(() {
          _txParamsInfo = gas;
        });
      }
    } catch (e) {
      debugPrint('Error in periodic call: $e');
      if (errorhanlde && mounted) {
        setState(() {
          _error = 'Failed to calculate gas fee: ${e.toString()}';
        });
      }
    }
  }

  bool _hasEnoughBalance() {
    try {
      final appState = Provider.of<AppState>(context, listen: false);
      final token = appState.wallet!.tokens[widget.tokenIndex];
      final selectedAccount = appState.wallet!.selectedAccount;
      final amount = toWei(widget.amount, token.decimals);
      final balance = BigInt.parse(token.balances[selectedAccount] ?? "0");

      return balance >= amount;
    } catch (e) {
      return false;
    }
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/select_token.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/components/token_select_item.dart';
import 'package:zilpay/mixins/amount.dart';
import 'package:zilpay/mixins/icon.dart';
import 'package:zilpay/src/rust/models/ftoken.dart';
import 'package:zilpay/state/app_state.dart';
import '../theme/app_theme.dart' as theme;

void showTokenSelectModal({
  required BuildContext context,
  required Function(int) onTokenSelected,
}) {
  showModalBottomSheet<void>(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (BuildContext context) {
      return Padding(
        padding: EdgeInsets.only(
          bottom: MediaQuery.of(context).viewInsets.bottom,
        ),
        child: _TokenSelectModalContent(
          onTokenSelected: onTokenSelected,
        ),
      );
    },
  );
}

class _TokenSelectModalContent extends StatefulWidget {
  final Function(int) onTokenSelected;

  const _TokenSelectModalContent({
    required this.onTokenSelected,
  });

  @override
  State<_TokenSelectModalContent> createState() =>
      _TokenSelectModalContentState();
}

class _TokenSelectModalContentState extends State<_TokenSelectModalContent> {
  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<AppState>(context).currentTheme;
    final appState = Provider.of<AppState>(context);
    final tokens = appState.wallet?.tokens ?? [];

    final double headerHeight = 84.0;
    final double searchBarHeight = 80.0;
    final double tokenItemHeight = 72.0;
    final double bottomPadding = MediaQuery.of(context).padding.bottom;

    final double totalContentHeight = headerHeight +
        searchBarHeight +
        (tokens.length * tokenItemHeight) +
        bottomPadding;

    final double maxHeight = MediaQuery.of(context).size.height * 0.7;
    final double containerHeight = totalContentHeight.clamp(0.0, maxHeight);

    return Container(
      height: containerHeight,
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: const BorderRadius.vertical(
          top: Radius.circular(20),
        ),
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            width: 36,
            height: 4,
            margin: const EdgeInsets.symmetric(vertical: 16),
            decoration: BoxDecoration(
              color: theme.textSecondary.withValues(alpha: 0.5),
              borderRadius: BorderRadius.circular(2),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(16),
            child: SmartInput(
              controller: _searchController,
              hint: 'Search',
              leftIconPath: 'assets/icons/search.svg',
              onChanged: (value) => setState(() => _searchQuery = value),
              borderColor: theme.textPrimary,
              focusedBorderColor: theme.primaryPurple,
              height: 48,
              fontSize: 16,
              padding: const EdgeInsets.symmetric(horizontal: 16),
            ),
          ),
          Expanded(
            child: ListView.separated(
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              itemCount: _getFilteredTokens(appState).length,
              separatorBuilder: (context, index) => Divider(
                height: 1,
                color: theme.textSecondary.withValues(alpha: 0.1),
              ),
              itemBuilder: (context, index) {
                return _buildTokenItem(
                  theme,
                  appState,
                  _getFilteredTokens(appState)[index],
                );
              },
            ),
          ),
          SizedBox(height: bottomPadding),
        ],
      ),
    );
  }

  List<FTokenInfo> _getFilteredTokens(AppState appState) {
    if (appState.wallet == null) {
      return [];
    }

    final tokens = appState.wallet!.tokens;
    return tokens
        .where((token) => token.addrType == appState.account?.addrType)
        .where((token) =>
            token.name.toLowerCase().contains(_searchQuery.toLowerCase()) ||
            token.symbol.toLowerCase().contains(_searchQuery.toLowerCase()))
        .toList();
  }

  Widget _buildTokenItem(
    theme.AppTheme theme,
    AppState appState,
    FTokenInfo token,
  ) {
    final tokens = appState.wallet!.tokens;
    final tokenIndex = tokens.indexOf(token);
    final bigBalance =
        BigInt.parse(token.balances[appState.wallet!.selectedAccount] ?? '0');
    final balance = adjustAmountToDouble(bigBalance, token.decimals);

    return TokenSelectItem(
      addr: token.addr,
      symbol: token.symbol,
      name: token.name,
      balance: balance.toString(),
      iconUrl: viewTokenIcon(
        token,
        appState.chain!.chainId,
        theme.value,
      ),
      onTap: () {
        widget.onTokenSelected(tokenIndex);
        Navigator.pop(context);
      },
    );
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/password_change.dart`:

```dart
import 'package:flutter/material.dart';
import '../../components/button.dart';
import '../../components/smart_input.dart';
import '../../theme/app_theme.dart';

class ChangePasswordModal extends StatefulWidget {
  final AppTheme theme;

  const ChangePasswordModal({
    super.key,
    required this.theme,
  });

  @override
  State<ChangePasswordModal> createState() => _ChangePasswordModalState();
}

class _ChangePasswordModalState extends State<ChangePasswordModal> {
  final _currentPasswordController = TextEditingController();
  final _newPasswordController = TextEditingController();

  final _currentPasswordInputKey = GlobalKey<SmartInputState>();
  final _newPasswordInputKey = GlobalKey<SmartInputState>();

  bool _obscureCurrentPassword = true;
  bool _obscureNewPassword = true;
  bool _disabled = false;
  String _errorMessage = '';

  static const double _inputHeight = 50.0;

  @override
  void dispose() {
    _currentPasswordController.dispose();
    _newPasswordController.dispose();
    super.dispose();
  }

  bool _validatePasswords() {
    if (_currentPasswordController.text.isEmpty) {
      _currentPasswordInputKey.currentState?.shake();
      setState(() {
        _errorMessage = 'Current password cannot be empty';
        _disabled = false;
      });
      return false;
    }

    if (_newPasswordController.text.length < 6) {
      _newPasswordInputKey.currentState?.shake();
      setState(() {
        _errorMessage = 'Password must be at least 8 characters';
        _disabled = false;
      });
      return false;
    }

    return true;
  }

  void _handleChangePassword(BuildContext context) {
    setState(() {
      _errorMessage = '';
      _disabled = true;
    });

    if (!_validatePasswords()) {
      return;
    }

    // Add password change logic here
    debugPrint('Change password clicked');
    Navigator.pop(context);
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Center(
          child: Container(
            width: 32,
            height: 4,
            margin: const EdgeInsets.only(top: 8, bottom: 16),
            decoration: BoxDecoration(
              color: widget.theme.textSecondary.withValues(alpha: 0.3),
              borderRadius: BorderRadius.circular(2),
            ),
          ),
        ),
        Padding(
          padding: EdgeInsets.fromLTRB(
            16,
            0,
            16,
            MediaQuery.of(context).viewInsets.bottom + 16,
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Change Password',
                style: TextStyle(
                  color: widget.theme.textPrimary,
                  fontSize: 18,
                  fontWeight: FontWeight.w500,
                ),
              ),
              const SizedBox(height: 8),
              Text(
                'Enter your current password and choose a new password to update your wallet security.',
                style: TextStyle(
                  color: widget.theme.textSecondary,
                  fontSize: 14,
                ),
              ),
              const SizedBox(height: 24),
              SmartInput(
                key: _currentPasswordInputKey,
                controller: _currentPasswordController,
                hint: 'Current Password',
                height: _inputHeight,
                fontSize: 18,
                disabled: _disabled,
                padding: const EdgeInsets.symmetric(horizontal: 20),
                obscureText: _obscureCurrentPassword,
                rightIconPath: _obscureCurrentPassword
                    ? "assets/icons/close_eye.svg"
                    : "assets/icons/open_eye.svg",
                onRightIconTap: () {
                  setState(() {
                    _obscureCurrentPassword = !_obscureCurrentPassword;
                  });
                },
                onChanged: (value) {
                  if (_errorMessage.isNotEmpty) {
                    setState(() {
                      _errorMessage = '';
                    });
                  }
                },
              ),
              const SizedBox(height: 16),
              SmartInput(
                key: _newPasswordInputKey,
                controller: _newPasswordController,
                hint: 'New Password',
                height: _inputHeight,
                fontSize: 18,
                disabled: _disabled,
                padding: const EdgeInsets.symmetric(horizontal: 20),
                obscureText: _obscureNewPassword,
                rightIconPath: _obscureNewPassword
                    ? "assets/icons/close_eye.svg"
                    : "assets/icons/open_eye.svg",
                onRightIconTap: () {
                  setState(() {
                    _obscureNewPassword = !_obscureNewPassword;
                  });
                },
                onChanged: (value) {
                  if (_errorMessage.isNotEmpty) {
                    setState(() {
                      _errorMessage = '';
                    });
                  }
                },
              ),
              if (_errorMessage.isNotEmpty) ...[
                const SizedBox(height: 8),
                Text(
                  _errorMessage,
                  style: TextStyle(
                    color: widget.theme.danger,
                    fontSize: 14,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ],
              const SizedBox(height: 24),
              SizedBox(
                width: double.infinity,
                child: CustomButton(
                  text: 'Change Password',
                  onPressed: () => _handleChangePassword(context),
                  backgroundColor: widget.theme.primaryPurple,
                  textColor: widget.theme.textPrimary,
                  height: 48,
                ),
              ),
              const SizedBox(height: 24),
            ],
          ),
        ),
      ],
    );
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/delete_wallet.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/load_button.dart';
import 'package:zilpay/services/device.dart';
import 'package:zilpay/src/rust/api/wallet.dart';
import 'package:zilpay/state/app_state.dart';
import '../../components/smart_input.dart';

class DeleteWalletModal extends StatefulWidget {
  const DeleteWalletModal({
    super.key,
  });

  @override
  State<DeleteWalletModal> createState() => _DeleteWalletModalState();
}

class _DeleteWalletModalState extends State<DeleteWalletModal> {
  final _passwordController = TextEditingController();
  final _passwordInputKey = GlobalKey<SmartInputState>();
  final _btnController = RoundedLoadingButtonController();

  bool _obscurePassword = true;
  bool _disabled = false;
  String _errorMessage = '';

  static const double _inputHeight = 50.0;

  @override
  void dispose() {
    _passwordController.dispose();
    super.dispose();
  }

  void _handleDeleteWallet(AppState state) async {
    if (_passwordController.text.isEmpty) {
      return;
    }

    _btnController.start();

    try {
      setState(() {
        _errorMessage = "";
        _disabled = true;
      });

      final device = DeviceInfoService();
      final identifiers = await device.getDeviceIdentifiers();

      await deleteWallet(
        walletIndex: BigInt.from(state.selectedWallet),
        identifiers: identifiers,
        password: _passwordController.text,
      );
      await state.syncData();
      _btnController.success();
      if (!mounted) return;
      await Navigator.of(context).pushNamed(
        '/login',
      );
    } catch (e) {
      setState(() {
        _errorMessage = "$e";
        _disabled = false;
      });
      _btnController.error();
      await Future.delayed(const Duration(seconds: 1));
      _btnController.reset();
    }
  }

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;

    return Column(
      mainAxisSize: MainAxisSize.min,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Center(
          child: Container(
            width: 32,
            height: 4,
            margin: const EdgeInsets.only(top: 8, bottom: 16),
            decoration: BoxDecoration(
              color: theme.textSecondary.withValues(alpha: 0.3),
              borderRadius: BorderRadius.circular(2),
            ),
          ),
        ),
        Padding(
          padding: EdgeInsets.fromLTRB(
            16,
            0,
            16,
            MediaQuery.of(context).viewInsets.bottom + 16,
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Delete Wallet',
                style: TextStyle(
                  color: theme.danger,
                  fontSize: 18,
                  fontWeight: FontWeight.w500,
                ),
              ),
              const SizedBox(height: 8),
              Text(
                'Warning: This action cannot be undone. Your wallet can only be recovered using your secret phrase. If you don\'t have access to it, you will permanently lose all funds associated with this account.',
                style: TextStyle(
                  color: theme.warning,
                  fontSize: 14,
                ),
              ),
              const SizedBox(height: 16),
              Text(
                'Please make sure you have access to your secret phrase before proceeding.',
                style: TextStyle(
                  color: theme.danger,
                  fontSize: 14,
                  fontWeight: FontWeight.w500,
                ),
              ),
              const SizedBox(height: 24),
              SmartInput(
                key: _passwordInputKey,
                controller: _passwordController,
                hint: 'Enter Password',
                height: _inputHeight,
                fontSize: 18,
                disabled: _disabled,
                padding: const EdgeInsets.symmetric(horizontal: 20),
                obscureText: _obscurePassword,
                rightIconPath: _obscurePassword
                    ? "assets/icons/close_eye.svg"
                    : "assets/icons/open_eye.svg",
                onRightIconTap: () {
                  setState(() {
                    _obscurePassword = !_obscurePassword;
                  });
                },
                onChanged: (value) {
                  if (_errorMessage.isNotEmpty) {
                    setState(() {
                      _errorMessage = '';
                    });
                  }
                },
              ),
              if (_errorMessage.isNotEmpty) ...[
                const SizedBox(height: 8),
                Text(
                  _errorMessage,
                  style: TextStyle(
                    color: theme.danger,
                    fontSize: 14,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ],
              const SizedBox(height: 24),
              SizedBox(
                width: double.infinity,
                child: RoundedLoadingButton(
                  color: theme.danger,
                  onPressed: () => _handleDeleteWallet(appState),
                  controller: _btnController,
                  successIcon: SvgPicture.asset(
                    'assets/icons/ok.svg',
                    width: 24,
                    height: 24,
                    colorFilter: ColorFilter.mode(
                      theme.textPrimary,
                      BlendMode.srcIn,
                    ),
                  ),
                  child: Text(
                    'Submit',
                    style: TextStyle(
                      color: theme.textPrimary,
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 24),
            ],
          ),
        ),
      ],
    );
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/argon2.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/button.dart';
import 'package:zilpay/components/smart_input.dart';
import 'package:zilpay/components/option_list.dart';
import 'package:zilpay/config/argon.dart';
import 'package:zilpay/src/rust/models/settings.dart';
import 'package:zilpay/state/app_state.dart';

void showArgonSettingsModal({
  required BuildContext context,
  required Function(WalletArgonParamsInfo) onParamsSelected,
  required WalletArgonParamsInfo argonParams,
}) {
  showModalBottomSheet<void>(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (BuildContext context) {
      return Padding(
        padding: EdgeInsets.only(
          bottom: MediaQuery.of(context).viewInsets.bottom,
        ),
        child: _ArgonSettingsModalContent(
          onParamsSelected: onParamsSelected,
          argonParams: argonParams,
        ),
      );
    },
  );
}

class _ArgonSettingsModalContent extends StatefulWidget {
  final Function(WalletArgonParamsInfo) onParamsSelected;
  final WalletArgonParamsInfo argonParams;

  const _ArgonSettingsModalContent({
    required this.onParamsSelected,
    required this.argonParams,
  });

  @override
  State<_ArgonSettingsModalContent> createState() =>
      _ArgonSettingsModalContentState();
}

class _ArgonSettingsModalContentState
    extends State<_ArgonSettingsModalContent> {
  final TextEditingController _secretController = TextEditingController();
  bool _obscurePassword = true;

  late int selectedParamIndex;

  final List<Map<String, String>> argonDescriptions = [
    {
      'title': 'Low Memory',
      'subtitle': '64KB RAM, 3 iterations',
      'description': 'Minimal memory usage, suitable for low-end devices.',
    },
    {
      'title': 'OWASP Default',
      'subtitle': '6.5MB RAM, 2 iterations',
      'description': 'Recommended by OWASP for general use.',
    },
    {
      'title': 'Secure',
      'subtitle': '256MB RAM, 4 iterations',
      'description': 'High security with increased memory and iterations.',
    },
  ];

  @override
  void initState() {
    super.initState();
    // Initialize with the provided argonParams
    selectedParamIndex = _getInitialParamIndex();
    _secretController.text = widget.argonParams.secret;
  }

  int _getInitialParamIndex() {
    // Logic to determine initial index based on provided argonParams
    if (widget.argonParams ==
        Argon2DefaultParams.lowMemory(secret: widget.argonParams.secret)) {
      return 0;
    } else if (widget.argonParams ==
        Argon2DefaultParams.secure(secret: widget.argonParams.secret)) {
      return 2;
    }
    return 1; // OWASP Default
  }

  @override
  void dispose() {
    _secretController.dispose();
    super.dispose();
  }

  WalletArgonParamsInfo _getSelectedParams() {
    final secret = _secretController.text;
    switch (selectedParamIndex) {
      case 0:
        return Argon2DefaultParams.lowMemory(secret: secret);
      case 1:
        return Argon2DefaultParams.owaspDefault(secret: secret);
      case 2:
        return Argon2DefaultParams.secure(secret: secret);
      default:
        return Argon2DefaultParams.owaspDefault(secret: secret);
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<AppState>(context).currentTheme;
    final bottomPadding = MediaQuery.of(context).padding.bottom;

    return Container(
      constraints: BoxConstraints(
        maxHeight: MediaQuery.of(context).size.height * 0.8,
      ),
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: const BorderRadius.vertical(
          top: Radius.circular(20),
        ),
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            width: 36,
            height: 4,
            margin: const EdgeInsets.symmetric(vertical: 16),
            decoration: BoxDecoration(
              color: theme.textSecondary.withValues(alpha: 0.5),
              borderRadius: BorderRadius.circular(2),
            ),
          ),
          Expanded(
            child: SingleChildScrollView(
              padding: const EdgeInsets.symmetric(horizontal: 16),
              physics: const BouncingScrollPhysics(),
              child: OptionsList(
                options: List.generate(
                  argonDescriptions.length,
                  (index) => OptionItem(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          argonDescriptions[index]['title']!,
                          style: TextStyle(
                            color: theme.textPrimary,
                            fontSize: 16,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                        const SizedBox(height: 4),
                        Text(
                          argonDescriptions[index]['subtitle']!,
                          style: TextStyle(
                            color: theme.primaryPurple,
                            fontSize: 14,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                        const SizedBox(height: 8),
                        Text(
                          argonDescriptions[index]['description']!,
                          style: TextStyle(
                            color: theme.textSecondary,
                            fontSize: 14,
                          ),
                        ),
                      ],
                    ),
                    isSelected: selectedParamIndex == index,
                    onSelect: () => setState(() => selectedParamIndex = index),
                  ),
                ),
                unselectedOpacity: 0.5,
              ),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(16),
            child: SmartInput(
              controller: _secretController,
              obscureText: _obscurePassword,
              rightIconPath: _obscurePassword
                  ? "assets/icons/close_eye.svg"
                  : "assets/icons/open_eye.svg",
              hint: 'Enter secret (optional)',
              borderColor: theme.textPrimary,
              focusedBorderColor: theme.primaryPurple,
              height: 48,
              fontSize: 16,
              padding: const EdgeInsets.symmetric(horizontal: 16),
              onRightIconTap: () {
                setState(() {
                  _obscurePassword = !_obscurePassword;
                });
              },
            ),
          ),
          Padding(
            padding: EdgeInsets.fromLTRB(16, 0, 16, 8 + bottomPadding),
            child: SizedBox(
              width: double.infinity,
              child: CustomButton(
                text: 'Confirm',
                onPressed: () {
                  widget.onParamsSelected(_getSelectedParams());
                  Navigator.pop(context);
                },
                backgroundColor: theme.primaryPurple,
                borderRadius: 30.0,
                height: 50.0,
              ),
            ),
          ),
        ],
      ),
    );
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/add_contect.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:zilpay/src/rust/api/book.dart';
import 'package:zilpay/state/app_state.dart';
import '../../components/button.dart';
import '../../components/smart_input.dart';
import '../../theme/app_theme.dart';

class AddAddressModal extends StatefulWidget {
  final AppTheme theme;
  final AppState state;

  const AddAddressModal({
    super.key,
    required this.theme,
    required this.state,
  });

  @override
  State<AddAddressModal> createState() => _AddAddressModalState();
}

class _AddAddressModalState extends State<AddAddressModal> {
  final _nameController = TextEditingController();
  final _addressController = TextEditingController();

  final _nameInputKey = GlobalKey<SmartInputState>();
  final _addressInputKey = GlobalKey<SmartInputState>();

  bool _disabled = false;
  String _errorMessage = '';

  static const double _inputHeight = 50.0;

  @override
  void dispose() {
    _nameController.dispose();
    _addressController.dispose();
    super.dispose();
  }

  bool _validateInputs() {
    if (_nameController.text.isEmpty) {
      _nameInputKey.currentState?.shake();
      setState(() {
        _errorMessage = 'Name cannot be empty';
        _disabled = false;
      });
      return false;
    }

    if (_addressController.text.isEmpty) {
      _addressInputKey.currentState?.shake();
      setState(() {
        _errorMessage = 'Address cannot be empty';
        _disabled = false;
      });
      return false;
    }

    return true;
  }

  Future<void> _handleAddAddress(BuildContext context) async {
    setState(() {
      _errorMessage = '';
      _disabled = true;
    });

    if (!_validateInputs()) {
      return;
    }

    try {
      await addNewBookAddress(
        name: _nameController.text,
        addr: _addressController.text,
        net: BigInt.zero, // Detect network from wallet
      );
      await widget.state.syncBook();
      if (!mounted) return;
      Navigator.pop(
        // ignore: use_build_context_synchronously
        context,
      );
    } catch (e) {
      setState(() {
        _errorMessage = e.toString();
        _disabled = true;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Center(
          child: Container(
            width: 32,
            height: 4,
            margin: const EdgeInsets.only(top: 16, bottom: 16),
            decoration: BoxDecoration(
              color: widget.theme.textSecondary.withValues(alpha: 0.3),
              borderRadius: BorderRadius.circular(2),
            ),
          ),
        ),
        Padding(
          padding: EdgeInsets.fromLTRB(
            16,
            0,
            16,
            MediaQuery.of(context).viewInsets.bottom + 16,
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Add Contact',
                style: TextStyle(
                  color: widget.theme.textPrimary,
                  fontSize: 18,
                  fontWeight: FontWeight.w500,
                ),
              ),
              const SizedBox(height: 8),
              Text(
                'Enter the contact name and wallet address to add to your address book.',
                style: TextStyle(
                  color: widget.theme.textSecondary,
                  fontSize: 14,
                ),
              ),
              const SizedBox(height: 24),
              SmartInput(
                key: _nameInputKey,
                controller: _nameController,
                hint: 'Name',
                height: _inputHeight,
                fontSize: 18,
                disabled: _disabled,
                padding: const EdgeInsets.symmetric(horizontal: 20),
                onChanged: (value) {
                  if (_errorMessage.isNotEmpty) {
                    setState(() {
                      _errorMessage = '';
                    });
                  }
                },
              ),
              const SizedBox(height: 8),
              SmartInput(
                key: _addressInputKey,
                controller: _addressController,
                hint: 'Wallet Address',
                height: _inputHeight,
                fontSize: 18,
                disabled: _disabled,
                padding: const EdgeInsets.symmetric(horizontal: 20),
                onChanged: (value) {
                  if (_errorMessage.isNotEmpty) {
                    setState(() {
                      _errorMessage = '';
                    });
                  }
                },
              ),
              if (_errorMessage.isNotEmpty) ...[
                const SizedBox(height: 8),
                Text(
                  _errorMessage,
                  style: TextStyle(
                    color: widget.theme.danger,
                    fontSize: 14,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ],
              const SizedBox(height: 16),
              SizedBox(
                width: double.infinity,
                child: CustomButton(
                  text: 'Add Contact',
                  onPressed: () => _handleAddAddress(context),
                  backgroundColor: widget.theme.primaryPurple,
                  textColor: widget.theme.textPrimary,
                  height: 48,
                ),
              ),
              const SizedBox(height: 24),
            ],
          ),
        ),
      ],
    );
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/app_connect.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/button.dart';
import 'package:zilpay/components/image_cache.dart';
import 'package:zilpay/state/app_state.dart';
import 'package:zilpay/theme/app_theme.dart';

void showAppConnectModal({
  required BuildContext context,
  required String title,
  required String uuid,
  required String iconUrl,
  required Function(bool) onDecision,
}) {
  showModalBottomSheet<void>(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (BuildContext context) {
      return Padding(
        padding: EdgeInsets.only(
          bottom: MediaQuery.of(context).viewInsets.bottom,
        ),
        child: _AppConnectModalContent(
          title: title,
          uuid: uuid,
          iconUrl: iconUrl,
          onDecision: onDecision,
        ),
      );
    },
  );
}

class _AppConnectModalContent extends StatelessWidget {
  final String title;
  final String uuid;
  final String iconUrl;
  final Function(bool) onDecision;

  const _AppConnectModalContent({
    required this.title,
    required this.uuid,
    required this.iconUrl,
    required this.onDecision,
  });

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;
    final bottomPadding = MediaQuery.of(context).padding.bottom;

    return Container(
      decoration: BoxDecoration(
        color: theme.cardBackground,
        borderRadius: const BorderRadius.vertical(
          top: Radius.circular(20),
        ),
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          _buildDragHandle(theme),
          _buildIcon(theme),
          _buildTitle(theme),
          _buildDescription(theme),
          _buildButtons(theme, context),
          SizedBox(height: bottomPadding + 16),
        ],
      ),
    );
  }

  Widget _buildDragHandle(AppTheme theme) {
    return Container(
      width: 36,
      height: 4,
      margin: const EdgeInsets.symmetric(vertical: 16),
      decoration: BoxDecoration(
        color: theme.textSecondary.withValues(alpha: 0.5),
        borderRadius: BorderRadius.circular(2),
      ),
    );
  }

  Widget _buildIcon(AppTheme theme) {
    return Padding(
      padding: const EdgeInsets.only(top: 16),
      child: Container(
        width: 64,
        height: 64,
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(16),
          border: Border.all(
            color: theme.primaryPurple.withValues(alpha: 0.2),
            width: 2,
          ),
        ),
        child: ClipRRect(
          borderRadius: BorderRadius.circular(14),
          child: AsyncImage(
            url: iconUrl,
            width: 64,
            height: 64,
            fit: BoxFit.cover,
            errorWidget: Container(
              color: theme.textSecondary.withValues(alpha: 0.1),
              child: Icon(
                Icons.apps,
                color: theme.textSecondary,
                size: 32,
              ),
            ),
            loadingWidget: Center(
              child: CircularProgressIndicator(
                strokeWidth: 2,
                color: theme.primaryPurple,
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildTitle(AppTheme theme) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
      child: Text(
        title,
        style: TextStyle(
          color: theme.textPrimary,
          fontSize: 20,
          fontWeight: FontWeight.w600,
        ),
        textAlign: TextAlign.center,
      ),
    );
  }

  Widget _buildDescription(AppTheme theme) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: Text(
        'This app wants to connect to your wallet to view your address and request transactions.',
        style: TextStyle(
          color: theme.textSecondary,
          fontSize: 14,
        ),
        textAlign: TextAlign.center,
      ),
    );
  }

  Widget _buildButtons(AppTheme theme, BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(16),
      child: Row(
        children: [
          Expanded(
            child: CustomButton(
              text: 'Connect',
              onPressed: () {
                onDecision(true);
                Navigator.pop(context);
              },
              backgroundColor: theme.primaryPurple,
              textColor: theme.textPrimary,
              height: 48,
            ),
          ),
        ],
      ),
    );
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/wallet_header.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:blockies/blockies.dart';
import 'package:provider/provider.dart';
import 'package:zilpay/components/hoverd_svg.dart';
import 'package:zilpay/components/image_cache.dart';
import 'package:zilpay/components/wallet_card.dart';
import 'package:zilpay/mixins/adaptive_size.dart';
import 'package:zilpay/mixins/colors.dart';
import 'package:zilpay/mixins/icon.dart';
import 'package:zilpay/mixins/wallet_type.dart';
import 'package:zilpay/src/rust/api/wallet.dart';
import 'package:zilpay/state/app_state.dart';

void showWalletModal({
  required BuildContext context,
  VoidCallback? onManageWallet,
  Function(int)? onWalletSelect,
}) {
  showModalBottomSheet<void>(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (BuildContext context) {
      return _WalletModalContent(
        onManageWallet: onManageWallet,
      );
    },
  );
}

class _WalletModalContent extends StatefulWidget {
  final VoidCallback? onManageWallet;

  const _WalletModalContent({
    this.onManageWallet,
  });

  @override
  State<_WalletModalContent> createState() => _WalletModalContentState();
}

class _WalletModalContentState extends State<_WalletModalContent> {
  final List<Widget> _contentStack = [];

  void _popContent() {
    if (_contentStack.isNotEmpty) {
      setState(() {
        _contentStack.removeLast();
      });
    } else {
      Navigator.pop(context);
    }
  }

  @override
  Widget build(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;

    if (appState.wallet == null) {
      return Container();
    }

    return PopScope(
      child: GestureDetector(
        onHorizontalDragEnd: (details) {
          if (details.primaryVelocity! > 0) {
            _popContent();
          }
        },
        child: Container(
          decoration: BoxDecoration(
            color: theme.cardBackground,
            borderRadius: const BorderRadius.vertical(
              top: Radius.circular(20),
            ),
          ),
          child: SingleChildScrollView(
            child: _contentStack.isNotEmpty
                ? _contentStack.last
                : _buildMainContent(context),
          ),
        ),
      ),
    );
  }

  Widget _buildMainContent(BuildContext context) {
    final appState = Provider.of<AppState>(context);
    final theme = appState.currentTheme;
    final adaptivePadding = AdaptiveSize.getAdaptivePadding(context, 16);
    final chain = appState.chain;

    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        Container(
          width: 36,
          height: 4,
          margin: EdgeInsets.symmetric(vertical: adaptivePadding),
          decoration: BoxDecoration(
            color: theme.textSecondary.withValues(alpha: 0.5),
            borderRadius: BorderRadius.circular(2),
          ),
        ),
        GestureDetector(
          behavior: HitTestBehavior.opaque,
          onTap: widget.onManageWallet,
          child: Column(
            children: [
              if (chain != null)
                Container(
                  width: 50,
                  height: 50,
                  margin: const EdgeInsets.only(bottom: 8),
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    border: Border.all(
                      color: theme.primaryPurple.withValues(alpha: 0.1),
                      width: 2,
                    ),
                  ),
                  child: AsyncImage(
                    url: chainIcon(appState.chain!.chain, null),
                    width: 32,
                    height: 32,
                    fit: BoxFit.contain,
                    errorWidget: Blockies(
                      seed: appState.wallet!.walletAddress,
                      color: getWalletColor(0),
                      bgColor: theme.primaryPurple,
                      spotColor: theme.background,
                      size: 8,
                    ),
                    loadingWidget: const Center(
                      child: CircularProgressIndicator(
                        strokeWidth: 2,
                      ),
                    ),
                  ),
                ),
              Text(
                appState.wallet!.walletName,
                style: TextStyle(
                  color: theme.textPrimary,
                  fontSize: 24,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ],
          ),
        ),
        ConstrainedBox(
          constraints: BoxConstraints(
            maxHeight: MediaQuery.of(context).size.height * 0.5,
          ),
          child: ListView(
            shrinkWrap: true,
            padding: EdgeInsets.symmetric(
              horizontal: adaptivePadding,
              vertical: adaptivePadding,
            ),
            children: appState.wallet!.accounts.asMap().entries.map((entry) {
              final index = entry.key;
              final account = entry.value;
              return WalletCard(
                account: account,
                onTap: () async {
                  final appState =
                      Provider.of<AppState>(context, listen: false);
                  BigInt walletIndex = BigInt.from(appState.selectedWallet);
                  BigInt accountIndex = BigInt.from(index);

                  try {
                    await appState.updateSelectedAccount(
                      walletIndex,
                      accountIndex,
                    );
                    if (mounted) {
                      Navigator.of(context).pop<void>();
                    }
                  } catch (e) {
                    debugPrint("select wallet error: $e");
                  }
                },
                isSelected:
                    appState.wallet!.selectedAccount == BigInt.from(index),
              );
            }).toList(),
          ),
        ),
        if (!appState.wallet!.walletType.contains(WalletType.SecretKey.name))
          Container(
            height: 64,
            padding: const EdgeInsets.symmetric(
              horizontal: 16,
              vertical: 12,
            ),
            decoration: BoxDecoration(
              border: Border(
                top: BorderSide(
                  color: theme.textPrimary.withValues(alpha: 0.1),
                  width: 1,
                ),
              ),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                HoverSvgIcon(
                  assetName: "assets/icons/plus.svg",
                  color: theme.textPrimary,
                  width: 40,
                  height: 40,
                  onTap: () {
                    Navigator.of(context).pushNamed("/add_account");
                  },
                ),
                if (appState.wallet?.selectedAccount != BigInt.zero)
                  HoverSvgIcon(
                    assetName: "assets/icons/minus.svg",
                    color: theme.danger,
                    width: 40,
                    height: 40,
                    onTap: () async {
                      try {
                        await deleteAccount(
                          walletIndex: BigInt.from(appState.selectedWallet),
                          accountIndex: appState.wallet!.selectedAccount,
                        );
                        await appState.syncData();
                      } catch (e) {
                        debugPrint("try remove account: $e");
                      }
                    },
                  ),
              ],
            ),
          ),
        SizedBox(height: MediaQuery.of(context).padding.bottom),
      ],
    );
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/custom_network_modal.dart`:

```dart
import 'package:flutter/material.dart';
import '../../components/smart_input.dart';
import '../../components/button.dart';
import '../../theme/app_theme.dart';

void showCustomNetworkModal({
  required BuildContext context,
  required AppTheme theme,
  required Function({
    required String networkName,
    required String rpcUrl,
    required String chainId,
    required String symbol,
    required String explorerUrl,
  }) onSave,
}) {
  showModalBottomSheet<void>(
    context: context,
    backgroundColor: Colors.transparent,
    isScrollControlled: true,
    enableDrag: true,
    isDismissible: true,
    useSafeArea: true,
    barrierColor: Colors.black54,
    builder: (BuildContext context) {
      return Padding(
        padding: EdgeInsets.only(
          bottom: MediaQuery.of(context).viewInsets.bottom,
        ),
        child: _CustomNetworkModalContent(
          theme: theme,
          onSave: onSave,
        ),
      );
    },
  );
}

class _CustomNetworkModalContent extends StatefulWidget {
  final AppTheme theme;
  final Function({
    required String networkName,
    required String rpcUrl,
    required String chainId,
    required String symbol,
    required String explorerUrl,
  }) onSave;

  const _CustomNetworkModalContent({
    required this.theme,
    required this.onSave,
  });

  @override
  State<_CustomNetworkModalContent> createState() =>
      _CustomNetworkModalContentState();
}

class _CustomNetworkModalContentState
    extends State<_CustomNetworkModalContent> {
  final _networkNameController = TextEditingController();
  final _rpcUrlController = TextEditingController();
  final _chainIdController = TextEditingController();
  final _symbolController = TextEditingController();
  final _explorerUrlController = TextEditingController();

  @override
  void dispose() {
    _networkNameController.dispose();
    _rpcUrlController.dispose();
    _chainIdController.dispose();
    _symbolController.dispose();
    _explorerUrlController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final bottomPadding = MediaQuery.of(context).padding.bottom;

    return Container(
      constraints: BoxConstraints(
        maxHeight: MediaQuery.of(context).size.height * 0.8,
      ),
      decoration: BoxDecoration(
        color: widget.theme.cardBackground,
        borderRadius: const BorderRadius.vertical(
          top: Radius.circular(20),
        ),
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            width: 36,
            height: 4,
            margin: const EdgeInsets.symmetric(vertical: 16),
            decoration: BoxDecoration(
              color: widget.theme.textSecondary.withValues(alpha: 0.5),
              borderRadius: BorderRadius.circular(2),
            ),
          ),
          Expanded(
            child: SingleChildScrollView(
              padding: const EdgeInsets.symmetric(horizontal: 16),
              physics: const BouncingScrollPhysics(),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  _buildInputField(
                    controller: _networkNameController,
                    hint: 'Enter network name',
                  ),
                  _buildInputField(
                    controller: _rpcUrlController,
                    hint: 'Add a URL',
                  ),
                  _buildInputField(
                    controller: _chainIdController,
                    hint: 'Enter Chain ID',
                  ),
                  _buildInputField(
                    controller: _symbolController,
                    hint: 'Enter symbol',
                  ),
                  _buildInputField(
                    controller: _explorerUrlController,
                    hint: 'Add a URL',
                  ),
                ],
              ),
            ),
          ),
          Padding(
            padding: EdgeInsets.fromLTRB(16, 0, 16, 8 + bottomPadding),
            child: SizedBox(
              width: double.infinity,
              child: CustomButton(
                text: 'Save',
                onPressed: () {
                  widget.onSave(
                    networkName: _networkNameController.text,
                    rpcUrl: _rpcUrlController.text,
                    chainId: _chainIdController.text,
                    symbol: _symbolController.text,
                    explorerUrl: _explorerUrlController.text,
                  );
                  Navigator.pop(context);
                },
                backgroundColor: widget.theme.primaryPurple,
                borderRadius: 30.0,
                height: 50.0,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildInputField({
    required TextEditingController controller,
    required String hint,
  }) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SmartInput(
            controller: controller,
            hint: hint,
            borderColor: widget.theme.textSecondary.withValues(alpha: 0.3),
            focusedBorderColor: widget.theme.primaryPurple,
            height: 48,
            fontSize: 16,
            padding: const EdgeInsets.symmetric(horizontal: 16),
          ),
        ],
      ),
    );
  }
}

```

`/Users/rinat/projects/zilpay/zilpay-mobile/lib/modals/node_selection_modal.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import '../theme/app_theme.dart';

class NodeData {
  final String name;
  final String url;

  NodeData(this.name, this.url);
}

class NodeSelectionModal extends StatefulWidget {
  final AppTheme theme;
  final bool isMainnet;
  final String selectedMainnetNode;
  final String selectedTestnetNode;
  final Function(String) onNodeSelected;

  const NodeSelectionModal({
    super.key,
    required this.theme,
    required this.isMainnet,
    required this.selectedMainnetNode,
    required this.selectedTestnetNode,
    required this.onNodeSelected,
  });

  @override
  State<NodeSelectionModal> createState() => _NodeSelectionModalState();
}

class _NodeSelectionModalState extends State<NodeSelectionModal> {
  final List<NodeData> mainnetNodes = [
    NodeData('Zilliqa mainnet', 'api.zilliqa.com'),
    NodeData('Zilliqa mainnet backup', 'api-backup.zilliqa.com'),
  ];

  final List<NodeData> testnetNodes = [
    NodeData('Zilliqa testnet', 'dev-api.zilliqa.com'),
    NodeData('Zilliqa testnet backup', 'dev-api-backup.zilliqa.com'),
  ];

  @override
  Widget build(BuildContext context) {
    final nodes = widget.isMainnet ? mainnetNodes : testnetNodes;
    final selectedNode = widget.isMainnet
        ? widget.selectedMainnetNode
        : widget.selectedTestnetNode;

    return Container(
      decoration: BoxDecoration(
        color: widget.theme.cardBackground,
        borderRadius: const BorderRadius.only(
          topLeft: Radius.circular(16),
          topRight: Radius.circular(16),
        ),
      ),
      child: SafeArea(
        child: Column(
          children: [
            // Close indicator
            Center(
              child: Container(
                width: 32,
                height: 4,
                margin: const EdgeInsets.only(top: 8, bottom: 16),
                decoration: BoxDecoration(
                  color: widget.theme.textSecondary.withValues(alpha: 0.3),
                  borderRadius: BorderRadius.circular(2),
                ),
              ),
            ),
            Expanded(
              child: ListView.builder(
                itemCount: nodes.length,
                itemBuilder: (context, index) {
                  final node = nodes[index];
                  final isSelected = node.url == selectedNode;
                  final isLastItem = index == nodes.length - 1;

                  return _buildNodeItem(
                    widget.theme,
                    node,
                    isSelected,
                    isLastItem,
                    onTap: () {
                      widget.onNodeSelected(node.url);
                      Navigator.pop(context);
                    },
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildNodeItem(
    AppTheme theme,
    NodeData node,
    bool isSelected,
    bool isLastItem, {
    required VoidCallback onTap,
  }) {
    return GestureDetector(
      behavior: HitTestBehavior.opaque,
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        decoration: BoxDecoration(
          border: !isLastItem
              ? Border(
                  bottom: BorderSide(
                    color: theme.textSecondary.withValues(alpha: 0.1),
                    width: 1,
                  ),
                )
              : null,
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              node.name,
              style: TextStyle(
                color: theme.textPrimary,
                fontSize: 16,
                fontWeight: FontWeight.w500,
              ),
            ),
            const SizedBox(height: 4),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Expanded(
                  child: Text(
                    node.url,
                    style: TextStyle(
                      color: theme.textSecondary,
                      fontSize: 14,
                    ),
                  ),
                ),
                SizedBox(
                  width: 24,
                  height: 24,
                  child: isSelected
                      ? SvgPicture.asset(
                          'assets/icons/ok.svg',
                          colorFilter: ColorFilter.mode(
                            theme.primaryPurple,
                            BlendMode.srcIn,
                          ),
                        )
                      : null,
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}

```